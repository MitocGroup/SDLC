var n = {
    "status": "ok",
    "feed": {
        "url": "https:\/\/blog.mitocgroup.com\/feed",
        "title": "Mitoc Group - Medium",
        "link": "https:\/\/blog.mitocgroup.com\/?source=rss----d770bafd0445---4",
        "author": "",
        "description": "Mitoc Group (mitocgroup.com) is a technology company that focuses on innovative enterprise solutions. Our product: DEEP Framework (github.com\/MitocGroup\/deep-framework) is a full-stack JavaScript framework for building cloud-native web applications on top of serverless computing. - Medium",
        "image": "https:\/\/cdn-images-1.medium.com\/proxy\/1*MXL-j6S8fTEd8UFP_foEEw.png"
    },
    "items": [{
        "title": "Mitoc Group Inc. Granted AWS Advanced Technology Partner Status",
        "pubDate": "2017-07-22 13:46:33",
        "link": "https:\/\/blog.mitocgroup.com\/mitoc-group-inc-granted-aws-advanced-technology-partner-status-6550e452ed1b?source=rss----d770bafd0445---4",
        "guid": "https:\/\/medium.com\/p\/6550e452ed1b",
        "author": "Mitoc Group",
        "thumbnail": "",
        "description": "\n<h4>Congratulations! Your Firm Has Been Accepted into the Advanced AWS Partner Network (APN)\u00a0Tier.<\/h4>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/974\/1*EdLlBeNnIRK0OSy_XIE3jg.jpeg\"><figcaption>Mitoc Group Inc. granted AWS Advanced Technology Partner\u00a0status<\/figcaption><\/figure><p>Woodcliff Lake, NJ\u200a\u2014\u200aJuly 21, 2017\u200a\u2014\u200a<a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group Inc.<\/a>, a technology company that focuses on innovative enterprise solutions, announced today that it has been granted <a href=\"https:\/\/aws.amazon.com\/partners\/technology\">AWS Advanced Technology Partner<\/a> status by Amazon Web Services, recognizing its ability to help businesses and developers drive innovation using DevOps and Serverless on the AWS\u00a0Cloud.<\/p>\n<p>Mitoc Group is also part of the <a href=\"https:\/\/aws.amazon.com\/partners\/saas\/\">AWS SaaS Partner Program<\/a> which provides APN Technology Partners with support as they build, launch, and grow SaaS solutions on AWS. The company and its staff is very proud to join the ranks of <a href=\"https:\/\/chef.io\/\">Chef<\/a> and <a href=\"https:\/\/puppet.com\/\">Puppet<\/a>, US based companies that pioneered DevOps landscape.<\/p>\n<p>\u201cWe are thrilled to be named an Advanced Technology Partner in the AWS Partner Network,\u201d said <a href=\"https:\/\/linkedin.com\/in\/eistrati\">Eugene Istrati<\/a>, Technology Partner at Mitoc Group. \u201cOur team has built a base of innovative products and simplified processes around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of DevOps and Serverless on the AWS\u00a0Cloud.\u201d<\/p>\n<p>Mitoc Group is helping customers like <a href=\"https:\/\/www.manning.com\/\">Manning Publications<\/a> build a new product intended to give users better access to for-pay content. \u201c We haven\u2019t had the best experiences when developing new products in the past,\u201d said Marjan Bace, Publisher at Manning. \u201cWith Serverless, there\u2019s a noticeable difference in the speed of development. We\u2019re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.\u201d<\/p>\n<p><strong>About Mitoc\u00a0Group<\/strong><\/p>\n<p>Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact <a href=\"mailto:hello@mitocgroup.com\">hello@mitocgroup.com<\/a> or visit <a href=\"https:\/\/www.mitocgroup.com\/\">www.mitocgroup.com<\/a>.<\/p>\n<p>Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6550e452ed1b\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/mitoc-group-inc-granted-aws-advanced-technology-partner-status-6550e452ed1b\">Mitoc Group Inc. Granted AWS Advanced Technology Partner Status<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n",
        "content": "\n<h4>Congratulations! Your Firm Has Been Accepted into the Advanced AWS Partner Network (APN)\u00a0Tier.<\/h4>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/974\/1*EdLlBeNnIRK0OSy_XIE3jg.jpeg\"><figcaption>Mitoc Group Inc. granted AWS Advanced Technology Partner\u00a0status<\/figcaption><\/figure><p>Woodcliff Lake, NJ\u200a\u2014\u200aJuly 21, 2017\u200a\u2014\u200a<a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group Inc.<\/a>, a technology company that focuses on innovative enterprise solutions, announced today that it has been granted <a href=\"https:\/\/aws.amazon.com\/partners\/technology\">AWS Advanced Technology Partner<\/a> status by Amazon Web Services, recognizing its ability to help businesses and developers drive innovation using DevOps and Serverless on the AWS\u00a0Cloud.<\/p>\n<p>Mitoc Group is also part of the <a href=\"https:\/\/aws.amazon.com\/partners\/saas\/\">AWS SaaS Partner Program<\/a> which provides APN Technology Partners with support as they build, launch, and grow SaaS solutions on AWS. The company and its staff is very proud to join the ranks of <a href=\"https:\/\/chef.io\/\">Chef<\/a> and <a href=\"https:\/\/puppet.com\/\">Puppet<\/a>, US based companies that pioneered DevOps landscape.<\/p>\n<p>\u201cWe are thrilled to be named an Advanced Technology Partner in the AWS Partner Network,\u201d said <a href=\"https:\/\/linkedin.com\/in\/eistrati\">Eugene Istrati<\/a>, Technology Partner at Mitoc Group. \u201cOur team has built a base of innovative products and simplified processes around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of DevOps and Serverless on the AWS\u00a0Cloud.\u201d<\/p>\n<p>Mitoc Group is helping customers like <a href=\"https:\/\/www.manning.com\/\">Manning Publications<\/a> build a new product intended to give users better access to for-pay content. \u201c We haven\u2019t had the best experiences when developing new products in the past,\u201d said Marjan Bace, Publisher at Manning. \u201cWith Serverless, there\u2019s a noticeable difference in the speed of development. We\u2019re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.\u201d<\/p>\n<p><strong>About Mitoc\u00a0Group<\/strong><\/p>\n<p>Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact <a href=\"mailto:hello@mitocgroup.com\">hello@mitocgroup.com<\/a> or visit <a href=\"https:\/\/www.mitocgroup.com\/\">www.mitocgroup.com<\/a>.<\/p>\n<p>Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6550e452ed1b\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/mitoc-group-inc-granted-aws-advanced-technology-partner-status-6550e452ed1b\">Mitoc Group Inc. Granted AWS Advanced Technology Partner Status<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n",
        "enclosure": [],
        "categories": ["aws", "partners", "aws-lambda", "serverless", "technology"]
    }, { "title": "Mitoc Group Inc. Achieves AWS Service Delivery Partner Status for AWS Lambda", "pubDate": "2016-11-29 18:36:27", "link": "https:\/\/blog.mitocgroup.com\/mitoc-group-inc-achieves-aws-service-delivery-partner-status-for-aws-lambda-19331fe3d4f0?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/19331fe3d4f0", "author": "Mitoc Group", "thumbnail": "", "description": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/974\/1*HAo4ZH15zcLXfX10AuIRUw.jpeg\"><figcaption>Mitoc Group Inc. achieves AWS Service Delivery Partner status for AWS\u00a0Lambda<\/figcaption><\/figure><p>Woodcliff Lake, NJ\u200a\u2014\u200aNov. 29, 2016 \u2013 <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group Inc.<\/a>, a technology company that focuses on innovative enterprise solutions, announced today that it has achieved AWS Service Delivery Partner status for AWS Lambda. The AWS Service Delivery Program is designed to highlight AWS Partner Network (APN) Partners who have a track record of delivering verified customer success for specific Amazon Web Services (AWS) products.<\/p>\n<p>The AWS Service Delivery Program was recently launched to help AWS customers find qualified APN Partners that provide expertise in a specific service or skill area. To qualify, partners must pass service-specific verification of customer references and a technical review, meaning customers can be confident they are working with partners that provide recent and relevant experience.<\/p>\n<p>\u201cMitoc Group is proud to be one of the first APN partners to participate in the AWS Service Delivery Program,\u201d said <a href=\"https:\/\/linkedin.com\/in\/eistrati\">Eugene Istrati<\/a>, Technology Partner at Mitoc Group. \u201cOur team has built a base of applied experience around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of the AWS\u00a0Cloud.\u201d<\/p>\n<p>APN Partners with AWS Service Delivery Partner Status for AWS Lambda provide services and tools that help customers build or migrate their solutions to a micro-services based serverless architecture, without the need to worry about provisioning or managing\u00a0servers.<\/p>\n<p>Mitoc Group is helping customers like <a href=\"https:\/\/www.manning.com\/\">Manning Publications<\/a> build a new product intended to give users better access to for-pay content. \u201c We haven\u2019t had the best experiences when developing new products in the past,\u201d said Marjan Bace, Publisher at Manning. \u201cWith AWS Lambda, there\u2019s a noticeable difference in the speed of development. We\u2019re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.\u201d<\/p>\n<p><strong>About Mitoc\u00a0Group<\/strong><\/p>\n<p>Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact <a href=\"mailto:hello@mitocgroup.com\">hello@mitocgroup.com<\/a> or visit <a href=\"https:\/\/www.mitocgroup.com\/\">www.mitocgroup.com<\/a>.<\/p>\n<p>Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=19331fe3d4f0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/mitoc-group-inc-achieves-aws-service-delivery-partner-status-for-aws-lambda-19331fe3d4f0\">Mitoc Group Inc. Achieves AWS Service Delivery Partner Status for AWS Lambda<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/974\/1*HAo4ZH15zcLXfX10AuIRUw.jpeg\"><figcaption>Mitoc Group Inc. achieves AWS Service Delivery Partner status for AWS\u00a0Lambda<\/figcaption><\/figure><p>Woodcliff Lake, NJ\u200a\u2014\u200aNov. 29, 2016 \u2013 <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group Inc.<\/a>, a technology company that focuses on innovative enterprise solutions, announced today that it has achieved AWS Service Delivery Partner status for AWS Lambda. The AWS Service Delivery Program is designed to highlight AWS Partner Network (APN) Partners who have a track record of delivering verified customer success for specific Amazon Web Services (AWS) products.<\/p>\n<p>The AWS Service Delivery Program was recently launched to help AWS customers find qualified APN Partners that provide expertise in a specific service or skill area. To qualify, partners must pass service-specific verification of customer references and a technical review, meaning customers can be confident they are working with partners that provide recent and relevant experience.<\/p>\n<p>\u201cMitoc Group is proud to be one of the first APN partners to participate in the AWS Service Delivery Program,\u201d said <a href=\"https:\/\/linkedin.com\/in\/eistrati\">Eugene Istrati<\/a>, Technology Partner at Mitoc Group. \u201cOur team has built a base of applied experience around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of the AWS\u00a0Cloud.\u201d<\/p>\n<p>APN Partners with AWS Service Delivery Partner Status for AWS Lambda provide services and tools that help customers build or migrate their solutions to a micro-services based serverless architecture, without the need to worry about provisioning or managing\u00a0servers.<\/p>\n<p>Mitoc Group is helping customers like <a href=\"https:\/\/www.manning.com\/\">Manning Publications<\/a> build a new product intended to give users better access to for-pay content. \u201c We haven\u2019t had the best experiences when developing new products in the past,\u201d said Marjan Bace, Publisher at Manning. \u201cWith AWS Lambda, there\u2019s a noticeable difference in the speed of development. We\u2019re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.\u201d<\/p>\n<p><strong>About Mitoc\u00a0Group<\/strong><\/p>\n<p>Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact <a href=\"mailto:hello@mitocgroup.com\">hello@mitocgroup.com<\/a> or visit <a href=\"https:\/\/www.mitocgroup.com\/\">www.mitocgroup.com<\/a>.<\/p>\n<p>Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=19331fe3d4f0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/mitoc-group-inc-achieves-aws-service-delivery-partner-status-for-aws-lambda-19331fe3d4f0\">Mitoc Group Inc. Achieves AWS Service Delivery Partner Status for AWS Lambda<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["partnerships", "serverless", "amazon-web-services", "aws-lambda", "publishers"] }, { "title": "Blue-Green Deployments for Serverless Powered Applications on AWS", "pubDate": "2016-10-20 13:53:18", "link": "https:\/\/blog.mitocgroup.com\/blue-green-deployments-for-serverless-powered-applications-on-aws-22a08447aa72?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/22a08447aa72", "author": "Mitoc Group", "thumbnail": "", "description": "\n<h4>First described by <a href=\"http:\/\/martinfowler.com\/bliki\/BlueGreenDeployment.html\">Martin Fowler<\/a> back in 2010, blue-green deployment is a release technique that reduces downtime and risk by running two identical production environments called Blue and\u00a0Green.<\/h4>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/900\/1*i8-5sG5Dr86M1hhU2ez8VA.png\"><figcaption>Source: <a href=\"https:\/\/devopscube.com\/wp-content\/uploads\/2016\/12\/lamda@edge.png\">https:\/\/devopscube.com\/wp-content\/uploads\/2016\/12\/lamda@edge.png<\/a><\/figcaption><\/figure><p>Fast-forwarding to 2013, <a href=\"https:\/\/github.com\/dtsato\">Danilo Sato<\/a> from ThoughtWorks published on their blog a very insightful article that describes <a href=\"https:\/\/www.thoughtworks.com\/insights\/blog\/implementing-blue-green-deployments-aws\">how to implement blue-green deployments using AWS<\/a>. We, at Mitoc Group, are working primarily with serverless computing from AWS, and today we\u2019d like to share our experience using blue-green deployment process for serverless powered applications.<\/p>\n<blockquote>Note: This blogpost uses intentionally screenshots from AWS Management Console to outline a Do-It-Yourself point of view, but we\u2019ll also provide (wherever possible) the equivalent devops command or tool, to make sure that more advanced audience is NOT bored to death\u00a0:)<\/blockquote>\n<p>The key points to keep in mind as we move\u00a0forward:<\/p>\n<ol>\n<li>We use <strong>full stack<\/strong> approach to build web applications using serverless computing from AWS (not just AWS Lambda and API\u00a0Gateway)<\/li>\n<li>We enforce <strong>security in every layer <\/strong>and <strong>least privilege access<\/strong> (e.g. front-end tier, back-end tier, data tier, as well as centralized monitoring)<\/li>\n<li>We apply the same approach to newly built applications, as well as newly cloud-migrated applications that are compatible with <strong>microservices architecture<\/strong> (we call them <strong>cloud-native<\/strong> <strong>applications<\/strong>)<\/li>\n<\/ol>\n<h3>Serverless Architecture on\u00a0AWS<\/h3>\n<p>Before we dive into the details of the blue-green deployment process for serverless powered applications, it\u2019s vital to point out the architecture of a typical web application that uses serverless computing from AWS (as shown in the picture below, as well as described in <a href=\"https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">this blogpost<\/a>).<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*obn8oKjcqkJJUIZ2bB59xg.png\"><figcaption><a href=\"https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff<\/a><\/figcaption><\/figure><p>Here below is the summarized list of AWS products we\u00a0use:<\/p>\n<ul>\n<li>Security tier: 1) <a href=\"https:\/\/aws.amazon.com\/iam\/\">AWS IAM<\/a> and 2) <a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon\u00a0Cognito<\/a>\n<\/li>\n<li>Front-end tier: 3) <a href=\"https:\/\/aws.amazon.com\/route53\/\">Amazon Route53<\/a>, 4) <a href=\"https:\/\/aws.amazon.com\/cloudfront\/\">Amazon CloudFront<\/a> and 5) <a href=\"https:\/\/aws.amazon.com\/s3\/\">Amazon\u00a0S3<\/a>\n<\/li>\n<li>Back-end tier: 6) <a href=\"https:\/\/aws.amazon.com\/api-gateway\/\">Amazon API Gateway<\/a>, 7) <a href=\"https:\/\/aws.amazon.com\/lambda\/\">AWS Lambda<\/a> and 8) <a href=\"https:\/\/aws.amazon.com\/sns\/\">Amazon\u00a0SNS<\/a>\n<\/li>\n<li>Data tier: 9) <a href=\"https:\/\/aws.amazon.com\/dynamodb\/\">Amazon DynamoDB<\/a>, 10) <a href=\"https:\/\/aws.amazon.com\/sqs\/\">Amazon SQS<\/a>, 11) <a href=\"https:\/\/aws.amazon.com\/elasticache\/\">Amazon ElastiCache<\/a> and 12) <a href=\"https:\/\/aws.amazon.com\/elasticsearch-service\/\">Amazon Elasticsearch Service<\/a>\n<\/li>\n<li>Monitoring tier: 13) <a href=\"https:\/\/aws.amazon.com\/cloudwatch\/\">Amazon CloudWatch<\/a>, 14) <a href=\"https:\/\/aws.amazon.com\/cloudtrail\/\">AWS CloudTrail<\/a> and 12) <a href=\"https:\/\/aws.amazon.com\/elasticsearch-service\/\">Amazon Elasticsearch Service<\/a>\n<\/li>\n<\/ul>\n<blockquote>Note: As you can see above, a typical web application in our case uses 14 different services from AWS. Also, Amazon CloudSearch is a much better fit as a serverless option for full-text search capabilities, but we prefer Elasticsearch technology and Amazon Elasticsearch Service\u00a0instead<\/blockquote>\n<h3>Pre-requisites and Initial Considerations<\/h3>\n<p>The blue-green deployment for serverless powered applications is happening entirely on the front-end tier, mainly because all other resources from back-end, data, monitoring and security tiers are duplicated and therefore are NOT altered during this process. So, going forward, we\u2019ll be describing only the changes that will be applied to Amazon Route53, Amazon CloudFront and Amazon S3 during any serverless blue-green deployment.<\/p>\n<p>The simplest and most straight-forward approach to blue-green deployments for serverless powered applications is to switch all traffic from blue environment to green environment on DNS level (and in case of failures, rollback from green environment to blue environment).<\/p>\n<p>Managing DNS records can be sometimes very tricky, mainly because the propagation might take unpredictable time due to various caching layers on Internet. But our experience with Amazon Route53 is amazing, as long as we are using A alias records instead of CNAME records. Here below are 3 screenshots from AWS Management Console that shows how we\u2019ve setup <em>www1.adtechmedia.io<\/em> in Amazon Route53, Amazon CloudFront and Amazon\u00a0S3:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/499\/1*eyHXfrtj3O7wSQGU20ZZlg.png\"><figcaption>aws route53 list-resource-record-sets --hosted-zone-id [YOUR_HOSTED_ZONE_ID]<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*s6ophCTwEI7j0hPlgYD8oQ.png\"><figcaption>aws cloudfront get-distribution --id [YOUR_DISTRIBUTION_ID]<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*FZ1I554l1F9AzzdLJ2_GEA.png\"><figcaption>aws s3 website s3:\/\/www1.adtechmedia.io\/ --index-document index.html --error-document error.html<\/figcaption><\/figure><h3>Blue\/Green Deployments v1<\/h3>\n<p>At this point, we are ready to switch from blue environment to green environment with zero downtime and low risks. The switch is quite\u00a0simple:<\/p>\n<p><strong>Step 1:<\/strong> Update CloudFront distribution for blue environment by removing <em>www1.adtechmedia.io<\/em> from Alternative Domain Names\u00a0(CNAMEs)<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*9k7mIBYt5JLIgtPwNuZb7A.png\"><figcaption>aws cloudfront update-distribution --distribution-config file:\/\/distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]<\/figcaption><\/figure><p><strong>Step 2:<\/strong> Update CloudFront distribution for green environment by adding <em>www1.adtechmedia.io<\/em> to Alternative Domain Names\u00a0(CNAMEs)<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*gpvcH-JV7ofL6W20xWL6xg.png\"><figcaption>aws cloudfront update-distribution --distribution-config file:\/\/distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]<\/figcaption><\/figure><p><strong>Step 3:<\/strong> Update Route53 A alias record with CloudFront distribution Domain Name from green environment<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/499\/1*uzyuegTk4QBWPkfU8TIGMw.png\"><figcaption>aws route53 change-resource-record-sets --change-batch file:\/\/resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]<\/figcaption><\/figure><p>If, for some unexpected reason, your green environment starts generating high level of failures, the rollback process is pretty similar to the one described above:<\/p>\n<ol>\n<li>Remove CNAME from green environment<\/li>\n<li>Add CNAME to blue environment<\/li>\n<li>Update Amazon Route53 with blue environment Domain\u00a0Name<\/li>\n<\/ol>\n<blockquote>UPDATE on 11\/03\/2016: A friend pointed out that it\u2019s not necessarily to add\/remove CNAMEs (which could take up to 20 minutes to propagate). Instead, just leave blue environment as it is (e.g. www1.adtechmedia.io) and setup wild carded CNAME on green environment (e.g. *.adtechmedia.io). When both distributions are enabled, blue will take precedence over green, making sure you\u2019re not stuck with new deploy in case of high level of failures.<\/blockquote>\n<h3>Blue\/Green Deployments v2<\/h3>\n<p>As you have seen in the previous blue-green deployments process the traffic between environments is switched suddenly, at 100% capacity. This is great for zero downtime, but if your application starts to fail, all of your users are affected. Some modern continuous deployment technics promote a more gradual switch of the traffic between environments. For example, we push only 5% of requests to green environment, while 95% still goes to blue environment. This allows to detect production problems early and on a much smaller audience of users, problems that have never surfaced in testing and staging phases. Is it possible to enable such an approach for serverless powered applications?<\/p>\n<p>Short answer, yes! We\u2019re very excited and humble to be able to explain our serverless solution, but there are some additional pre-requisites that must happen before. Let\u2019s describe the challenge first, and then jump into our implementation and pre-requisites.<\/p>\n<h4>The Challenge<\/h4>\n<p>Amazon CloudFront, the way it is designed, doesn\u2019t allow same CNAME on multiple distributions. That is also the reason why we\u2019re removing it from the blue environment and adding it to the green environment in our previous implementation.<\/p>\n<h4>Our implementation<\/h4>\n<p>Amazon Route53 allows weighted routing of the traffic across multiple Amazon CloudFront distributions, Amazon S3 static websites and other endpoints. So, instead of load balancing requests between distributions, we are changing current A alias record that points to blue environment from simple routing to weighted routing, and add another A alias record as green environment that points directly to Amazon S3 static website endpoint. This enables us to manipulate requests across environments as we wish: 95% vs 5% (as shown in the screenshot below), then (if everything is fine) 90% vs 10%, and so on until blue is 0% and green is\u00a0100%.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*CNgsS6Ymii3uYKIqcGqOuQ.png\"><figcaption>aws route53 change-resource-record-sets --change-batch file:\/\/resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]<\/figcaption><\/figure><p>All changes are made on Amazon Route53 level, without altering Amazon CloudFront or Amazon S3 resources. And compared to previous blue-green deployment, rollback process is even faster and easier. We remove A alias record of green environment and we\u2019re done! Well, almost done... For consistency and cost saving purposes, we also revert back A alias record of blue environment from weighted routing to simple\u00a0routing.<\/p>\n<h3>Final Thoughts and Conclusion<\/h3>\n<p>What are the down sizes (pre-requisites) of the blue-green deployments v2?<\/p>\n<ol>\n<li>Amazon S3 static website hosting doesn\u2019t support SSL, so we find ourselves temporarily enforcing HTTP-only during blue-green deployment<\/li>\n<li>Amazon S3 static endpoint can be used with Amazon Route53 A alias only if the bucket name is the same with the domain name (e.g. <a href=\"http:\/\/www.adtechmedia.io)\/\">www.adtechmedia.io)<\/a>\n<\/li>\n<li>Depends on the traffic size, specifically how much TPS you\u2019re consuming, Amazon S3 might start throttling you (more details here: <a href=\"https:\/\/docs.aws.amazon.com\/AmazonS3\/latest\/dev\/request-rate-perf-considerations.html\">Request Rate and Performance Considerations<\/a>)<\/li>\n<\/ol>\n<p>Unfortunately, there is no silver bullet that would work perfectly for any serverless powered applications on AWS. As with any software, it\u2019s up to us (developers or devops engineers) to decide the right process that fits specific use case. We just wanted to share two different approaches that empowered us to provide high quality at scale without compromising on resources and costs (which, by the way, are ridiculously low, but that\u2019s another blogpost).<\/p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>Proud to announce that #AWSLambda team decided to feature <a href=\"http:\/\/twitter.com\/MitocGroup\" target=\"_blank\" title=\"Twitter profile for @MitocGroup\">@MitocGroup<\/a> as framework partners. Thank you, <a href=\"http:\/\/twitter.com\/awscloud\" target=\"_blank\" title=\"Twitter profile for @awscloud\">@awscloud<\/a> ! <a rel=\"nofollow\" href=\"https:\/\/t.co\/VzGkMefIZD\">https:\/\/t.co\/VzGkMefIZD<\/a><\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/mitocgroup\/status\/699731557846802432\">@mitocgroup<\/a><\/p>\n<\/blockquote>\n<p>Last, but not the least, <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group<\/a> is a technology company that focuses on innovative enterprise solutions. Share your thoughts and your experience on <a href=\"https:\/\/linkedin.com\/company\/mitoc-group\">LinkedIn<\/a>, <a href=\"https:\/\/twitter.com\/mitocgroup\">Twitter<\/a> or <a href=\"https:\/\/facebook.com\/mitocgroup\">Facebook<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=22a08447aa72\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/blue-green-deployments-for-serverless-powered-applications-on-aws-22a08447aa72\">Blue-Green Deployments for Serverless Powered Applications on AWS<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<h4>First described by <a href=\"http:\/\/martinfowler.com\/bliki\/BlueGreenDeployment.html\">Martin Fowler<\/a> back in 2010, blue-green deployment is a release technique that reduces downtime and risk by running two identical production environments called Blue and\u00a0Green.<\/h4>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/900\/1*i8-5sG5Dr86M1hhU2ez8VA.png\"><figcaption>Source: <a href=\"https:\/\/devopscube.com\/wp-content\/uploads\/2016\/12\/lamda@edge.png\">https:\/\/devopscube.com\/wp-content\/uploads\/2016\/12\/lamda@edge.png<\/a><\/figcaption><\/figure><p>Fast-forwarding to 2013, <a href=\"https:\/\/github.com\/dtsato\">Danilo Sato<\/a> from ThoughtWorks published on their blog a very insightful article that describes <a href=\"https:\/\/www.thoughtworks.com\/insights\/blog\/implementing-blue-green-deployments-aws\">how to implement blue-green deployments using AWS<\/a>. We, at Mitoc Group, are working primarily with serverless computing from AWS, and today we\u2019d like to share our experience using blue-green deployment process for serverless powered applications.<\/p>\n<blockquote>Note: This blogpost uses intentionally screenshots from AWS Management Console to outline a Do-It-Yourself point of view, but we\u2019ll also provide (wherever possible) the equivalent devops command or tool, to make sure that more advanced audience is NOT bored to death\u00a0:)<\/blockquote>\n<p>The key points to keep in mind as we move\u00a0forward:<\/p>\n<ol>\n<li>We use <strong>full stack<\/strong> approach to build web applications using serverless computing from AWS (not just AWS Lambda and API\u00a0Gateway)<\/li>\n<li>We enforce <strong>security in every layer <\/strong>and <strong>least privilege access<\/strong> (e.g. front-end tier, back-end tier, data tier, as well as centralized monitoring)<\/li>\n<li>We apply the same approach to newly built applications, as well as newly cloud-migrated applications that are compatible with <strong>microservices architecture<\/strong> (we call them <strong>cloud-native<\/strong> <strong>applications<\/strong>)<\/li>\n<\/ol>\n<h3>Serverless Architecture on\u00a0AWS<\/h3>\n<p>Before we dive into the details of the blue-green deployment process for serverless powered applications, it\u2019s vital to point out the architecture of a typical web application that uses serverless computing from AWS (as shown in the picture below, as well as described in <a href=\"https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">this blogpost<\/a>).<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*obn8oKjcqkJJUIZ2bB59xg.png\"><figcaption><a href=\"https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff<\/a><\/figcaption><\/figure><p>Here below is the summarized list of AWS products we\u00a0use:<\/p>\n<ul>\n<li>Security tier: 1) <a href=\"https:\/\/aws.amazon.com\/iam\/\">AWS IAM<\/a> and 2) <a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon\u00a0Cognito<\/a>\n<\/li>\n<li>Front-end tier: 3) <a href=\"https:\/\/aws.amazon.com\/route53\/\">Amazon Route53<\/a>, 4) <a href=\"https:\/\/aws.amazon.com\/cloudfront\/\">Amazon CloudFront<\/a> and 5) <a href=\"https:\/\/aws.amazon.com\/s3\/\">Amazon\u00a0S3<\/a>\n<\/li>\n<li>Back-end tier: 6) <a href=\"https:\/\/aws.amazon.com\/api-gateway\/\">Amazon API Gateway<\/a>, 7) <a href=\"https:\/\/aws.amazon.com\/lambda\/\">AWS Lambda<\/a> and 8) <a href=\"https:\/\/aws.amazon.com\/sns\/\">Amazon\u00a0SNS<\/a>\n<\/li>\n<li>Data tier: 9) <a href=\"https:\/\/aws.amazon.com\/dynamodb\/\">Amazon DynamoDB<\/a>, 10) <a href=\"https:\/\/aws.amazon.com\/sqs\/\">Amazon SQS<\/a>, 11) <a href=\"https:\/\/aws.amazon.com\/elasticache\/\">Amazon ElastiCache<\/a> and 12) <a href=\"https:\/\/aws.amazon.com\/elasticsearch-service\/\">Amazon Elasticsearch Service<\/a>\n<\/li>\n<li>Monitoring tier: 13) <a href=\"https:\/\/aws.amazon.com\/cloudwatch\/\">Amazon CloudWatch<\/a>, 14) <a href=\"https:\/\/aws.amazon.com\/cloudtrail\/\">AWS CloudTrail<\/a> and 12) <a href=\"https:\/\/aws.amazon.com\/elasticsearch-service\/\">Amazon Elasticsearch Service<\/a>\n<\/li>\n<\/ul>\n<blockquote>Note: As you can see above, a typical web application in our case uses 14 different services from AWS. Also, Amazon CloudSearch is a much better fit as a serverless option for full-text search capabilities, but we prefer Elasticsearch technology and Amazon Elasticsearch Service\u00a0instead<\/blockquote>\n<h3>Pre-requisites and Initial Considerations<\/h3>\n<p>The blue-green deployment for serverless powered applications is happening entirely on the front-end tier, mainly because all other resources from back-end, data, monitoring and security tiers are duplicated and therefore are NOT altered during this process. So, going forward, we\u2019ll be describing only the changes that will be applied to Amazon Route53, Amazon CloudFront and Amazon S3 during any serverless blue-green deployment.<\/p>\n<p>The simplest and most straight-forward approach to blue-green deployments for serverless powered applications is to switch all traffic from blue environment to green environment on DNS level (and in case of failures, rollback from green environment to blue environment).<\/p>\n<p>Managing DNS records can be sometimes very tricky, mainly because the propagation might take unpredictable time due to various caching layers on Internet. But our experience with Amazon Route53 is amazing, as long as we are using A alias records instead of CNAME records. Here below are 3 screenshots from AWS Management Console that shows how we\u2019ve setup <em>www1.adtechmedia.io<\/em> in Amazon Route53, Amazon CloudFront and Amazon\u00a0S3:<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/499\/1*eyHXfrtj3O7wSQGU20ZZlg.png\"><figcaption>aws route53 list-resource-record-sets --hosted-zone-id [YOUR_HOSTED_ZONE_ID]<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*s6ophCTwEI7j0hPlgYD8oQ.png\"><figcaption>aws cloudfront get-distribution --id [YOUR_DISTRIBUTION_ID]<\/figcaption><\/figure><figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*FZ1I554l1F9AzzdLJ2_GEA.png\"><figcaption>aws s3 website s3:\/\/www1.adtechmedia.io\/ --index-document index.html --error-document error.html<\/figcaption><\/figure><h3>Blue\/Green Deployments v1<\/h3>\n<p>At this point, we are ready to switch from blue environment to green environment with zero downtime and low risks. The switch is quite\u00a0simple:<\/p>\n<p><strong>Step 1:<\/strong> Update CloudFront distribution for blue environment by removing <em>www1.adtechmedia.io<\/em> from Alternative Domain Names\u00a0(CNAMEs)<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*9k7mIBYt5JLIgtPwNuZb7A.png\"><figcaption>aws cloudfront update-distribution --distribution-config file:\/\/distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]<\/figcaption><\/figure><p><strong>Step 2:<\/strong> Update CloudFront distribution for green environment by adding <em>www1.adtechmedia.io<\/em> to Alternative Domain Names\u00a0(CNAMEs)<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*gpvcH-JV7ofL6W20xWL6xg.png\"><figcaption>aws cloudfront update-distribution --distribution-config file:\/\/distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]<\/figcaption><\/figure><p><strong>Step 3:<\/strong> Update Route53 A alias record with CloudFront distribution Domain Name from green environment<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/499\/1*uzyuegTk4QBWPkfU8TIGMw.png\"><figcaption>aws route53 change-resource-record-sets --change-batch file:\/\/resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]<\/figcaption><\/figure><p>If, for some unexpected reason, your green environment starts generating high level of failures, the rollback process is pretty similar to the one described above:<\/p>\n<ol>\n<li>Remove CNAME from green environment<\/li>\n<li>Add CNAME to blue environment<\/li>\n<li>Update Amazon Route53 with blue environment Domain\u00a0Name<\/li>\n<\/ol>\n<blockquote>UPDATE on 11\/03\/2016: A friend pointed out that it\u2019s not necessarily to add\/remove CNAMEs (which could take up to 20 minutes to propagate). Instead, just leave blue environment as it is (e.g. www1.adtechmedia.io) and setup wild carded CNAME on green environment (e.g. *.adtechmedia.io). When both distributions are enabled, blue will take precedence over green, making sure you\u2019re not stuck with new deploy in case of high level of failures.<\/blockquote>\n<h3>Blue\/Green Deployments v2<\/h3>\n<p>As you have seen in the previous blue-green deployments process the traffic between environments is switched suddenly, at 100% capacity. This is great for zero downtime, but if your application starts to fail, all of your users are affected. Some modern continuous deployment technics promote a more gradual switch of the traffic between environments. For example, we push only 5% of requests to green environment, while 95% still goes to blue environment. This allows to detect production problems early and on a much smaller audience of users, problems that have never surfaced in testing and staging phases. Is it possible to enable such an approach for serverless powered applications?<\/p>\n<p>Short answer, yes! We\u2019re very excited and humble to be able to explain our serverless solution, but there are some additional pre-requisites that must happen before. Let\u2019s describe the challenge first, and then jump into our implementation and pre-requisites.<\/p>\n<h4>The Challenge<\/h4>\n<p>Amazon CloudFront, the way it is designed, doesn\u2019t allow same CNAME on multiple distributions. That is also the reason why we\u2019re removing it from the blue environment and adding it to the green environment in our previous implementation.<\/p>\n<h4>Our implementation<\/h4>\n<p>Amazon Route53 allows weighted routing of the traffic across multiple Amazon CloudFront distributions, Amazon S3 static websites and other endpoints. So, instead of load balancing requests between distributions, we are changing current A alias record that points to blue environment from simple routing to weighted routing, and add another A alias record as green environment that points directly to Amazon S3 static website endpoint. This enables us to manipulate requests across environments as we wish: 95% vs 5% (as shown in the screenshot below), then (if everything is fine) 90% vs 10%, and so on until blue is 0% and green is\u00a0100%.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*CNgsS6Ymii3uYKIqcGqOuQ.png\"><figcaption>aws route53 change-resource-record-sets --change-batch file:\/\/resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]<\/figcaption><\/figure><p>All changes are made on Amazon Route53 level, without altering Amazon CloudFront or Amazon S3 resources. And compared to previous blue-green deployment, rollback process is even faster and easier. We remove A alias record of green environment and we\u2019re done! Well, almost done... For consistency and cost saving purposes, we also revert back A alias record of blue environment from weighted routing to simple\u00a0routing.<\/p>\n<h3>Final Thoughts and Conclusion<\/h3>\n<p>What are the down sizes (pre-requisites) of the blue-green deployments v2?<\/p>\n<ol>\n<li>Amazon S3 static website hosting doesn\u2019t support SSL, so we find ourselves temporarily enforcing HTTP-only during blue-green deployment<\/li>\n<li>Amazon S3 static endpoint can be used with Amazon Route53 A alias only if the bucket name is the same with the domain name (e.g. <a href=\"http:\/\/www.adtechmedia.io)\/\">www.adtechmedia.io)<\/a>\n<\/li>\n<li>Depends on the traffic size, specifically how much TPS you\u2019re consuming, Amazon S3 might start throttling you (more details here: <a href=\"https:\/\/docs.aws.amazon.com\/AmazonS3\/latest\/dev\/request-rate-perf-considerations.html\">Request Rate and Performance Considerations<\/a>)<\/li>\n<\/ol>\n<p>Unfortunately, there is no silver bullet that would work perfectly for any serverless powered applications on AWS. As with any software, it\u2019s up to us (developers or devops engineers) to decide the right process that fits specific use case. We just wanted to share two different approaches that empowered us to provide high quality at scale without compromising on resources and costs (which, by the way, are ridiculously low, but that\u2019s another blogpost).<\/p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>Proud to announce that #AWSLambda team decided to feature <a href=\"http:\/\/twitter.com\/MitocGroup\" target=\"_blank\" title=\"Twitter profile for @MitocGroup\">@MitocGroup<\/a> as framework partners. Thank you, <a href=\"http:\/\/twitter.com\/awscloud\" target=\"_blank\" title=\"Twitter profile for @awscloud\">@awscloud<\/a> ! <a rel=\"nofollow\" href=\"https:\/\/t.co\/VzGkMefIZD\">https:\/\/t.co\/VzGkMefIZD<\/a><\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/mitocgroup\/status\/699731557846802432\">@mitocgroup<\/a><\/p>\n<\/blockquote>\n<p>Last, but not the least, <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group<\/a> is a technology company that focuses on innovative enterprise solutions. Share your thoughts and your experience on <a href=\"https:\/\/linkedin.com\/company\/mitoc-group\">LinkedIn<\/a>, <a href=\"https:\/\/twitter.com\/mitocgroup\">Twitter<\/a> or <a href=\"https:\/\/facebook.com\/mitocgroup\">Facebook<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=22a08447aa72\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/blue-green-deployments-for-serverless-powered-applications-on-aws-22a08447aa72\">Blue-Green Deployments for Serverless Powered Applications on AWS<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["aws", "continuous-deployment", "serverless", "devops", "microservices"] }, { "title": "StackWorld ScaleUp Award Winner Stories", "pubDate": "2016-06-12 01:42:44", "link": "https:\/\/blog.mitocgroup.com\/scaleup-award-winner-stories-a913277d7de3?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/a913277d7de3", "author": "Mitoc Group", "thumbnail": "", "description": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*Tj6d8u-ZQuPf0fMGnhZ_LA.png\"><figcaption><a href=\"http:\/\/www.stackworld.com\/awards\/scaleup-winner-stories\/\">http:\/\/www.stackworld.com\/awards\/scaleup-winner-stories<\/a><\/figcaption><\/figure><p><a href=\"http:\/\/www.stackworld.com\/\">StackWorld<\/a> is San Francisco\u2019s Largest DevOps + Scalability Technology Conference where 1,200+ tech companies scale their technology stack from Clouds to DevOps Tools to Back-End Coding Languages. The goal of StackWorld is to connect the community and educate practitioners on scaling their applications and technology stacks. \u201cDevOps\u201d has emerged as an intersection between Developers and IT\u200a\u2014\u200awhere specialized DevOps professionals and DevOps technologies allow applications to scale and get delivered at faster\u00a0speeds.<\/p>\n<p>Mitoc Group is humble and proud to be nominated among companies like New Relic or Sumo Logic, and voted for <a href=\"http:\/\/www.stackworld.com\/awards\/scaleup-winner-stories\">Top 25 ScaleUp Award<\/a>. On behalf of our customers and our partners, as well as the entire team who works on <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>, <a href=\"https:\/\/www.npmjs.com\/packages\/deepify\">DEEP CLI<\/a> and <a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a>, we would like to thank everybody who believes in our capabilities and recognize our achievements.<\/p>\n<p>Looking forward to StackWorld 2016 and please join our session \u201c<strong>Building Scalable Web Applications using Microservices Architecture and Serverless Computing from AWS<\/strong>\u201d on Tuesday, June 28th at\u00a010am.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a913277d7de3\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/scaleup-award-winner-stories-a913277d7de3\">StackWorld ScaleUp Award Winner Stories<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*Tj6d8u-ZQuPf0fMGnhZ_LA.png\"><figcaption><a href=\"http:\/\/www.stackworld.com\/awards\/scaleup-winner-stories\/\">http:\/\/www.stackworld.com\/awards\/scaleup-winner-stories<\/a><\/figcaption><\/figure><p><a href=\"http:\/\/www.stackworld.com\/\">StackWorld<\/a> is San Francisco\u2019s Largest DevOps + Scalability Technology Conference where 1,200+ tech companies scale their technology stack from Clouds to DevOps Tools to Back-End Coding Languages. The goal of StackWorld is to connect the community and educate practitioners on scaling their applications and technology stacks. \u201cDevOps\u201d has emerged as an intersection between Developers and IT\u200a\u2014\u200awhere specialized DevOps professionals and DevOps technologies allow applications to scale and get delivered at faster\u00a0speeds.<\/p>\n<p>Mitoc Group is humble and proud to be nominated among companies like New Relic or Sumo Logic, and voted for <a href=\"http:\/\/www.stackworld.com\/awards\/scaleup-winner-stories\">Top 25 ScaleUp Award<\/a>. On behalf of our customers and our partners, as well as the entire team who works on <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>, <a href=\"https:\/\/www.npmjs.com\/packages\/deepify\">DEEP CLI<\/a> and <a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a>, we would like to thank everybody who believes in our capabilities and recognize our achievements.<\/p>\n<p>Looking forward to StackWorld 2016 and please join our session \u201c<strong>Building Scalable Web Applications using Microservices Architecture and Serverless Computing from AWS<\/strong>\u201d on Tuesday, June 28th at\u00a010am.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a913277d7de3\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/scaleup-award-winner-stories-a913277d7de3\">StackWorld ScaleUp Award Winner Stories<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["devops", "microservices", "web-development", "serverless", "digital-transformation"] }, { "title": "Are you ready for StackWorld 2016?", "pubDate": "2016-04-17 22:49:54", "link": "https:\/\/blog.mitocgroup.com\/are-you-ready-for-stackworld-2016-e01734f95a93?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/e01734f95a93", "author": "Mitoc Group", "thumbnail": "", "description": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*8vOxhAaeg5D9iRoft6Mk6g.png\"><figcaption>Speakers from amazing companies like Mitoc Group, SolarCity, Puppet Labs and Red\u00a0Hat<\/figcaption><\/figure><p>We are excited to announce that we\u2019ll be presenting <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">Digital Enterprise End-to-end Platform<\/a> at <a href=\"http:\/\/www.stackworld.com\/\">StackWorld Conference 2016<\/a>. The session is listed in the track <em>Choosing a Cloud<\/em>, section <em>Amazon Cloud and Ecosystem<\/em> and is called <em>Building Scalable Web Applications using Microservices Architecture and Serverless Computing from\u00a0AWS<\/em>.<\/p>\n<p>Quoting conference\u2019s website:<\/p>\n<blockquote>Join 1,200+ Technology Executives, DevOps Engineers, and Developers June 27\u201328 in San Francisco for the StackWorld 2016 Conference &amp;\u00a0Expo.<\/blockquote>\n<blockquote>Choosing your technology stack is one of the most important decisions your company will make. StackWorld is San Francisco\u2019s largest technology conference 100% focused on helping you choose your technology stack.<\/blockquote>\n<p>In our humble opinion, scalable applications are by nature resource intensive, expensive to build and difficult to manage. What if we can change this perception and help developers design full-stack applications that are low cost and low maintenance? This session will describe the underlying architecture behind <a href=\"http:\/\/www.deep.mg,\/\">www.deep.mg,<\/a> the microservices marketplace built by Mitoc Group using AngularJS, NodeJS and powered by abstracted services like AWS Lambda, Amazon CloudFront, Amazon DynamoDB, and so on. Eugene Istrati, Technology Partner at Mitoc Group, will dive deep into our approach to microservices architecture using serverless environments from AWS and demonstrate how anyone can use serverless computing to achieve high scalability, high availability, and high performance without huge efforts or expensive resources allocation.<\/p>\n<p>Eugene Istrati has spent over 15 years as a technologist in a variety of industries, including digital media, cloud computing, and reputation marketing. Before joining Mitoc Group as Technology Partner, Eugene worked as Director of Engineering at Hearst Corporation and Program Manager at Amazon Web Services. He holds a dual Bachelor of Science degree in Mathematics and Computer Science and a Master of Science degree in Computer Science and Engineering.<\/p>\n<p>So, are you ready for StackWorld 2016? We hope to see you\u00a0there!<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e01734f95a93\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/are-you-ready-for-stackworld-2016-e01734f95a93\">Are you ready for StackWorld 2016?<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*8vOxhAaeg5D9iRoft6Mk6g.png\"><figcaption>Speakers from amazing companies like Mitoc Group, SolarCity, Puppet Labs and Red\u00a0Hat<\/figcaption><\/figure><p>We are excited to announce that we\u2019ll be presenting <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">Digital Enterprise End-to-end Platform<\/a> at <a href=\"http:\/\/www.stackworld.com\/\">StackWorld Conference 2016<\/a>. The session is listed in the track <em>Choosing a Cloud<\/em>, section <em>Amazon Cloud and Ecosystem<\/em> and is called <em>Building Scalable Web Applications using Microservices Architecture and Serverless Computing from\u00a0AWS<\/em>.<\/p>\n<p>Quoting conference\u2019s website:<\/p>\n<blockquote>Join 1,200+ Technology Executives, DevOps Engineers, and Developers June 27\u201328 in San Francisco for the StackWorld 2016 Conference &amp;\u00a0Expo.<\/blockquote>\n<blockquote>Choosing your technology stack is one of the most important decisions your company will make. StackWorld is San Francisco\u2019s largest technology conference 100% focused on helping you choose your technology stack.<\/blockquote>\n<p>In our humble opinion, scalable applications are by nature resource intensive, expensive to build and difficult to manage. What if we can change this perception and help developers design full-stack applications that are low cost and low maintenance? This session will describe the underlying architecture behind <a href=\"http:\/\/www.deep.mg,\/\">www.deep.mg,<\/a> the microservices marketplace built by Mitoc Group using AngularJS, NodeJS and powered by abstracted services like AWS Lambda, Amazon CloudFront, Amazon DynamoDB, and so on. Eugene Istrati, Technology Partner at Mitoc Group, will dive deep into our approach to microservices architecture using serverless environments from AWS and demonstrate how anyone can use serverless computing to achieve high scalability, high availability, and high performance without huge efforts or expensive resources allocation.<\/p>\n<p>Eugene Istrati has spent over 15 years as a technologist in a variety of industries, including digital media, cloud computing, and reputation marketing. Before joining Mitoc Group as Technology Partner, Eugene worked as Director of Engineering at Hearst Corporation and Program Manager at Amazon Web Services. He holds a dual Bachelor of Science degree in Mathematics and Computer Science and a Master of Science degree in Computer Science and Engineering.<\/p>\n<p>So, are you ready for StackWorld 2016? We hope to see you\u00a0there!<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e01734f95a93\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/are-you-ready-for-stackworld-2016-e01734f95a93\">Are you ready for StackWorld 2016?<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["serverless", "web-development", "full-stack"] }, { "title": "Building Enterprise Level Web Applications on AWS Lambda with the DEEP Framework", "pubDate": "2016-04-13 22:56:57", "link": "https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/dd81719b0dff", "author": "Mitoc Group", "thumbnail": "", "description": "\n<p><em>Original article was published at <\/em><a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/building-enterprise-level-web-applications-on-aws-lambda-with-deep\/\"><em>https:\/\/aws.amazon.com\/blogs\/compute\/building-enterprise-level-web-applications-on-aws-lambda-with-deep\/<\/em><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*y3an2NWe_nE2rHUPwqcEFg.png\"><\/figure><h4>Overview<\/h4>\n<p>Since the beginning, <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group<\/a> has been building web applications for enterprise customers. We are a small group of developers who are helping customers with their entire web development process, from conception through execution and down to maintenance. Being in the business of doing everything is very hard, and it would be impossible without using AWS foundational services, but we incrementally needed more. That is why we became earlier adopters of serverless approach and developed an ecosystem called <a href=\"https:\/\/www.mitocgroup.com\/partners\/aws-lambda\/index.html\">Digital Enterprise End-to-end Platform<\/a> (shortly DEEP) with AWS Lambda at\u00a0core.<\/p>\n<p>In this post, we will dive deeper into how DEEP is leveraging AWS Lambda to empower developers build cloud-native applications or platforms using microservices architecture. We will walk through the thinking process of identifying the front-end, the back-end and the data tiers required to build web applications with AWS Lambda at core. We will focus on the structure of AWS Lambda functions we use, as well as security, performance and benchmarking steps that we take to build enterprise-level web applications.<\/p>\n<h4>Enterprise-level Web Applications<\/h4>\n<p>Our approach to web development is full-stack and user-driven, focused on UI (aka User Interaction) and UX (aka User eXperience). But before going into the details, we\u2019d like to emphasize the strategical (biased and opinionated) decisions we have made\u00a0early:<\/p>\n<ul>\n<li>We don\u2019t say \u201cno\u201d to customers; Every problem is seriously evaluated and sometimes we offer options that involve our direct competitors<\/li>\n<li>We are developers and we focus only on the application level; Everything else (platform level and infrastructure level) must be managed by\u00a0AWS<\/li>\n<li>We focus our 20% of effort to solve 80% of work load; Everything must be automated and pushed on the services side rather than ours (clients)<\/li>\n<\/ul>\n<p>To be honest and fair, it doesn\u2019t work all the time as expected, but it does help us to learn fast and move quickly, sustainably and incrementally solving business problems through technical solutions that really matters. But the definition of \u201creally matters\u201d is different from customer to customer, quite unique in some cases. Nevertheless, what we learn from our customers is that enterprise-level web applications must provide the following 7 common expectations:<\/p>\n<ol>\n<li>Be secure\u200a\u2014\u200asecurity through obscurity (e.g. <a href=\"https:\/\/aws.amazon.com\/iam\/\">Amazon IAM<\/a>, <a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon Cognito<\/a>);<\/li>\n<li>Be compliant\u200a\u2014\u200agovernance-focused, audit-friendly service features with <a href=\"https:\/\/aws.amazon.com\/compliance\/\">applicable compliance or audit standards<\/a>;<\/li>\n<li>Be reliable\u200a\u2014\u200aService Level Agreements (e.g. <a href=\"https:\/\/aws.amazon.com\/s3\/sla\/\">Amazon S3<\/a>, <a href=\"https:\/\/aws.amazon.com\/cloudfront\/sla\/\">Amazon CloudFront<\/a>);<\/li>\n<li>Be performant\u200a\u2014\u200astudies show that <a href=\"https:\/\/medium.com\/@puppybits\/letting-people-in-the-door-how-and-why-to-get-page-loads-under-2-seconds-340c487bd81d\">page loads longer than 2s start impacting the users behavior<\/a>;<\/li>\n<li>Be pluggable\u200a\u2014\u200a<a href=\"https:\/\/www.gartner.com\/doc\/371379\/best-practices-key-successful-application\">successful enterprise ecosystem<\/a> is mainly driven by fully integrated web applications inside organizations;<\/li>\n<li>Be cost-efficient\u200a\u2014\u200abenefit of <a href=\"https:\/\/aws.amazon.com\/free\/\">AWS Free Tier<\/a>, as well as <a href=\"https:\/\/aws.amazon.com\/pricing\/\">pay only for services that you use and when you use\u00a0them<\/a>;<\/li>\n<li>Be scalable\u200a\u2014\u200aserverless approach relies on abstracted services that are pre-scaled to AWS size, <a href=\"http:\/\/www.techrepublic.com\/article\/aws-now-10x-the-size-of-its-competitors-is-the-cloud-arms-race-over\/\">whatever that would\u00a0be<\/a>.<\/li>\n<\/ol>\n<h4>Architecture<\/h4>\n<p>This article will describe how we have transformed a self-managed task management application (aka todo app) in minutes. The original version can be seen on <a href=\"http:\/\/www.todomvc.com,\/\">www.todomvc.com<\/a> and the original code can be downloaded from <a href=\"https:\/\/github.com\/tastejs\/todomvc\/tree\/master\/examples\/angularjs\">https:\/\/github.com\/tastejs\/todomvc\/tree\/master\/examples\/angularjs<\/a>.<\/p>\n<p>The architecture of every web application we build or transform, including the one described above, is similar to the reference architecture of the realtime voting application published recently by AWS on\u00a0Github:<\/p>\n<p><a href=\"https:\/\/github.com\/awslabs\/lambda-refarch-webapp\">awslabs\/lambda-refarch-webapp<\/a><\/p>\n<p>The todo app is written in AngularJS and deployed on Amazon S3, behind Amazon CloudFront (the front-end tier). The tasks management is processed by AWS Lambda, optionally behind Amazon API Gateway (the back-end tier). The tasks metadata is stored in Amazon DynamoDB (the data tier). The transformed todo app, along with instructions on how to install and deploy this web application, is described in <a href=\"https:\/\/blog.mitocgroup.com\/building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework-e04c912d08f0\">this blog post<\/a> and the code is available on\u00a0Github:<\/p>\n<p><a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">MitocGroup\/deep-microservices-todo-app<\/a><\/p>\n<p>In this article, we will focus on AWS Lambda functions and the value proposition it offers to us and our customers.<\/p>\n<h4>AWS Lambda Functions<\/h4>\n<p>Let\u2019s get into the details of the thinking process and the AWS Lambda functions that we have written for this web app. The goal of the todo app is to manage tasks in a self-service mode. End users can view tasks, create new tasks, mark or unmark a task as done, and clear completed tasks. From UI and UX point of view, that leads us to 4 user interactions that will require 4 different back-end\u00a0calls:<\/p>\n<ol>\n<li>web service that retrieves task(s)<\/li>\n<li>web service that creates\u00a0task(s)<\/li>\n<li>web service that deletes\u00a0task(s)<\/li>\n<li>web service that updates\u00a0task(s)<\/li>\n<\/ol>\n<p>Simple reorder of the above identified back-end calls leads us to basic CRUD (Create, Retrieve, Update, Delete) operations on the Task data object. And these are the simple logical steps that we take to identify the front-end, the back-end and the data tiers of (drums beating, trumpets playing) our approach to microservices, which we prefer to call microapplications.<\/p>\n<p>Therefore, coming back to AWS Lambda, we have written 4 small node.js functions that are context-bounded and self-sustained (each below microservice corresponds to the above identified back-end web service):<\/p>\n<a href=\"https:\/\/medium.com\/media\/6a93eb9123385b5ae3c5dc72fe617116\/href\">https:\/\/medium.com\/media\/6a93eb9123385b5ae3c5dc72fe617116\/href<\/a><a href=\"https:\/\/medium.com\/media\/498052c98b9843a59f3f5a585c41209a\/href\">https:\/\/medium.com\/media\/498052c98b9843a59f3f5a585c41209a\/href<\/a><a href=\"https:\/\/medium.com\/media\/2265dd062f88b2188cf3da5d75fe7367\/href\">https:\/\/medium.com\/media\/2265dd062f88b2188cf3da5d75fe7367\/href<\/a><a href=\"https:\/\/medium.com\/media\/76703e7027cbda742658d1d5eb8d5bf0\/href\">https:\/\/medium.com\/media\/76703e7027cbda742658d1d5eb8d5bf0\/href<\/a><p>Each above file with related dependencies is compressed into\u00a0.zip file and uploaded to AWS Lambda. If you\u2019re new to this process, we\u2019d strongly recommend to follow <a href=\"https:\/\/docs.aws.amazon.com\/AWSToolkitEclipse\/latest\/ug\/lambda-tutorial.html\">How to Create, Upload and Invoke an AWS Lambda function<\/a> tutorial.<\/p>\n<p>Back to our 4 small node.js functions, you can see that we have adopted ES6 (aka <a href=\"https:\/\/babeljs.io\/docs\/learn-es2015\">ES2015<\/a>) as our coding standard. And we are importing <em>deep-framework<\/em> in every function. What is this framework anyway and why we\u2019re using it everywhere?<\/p>\n<h4>Full-stack Web Framework<\/h4>\n<p>Let us step back. Building and uploading AWS Lambda functions to the service is very simple and straight-forward, but now imagine you need to manage <a href=\"http:\/\/highscalability.com\/blog\/2007\/9\/18\/amazon-architecture.html\">100\u2013150 web services to access a web page<\/a>, multiplied by hundreds or thousands of web\u00a0pages.<\/p>\n<p>We believe that the only way to achieve this kind of flexibility and scale is automation and code reuse. These principles led us to build and open source <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>\u200a\u2014\u200aa full-stack web framework that abstracts web services and web applications from specific cloud services\u200a\u2014\u200aand DEEP CLI (aka <em>deepify)<\/em>\u200a\u2014\u200adevelopment tool-chain that abstracts package management and associated development operations.<\/p>\n<p>Therefore, to make sure that the process of managing AWS Lambda functions is streamlined and automated, we have adopted a consistent approach to include 2 more files in each uploaded\u00a0.zip:<\/p>\n<a href=\"https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href\">https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href<\/a><a href=\"https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href\">https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href<\/a><p>Having these 3 files (Handler.es6, bootstrap.es6 and package.json) in each AWS Lambda function doesn\u2019t mean your final\u00a0.zip file will be that small. Actually, a lot of additional operations happen before the\u00a0.zip file is created. To name\u00a0few:<\/p>\n<ul>\n<li>AWS Lambda performs better when the uploaded codebase is smaller. Since we provide both local development capabilities and one-step push to production, our process optimizes resources before deploying to\u00a0AWS.<\/li>\n<li>ES6 is not supported by node.js v0.10.x that currently runs in AWS Lambda. We compile\u00a0.es6 files into ES5 compliant\u00a0.js files using\u00a0babel.<\/li>\n<li>Dependencies that are defined in package.json are automatically pulled and fine tuned for node.js v0.10.x to provide best performance possible.<\/li>\n<\/ul>\n<h4>Putting Everything Together<\/h4>\n<p>First, you will need the following pre-requisites:<\/p>\n<ol>\n<li>AWS Account (learn how to <a href=\"https:\/\/www.youtube.com\/watch?v=WviHsoz8yHk\">Create an Amazon Web Services\u00a0Account<\/a>)<\/li>\n<li>AWS CLI (learn how to <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-chap-getting-started.html\">Configure AWS Command Line Interface<\/a>)<\/li>\n<li>Git v2+ (learn how to <a href=\"https:\/\/git-scm.com\/book\/en\/v2\/Getting-Started-Installing-Git\">Get Started\u200a\u2014\u200aInstalling Git<\/a>)<\/li>\n<li>Java \/ JRE v6+ (learn how to <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/install\/install_overview.html\">JDK 8 and JRE 8 Installation Start\u00a0Here<\/a>)<\/li>\n<li>Node.js v4+ (learn how to <a href=\"https:\/\/github.com\/creationix\/nvm#install-script\">Install nvm<\/a> and <a href=\"https:\/\/github.com\/creationix\/nvm#usage\">Use latest node\u00a0v4<\/a>)<\/li>\n<li>DEEP CLI (execute in command line: <em>npm install deepify\u00a0-g<\/em>)<\/li>\n<\/ol>\n<p><em>Note: Don\u2019t use \u201csudo\u201d in step 5. Otherwise you\u2019ll have to f<\/em><a href=\"https:\/\/docs.npmjs.com\/getting-started\/fixing-npm-permissions\"><em>ix npm permissions<\/em><\/a><em>.<\/em><\/p>\n<p>Next, you will deploy the todo app using\u00a0<em>deepify<\/em>:<\/p>\n<ol>\n<li><em>deepify install github:\/\/MitocGroup\/deep-microservices-todomvc ~\/deep-microservices-todomvc<\/em><\/li>\n<li><em>deepify server ~\/deep-microservices-todomvc<\/em><\/li>\n<li><em>deepify deploy ~\/deep-microservices-todomvc<\/em><\/li>\n<\/ol>\n<p><em>Note: When step 2 (deepify server) is finished, you can open in your browser <\/em><a href=\"http:\/\/localhost:8000\/\"><em>http:\/\/localhost:8000<\/em><\/a><em> and enjoy the todo app running\u00a0locally.<\/em><\/p>\n<a href=\"https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href\">https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href<\/a><h4>Cleaning Up<\/h4>\n<p>There are at least half a dozen services and several dozen of resources created during <em>deepify deploy<\/em>. If only there was a simple command that would clean up everything when we\u2019re done. We thought of that and created <em>deepify undeploy<\/em> to address this need. When you are done using todo app and want to remove web app related resources, simply execute step\u00a04:<\/p>\n<p>4. <em>deepify undeploy ~\/deep-microservices-todomvc<\/em><\/p>\n<p>As you can see, we empower developers to build hassle-free cloud-native applications or platforms using microservices architecture and serverless computing. And what about security?<\/p>\n<h4>Security<\/h4>\n<p>Well, one of the biggest value propositions on AWS is out-of-the-box <a href=\"https:\/\/aws.amazon.com\/security\/\">security<\/a> and <a href=\"https:\/\/aws.amazon.com\/compliance\/\">compliance<\/a>. The beauty of cloud-native approach is that security comes by design (in other words, it won\u2019t work otherwise). We take full advantage of shared responsibility model and enforce security in every\u00a0layer.<\/p>\n<p>Developers and applications\u2019 end users benefit of <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html\">AWS IAM best practices<\/a> through streamlined implementations of <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#grant-least-privilege\">least privilege access<\/a>, <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#delegate-using-roles\">delegated roles instead of credentials<\/a> and <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#keep-a-log\">integration with logging and monitoring services<\/a> (e.g. AWS CloudTrail, Amazon CloudWatch, Amazon Elasticsearch + Kibana). For example, developers and end users of todo app didn\u2019t need to explicitly define any security roles (it was done by <em>deepify deploy<\/em>), but they can rest assured that only their instance of todo app will be using their infrastructure &amp; platform &amp; application resources.<\/p>\n<p>Here below are 2 security roles (1 for back-end and 1 for front-end) that have been seamlessly generated and enforced in each\u00a0layer:<\/p>\n<a href=\"https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href\">https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href<\/a><a href=\"https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href\">https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href<\/a><h4>Benchmarking<\/h4>\n<p>We have been continuously benchmarking AWS Lambda for various use cases in our microapplications. After a couple of repetitive times doing similar analysis, we decided to build the benchmarking as another microapplication and reuse the ecosystem to automatically include where we needed it. The codebase is open sourced on\u00a0Github:<\/p>\n<p><a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-benchmarking\">MitocGroup\/deep-microservices-benchmarking<\/a><\/p>\n<p>Particularly, for todo app, we have performed various benchmarking analysis on AWS Lambda by tweaking different components in a specific function (e.g. function size, memory size, billable cost, etc.). Next, we would like to share results with\u00a0you:<\/p>\n<a href=\"https:\/\/medium.com\/media\/5db7ed11b7792b177d48553642ec4d99\/href\">https:\/\/medium.com\/media\/5db7ed11b7792b177d48553642ec4d99\/href<\/a><h4>Performance<\/h4>\n<p>Speaking of performance, we find AWS Lambda mature enough to power large-scale web applications. The key is to build the functions as small as possible, focusing on a simple rule of one function to achieve only one task. Over time, these functions might grow in size, therefore we always keep an eye on them and refactor \/ split into the lowest possible logical denominator (smallest task).<\/p>\n<p>Using the benchmarking tool, we ran multiple scenarios on the same function from todo\u00a0app:<\/p>\n<a href=\"https:\/\/medium.com\/media\/f32ffcf4ffb607742398039975f3a993\/href\">https:\/\/medium.com\/media\/f32ffcf4ffb607742398039975f3a993\/href<\/a><p>Based on performance data, we have learned pretty cool\u00a0stuff:<\/p>\n<ul>\n<li>The smaller the function is, the better it performs; On the other hand, if more memory is allocated, the size of the function matters less and\u00a0less<\/li>\n<li>Memory size is not directly proportional to billable costs; Developers can decide the memory size based on performance requirements combined with associated costs<\/li>\n<li>The key to better performance is continuous load, thanks to <a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/container-reuse-in-lambda\">container reuse in AWS\u00a0Lambda<\/a>\n<\/li>\n<\/ul>\n<h4>Conclusion<\/h4>\n<p>In this article, we have presented a small web application that is built with AWS Lambda at core. Together we walked through the thinking process of identifying the front-end, the back-end and the data tiers required to build the todo app. We focused on the structure of AWS Lambda functions used in this app, as well as security, performance and benchmarking steps that we use to build enterprise-level web applications. You can fork the <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todomvc\">example code repository<\/a> as a starting point for your own web applications.<\/p>\n<p>If you have questions or suggestions, please leave a comment\u00a0below.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=dd81719b0dff\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">Building Enterprise Level Web Applications on AWS Lambda with the DEEP Framework<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<p><em>Original article was published at <\/em><a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/building-enterprise-level-web-applications-on-aws-lambda-with-deep\/\"><em>https:\/\/aws.amazon.com\/blogs\/compute\/building-enterprise-level-web-applications-on-aws-lambda-with-deep\/<\/em><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*y3an2NWe_nE2rHUPwqcEFg.png\"><\/figure><h4>Overview<\/h4>\n<p>Since the beginning, <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group<\/a> has been building web applications for enterprise customers. We are a small group of developers who are helping customers with their entire web development process, from conception through execution and down to maintenance. Being in the business of doing everything is very hard, and it would be impossible without using AWS foundational services, but we incrementally needed more. That is why we became earlier adopters of serverless approach and developed an ecosystem called <a href=\"https:\/\/www.mitocgroup.com\/partners\/aws-lambda\/index.html\">Digital Enterprise End-to-end Platform<\/a> (shortly DEEP) with AWS Lambda at\u00a0core.<\/p>\n<p>In this post, we will dive deeper into how DEEP is leveraging AWS Lambda to empower developers build cloud-native applications or platforms using microservices architecture. We will walk through the thinking process of identifying the front-end, the back-end and the data tiers required to build web applications with AWS Lambda at core. We will focus on the structure of AWS Lambda functions we use, as well as security, performance and benchmarking steps that we take to build enterprise-level web applications.<\/p>\n<h4>Enterprise-level Web Applications<\/h4>\n<p>Our approach to web development is full-stack and user-driven, focused on UI (aka User Interaction) and UX (aka User eXperience). But before going into the details, we\u2019d like to emphasize the strategical (biased and opinionated) decisions we have made\u00a0early:<\/p>\n<ul>\n<li>We don\u2019t say \u201cno\u201d to customers; Every problem is seriously evaluated and sometimes we offer options that involve our direct competitors<\/li>\n<li>We are developers and we focus only on the application level; Everything else (platform level and infrastructure level) must be managed by\u00a0AWS<\/li>\n<li>We focus our 20% of effort to solve 80% of work load; Everything must be automated and pushed on the services side rather than ours (clients)<\/li>\n<\/ul>\n<p>To be honest and fair, it doesn\u2019t work all the time as expected, but it does help us to learn fast and move quickly, sustainably and incrementally solving business problems through technical solutions that really matters. But the definition of \u201creally matters\u201d is different from customer to customer, quite unique in some cases. Nevertheless, what we learn from our customers is that enterprise-level web applications must provide the following 7 common expectations:<\/p>\n<ol>\n<li>Be secure\u200a\u2014\u200asecurity through obscurity (e.g. <a href=\"https:\/\/aws.amazon.com\/iam\/\">Amazon IAM<\/a>, <a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon Cognito<\/a>);<\/li>\n<li>Be compliant\u200a\u2014\u200agovernance-focused, audit-friendly service features with <a href=\"https:\/\/aws.amazon.com\/compliance\/\">applicable compliance or audit standards<\/a>;<\/li>\n<li>Be reliable\u200a\u2014\u200aService Level Agreements (e.g. <a href=\"https:\/\/aws.amazon.com\/s3\/sla\/\">Amazon S3<\/a>, <a href=\"https:\/\/aws.amazon.com\/cloudfront\/sla\/\">Amazon CloudFront<\/a>);<\/li>\n<li>Be performant\u200a\u2014\u200astudies show that <a href=\"https:\/\/medium.com\/@puppybits\/letting-people-in-the-door-how-and-why-to-get-page-loads-under-2-seconds-340c487bd81d\">page loads longer than 2s start impacting the users behavior<\/a>;<\/li>\n<li>Be pluggable\u200a\u2014\u200a<a href=\"https:\/\/www.gartner.com\/doc\/371379\/best-practices-key-successful-application\">successful enterprise ecosystem<\/a> is mainly driven by fully integrated web applications inside organizations;<\/li>\n<li>Be cost-efficient\u200a\u2014\u200abenefit of <a href=\"https:\/\/aws.amazon.com\/free\/\">AWS Free Tier<\/a>, as well as <a href=\"https:\/\/aws.amazon.com\/pricing\/\">pay only for services that you use and when you use\u00a0them<\/a>;<\/li>\n<li>Be scalable\u200a\u2014\u200aserverless approach relies on abstracted services that are pre-scaled to AWS size, <a href=\"http:\/\/www.techrepublic.com\/article\/aws-now-10x-the-size-of-its-competitors-is-the-cloud-arms-race-over\/\">whatever that would\u00a0be<\/a>.<\/li>\n<\/ol>\n<h4>Architecture<\/h4>\n<p>This article will describe how we have transformed a self-managed task management application (aka todo app) in minutes. The original version can be seen on <a href=\"http:\/\/www.todomvc.com,\/\">www.todomvc.com<\/a> and the original code can be downloaded from <a href=\"https:\/\/github.com\/tastejs\/todomvc\/tree\/master\/examples\/angularjs\">https:\/\/github.com\/tastejs\/todomvc\/tree\/master\/examples\/angularjs<\/a>.<\/p>\n<p>The architecture of every web application we build or transform, including the one described above, is similar to the reference architecture of the realtime voting application published recently by AWS on\u00a0Github:<\/p>\n<p><a href=\"https:\/\/github.com\/awslabs\/lambda-refarch-webapp\">awslabs\/lambda-refarch-webapp<\/a><\/p>\n<p>The todo app is written in AngularJS and deployed on Amazon S3, behind Amazon CloudFront (the front-end tier). The tasks management is processed by AWS Lambda, optionally behind Amazon API Gateway (the back-end tier). The tasks metadata is stored in Amazon DynamoDB (the data tier). The transformed todo app, along with instructions on how to install and deploy this web application, is described in <a href=\"https:\/\/blog.mitocgroup.com\/building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework-e04c912d08f0\">this blog post<\/a> and the code is available on\u00a0Github:<\/p>\n<p><a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">MitocGroup\/deep-microservices-todo-app<\/a><\/p>\n<p>In this article, we will focus on AWS Lambda functions and the value proposition it offers to us and our customers.<\/p>\n<h4>AWS Lambda Functions<\/h4>\n<p>Let\u2019s get into the details of the thinking process and the AWS Lambda functions that we have written for this web app. The goal of the todo app is to manage tasks in a self-service mode. End users can view tasks, create new tasks, mark or unmark a task as done, and clear completed tasks. From UI and UX point of view, that leads us to 4 user interactions that will require 4 different back-end\u00a0calls:<\/p>\n<ol>\n<li>web service that retrieves task(s)<\/li>\n<li>web service that creates\u00a0task(s)<\/li>\n<li>web service that deletes\u00a0task(s)<\/li>\n<li>web service that updates\u00a0task(s)<\/li>\n<\/ol>\n<p>Simple reorder of the above identified back-end calls leads us to basic CRUD (Create, Retrieve, Update, Delete) operations on the Task data object. And these are the simple logical steps that we take to identify the front-end, the back-end and the data tiers of (drums beating, trumpets playing) our approach to microservices, which we prefer to call microapplications.<\/p>\n<p>Therefore, coming back to AWS Lambda, we have written 4 small node.js functions that are context-bounded and self-sustained (each below microservice corresponds to the above identified back-end web service):<\/p>\n<a href=\"https:\/\/medium.com\/media\/6a93eb9123385b5ae3c5dc72fe617116\/href\">https:\/\/medium.com\/media\/6a93eb9123385b5ae3c5dc72fe617116\/href<\/a><a href=\"https:\/\/medium.com\/media\/498052c98b9843a59f3f5a585c41209a\/href\">https:\/\/medium.com\/media\/498052c98b9843a59f3f5a585c41209a\/href<\/a><a href=\"https:\/\/medium.com\/media\/2265dd062f88b2188cf3da5d75fe7367\/href\">https:\/\/medium.com\/media\/2265dd062f88b2188cf3da5d75fe7367\/href<\/a><a href=\"https:\/\/medium.com\/media\/76703e7027cbda742658d1d5eb8d5bf0\/href\">https:\/\/medium.com\/media\/76703e7027cbda742658d1d5eb8d5bf0\/href<\/a><p>Each above file with related dependencies is compressed into\u00a0.zip file and uploaded to AWS Lambda. If you\u2019re new to this process, we\u2019d strongly recommend to follow <a href=\"https:\/\/docs.aws.amazon.com\/AWSToolkitEclipse\/latest\/ug\/lambda-tutorial.html\">How to Create, Upload and Invoke an AWS Lambda function<\/a> tutorial.<\/p>\n<p>Back to our 4 small node.js functions, you can see that we have adopted ES6 (aka <a href=\"https:\/\/babeljs.io\/docs\/learn-es2015\">ES2015<\/a>) as our coding standard. And we are importing <em>deep-framework<\/em> in every function. What is this framework anyway and why we\u2019re using it everywhere?<\/p>\n<h4>Full-stack Web Framework<\/h4>\n<p>Let us step back. Building and uploading AWS Lambda functions to the service is very simple and straight-forward, but now imagine you need to manage <a href=\"http:\/\/highscalability.com\/blog\/2007\/9\/18\/amazon-architecture.html\">100\u2013150 web services to access a web page<\/a>, multiplied by hundreds or thousands of web\u00a0pages.<\/p>\n<p>We believe that the only way to achieve this kind of flexibility and scale is automation and code reuse. These principles led us to build and open source <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>\u200a\u2014\u200aa full-stack web framework that abstracts web services and web applications from specific cloud services\u200a\u2014\u200aand DEEP CLI (aka <em>deepify)<\/em>\u200a\u2014\u200adevelopment tool-chain that abstracts package management and associated development operations.<\/p>\n<p>Therefore, to make sure that the process of managing AWS Lambda functions is streamlined and automated, we have adopted a consistent approach to include 2 more files in each uploaded\u00a0.zip:<\/p>\n<a href=\"https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href\">https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href<\/a><a href=\"https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href\">https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href<\/a><p>Having these 3 files (Handler.es6, bootstrap.es6 and package.json) in each AWS Lambda function doesn\u2019t mean your final\u00a0.zip file will be that small. Actually, a lot of additional operations happen before the\u00a0.zip file is created. To name\u00a0few:<\/p>\n<ul>\n<li>AWS Lambda performs better when the uploaded codebase is smaller. Since we provide both local development capabilities and one-step push to production, our process optimizes resources before deploying to\u00a0AWS.<\/li>\n<li>ES6 is not supported by node.js v0.10.x that currently runs in AWS Lambda. We compile\u00a0.es6 files into ES5 compliant\u00a0.js files using\u00a0babel.<\/li>\n<li>Dependencies that are defined in package.json are automatically pulled and fine tuned for node.js v0.10.x to provide best performance possible.<\/li>\n<\/ul>\n<h4>Putting Everything Together<\/h4>\n<p>First, you will need the following pre-requisites:<\/p>\n<ol>\n<li>AWS Account (learn how to <a href=\"https:\/\/www.youtube.com\/watch?v=WviHsoz8yHk\">Create an Amazon Web Services\u00a0Account<\/a>)<\/li>\n<li>AWS CLI (learn how to <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-chap-getting-started.html\">Configure AWS Command Line Interface<\/a>)<\/li>\n<li>Git v2+ (learn how to <a href=\"https:\/\/git-scm.com\/book\/en\/v2\/Getting-Started-Installing-Git\">Get Started\u200a\u2014\u200aInstalling Git<\/a>)<\/li>\n<li>Java \/ JRE v6+ (learn how to <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/technotes\/guides\/install\/install_overview.html\">JDK 8 and JRE 8 Installation Start\u00a0Here<\/a>)<\/li>\n<li>Node.js v4+ (learn how to <a href=\"https:\/\/github.com\/creationix\/nvm#install-script\">Install nvm<\/a> and <a href=\"https:\/\/github.com\/creationix\/nvm#usage\">Use latest node\u00a0v4<\/a>)<\/li>\n<li>DEEP CLI (execute in command line: <em>npm install deepify\u00a0-g<\/em>)<\/li>\n<\/ol>\n<p><em>Note: Don\u2019t use \u201csudo\u201d in step 5. Otherwise you\u2019ll have to f<\/em><a href=\"https:\/\/docs.npmjs.com\/getting-started\/fixing-npm-permissions\"><em>ix npm permissions<\/em><\/a><em>.<\/em><\/p>\n<p>Next, you will deploy the todo app using\u00a0<em>deepify<\/em>:<\/p>\n<ol>\n<li><em>deepify install github:\/\/MitocGroup\/deep-microservices-todomvc ~\/deep-microservices-todomvc<\/em><\/li>\n<li><em>deepify server ~\/deep-microservices-todomvc<\/em><\/li>\n<li><em>deepify deploy ~\/deep-microservices-todomvc<\/em><\/li>\n<\/ol>\n<p><em>Note: When step 2 (deepify server) is finished, you can open in your browser <\/em><a href=\"http:\/\/localhost:8000\/\"><em>http:\/\/localhost:8000<\/em><\/a><em> and enjoy the todo app running\u00a0locally.<\/em><\/p>\n<a href=\"https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href\">https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href<\/a><h4>Cleaning Up<\/h4>\n<p>There are at least half a dozen services and several dozen of resources created during <em>deepify deploy<\/em>. If only there was a simple command that would clean up everything when we\u2019re done. We thought of that and created <em>deepify undeploy<\/em> to address this need. When you are done using todo app and want to remove web app related resources, simply execute step\u00a04:<\/p>\n<p>4. <em>deepify undeploy ~\/deep-microservices-todomvc<\/em><\/p>\n<p>As you can see, we empower developers to build hassle-free cloud-native applications or platforms using microservices architecture and serverless computing. And what about security?<\/p>\n<h4>Security<\/h4>\n<p>Well, one of the biggest value propositions on AWS is out-of-the-box <a href=\"https:\/\/aws.amazon.com\/security\/\">security<\/a> and <a href=\"https:\/\/aws.amazon.com\/compliance\/\">compliance<\/a>. The beauty of cloud-native approach is that security comes by design (in other words, it won\u2019t work otherwise). We take full advantage of shared responsibility model and enforce security in every\u00a0layer.<\/p>\n<p>Developers and applications\u2019 end users benefit of <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html\">AWS IAM best practices<\/a> through streamlined implementations of <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#grant-least-privilege\">least privilege access<\/a>, <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#delegate-using-roles\">delegated roles instead of credentials<\/a> and <a href=\"https:\/\/docs.aws.amazon.com\/IAM\/latest\/UserGuide\/best-practices.html#keep-a-log\">integration with logging and monitoring services<\/a> (e.g. AWS CloudTrail, Amazon CloudWatch, Amazon Elasticsearch + Kibana). For example, developers and end users of todo app didn\u2019t need to explicitly define any security roles (it was done by <em>deepify deploy<\/em>), but they can rest assured that only their instance of todo app will be using their infrastructure &amp; platform &amp; application resources.<\/p>\n<p>Here below are 2 security roles (1 for back-end and 1 for front-end) that have been seamlessly generated and enforced in each\u00a0layer:<\/p>\n<a href=\"https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href\">https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href<\/a><a href=\"https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href\">https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href<\/a><h4>Benchmarking<\/h4>\n<p>We have been continuously benchmarking AWS Lambda for various use cases in our microapplications. After a couple of repetitive times doing similar analysis, we decided to build the benchmarking as another microapplication and reuse the ecosystem to automatically include where we needed it. The codebase is open sourced on\u00a0Github:<\/p>\n<p><a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-benchmarking\">MitocGroup\/deep-microservices-benchmarking<\/a><\/p>\n<p>Particularly, for todo app, we have performed various benchmarking analysis on AWS Lambda by tweaking different components in a specific function (e.g. function size, memory size, billable cost, etc.). Next, we would like to share results with\u00a0you:<\/p>\n<a href=\"https:\/\/medium.com\/media\/5db7ed11b7792b177d48553642ec4d99\/href\">https:\/\/medium.com\/media\/5db7ed11b7792b177d48553642ec4d99\/href<\/a><h4>Performance<\/h4>\n<p>Speaking of performance, we find AWS Lambda mature enough to power large-scale web applications. The key is to build the functions as small as possible, focusing on a simple rule of one function to achieve only one task. Over time, these functions might grow in size, therefore we always keep an eye on them and refactor \/ split into the lowest possible logical denominator (smallest task).<\/p>\n<p>Using the benchmarking tool, we ran multiple scenarios on the same function from todo\u00a0app:<\/p>\n<a href=\"https:\/\/medium.com\/media\/f32ffcf4ffb607742398039975f3a993\/href\">https:\/\/medium.com\/media\/f32ffcf4ffb607742398039975f3a993\/href<\/a><p>Based on performance data, we have learned pretty cool\u00a0stuff:<\/p>\n<ul>\n<li>The smaller the function is, the better it performs; On the other hand, if more memory is allocated, the size of the function matters less and\u00a0less<\/li>\n<li>Memory size is not directly proportional to billable costs; Developers can decide the memory size based on performance requirements combined with associated costs<\/li>\n<li>The key to better performance is continuous load, thanks to <a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/container-reuse-in-lambda\">container reuse in AWS\u00a0Lambda<\/a>\n<\/li>\n<\/ul>\n<h4>Conclusion<\/h4>\n<p>In this article, we have presented a small web application that is built with AWS Lambda at core. Together we walked through the thinking process of identifying the front-end, the back-end and the data tiers required to build the todo app. We focused on the structure of AWS Lambda functions used in this app, as well as security, performance and benchmarking steps that we use to build enterprise-level web applications. You can fork the <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todomvc\">example code repository<\/a> as a starting point for your own web applications.<\/p>\n<p>If you have questions or suggestions, please leave a comment\u00a0below.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=dd81719b0dff\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">Building Enterprise Level Web Applications on AWS Lambda with the DEEP Framework<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["serverless", "microservices", "enterprise-technology", "aws-lambda", "nodejs"] }, { "title": "Mitoc Group featured as Frameworks Partner by AWS Lambda team", "pubDate": "2016-02-25 22:50:13", "link": "https:\/\/blog.mitocgroup.com\/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/a7d3d5632cf8", "author": "Mitoc Group", "thumbnail": "", "description": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*BowOuQPH5VpHB9By1k1zOQ.png\"><figcaption><a href=\"https:\/\/aws.amazon.com\/lambda\/partners\">https:\/\/aws.amazon.com\/lambda\/partners<\/a><\/figcaption><\/figure><p>We are very humble and honored to be featured by AWS Lambda as one of their Framework Partners. On behalf of our customers, we\u2019d like to take this opportunity to thank AWS Lambda team for their continuous trust and\u00a0support.<\/p>\n<p>When we started this journey almost a year ago, our hopes and dreams were to conquer the world with simplified web development process, where developers focus 20% of their time on 80% of the overall software development and related operations. We were tired of the opposite, spending 80% of our time on 20% of results. And AWS Lambda played fundamental role in making it\u00a0happen.<\/p>\n<p>Fast-forward one year later, we still aim high and dream big. We are building scalable products in weeks that normally takes months. Our customers love the fact that speed, security and efficiency come out of the box. But most important aspect of our limited success is mainly due to powerful capabilities inside AWS\u00a0Lambda:<\/p>\n<ul>\n<li>Milliseconds deployment time<\/li>\n<li>Seconds execution time<\/li>\n<li>Performance and cost efficiency<\/li>\n<\/ul>\n<p>Last, but not the least, AWS Lambda empowered our team to create an enterprise software ecosystem called Digital Enterprise End-to-end Platform (shortly\u00a0DEEP):<\/p>\n<ol>\n<li>\n<a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>\u200a\u2014\u200aserverless web framework that abstracts web apps and web services from specific cloud services. This framework enables developers build cloud-native applications or platforms using microservices architecture in a completely serverless approach.<\/li>\n<li>\n<a href=\"https:\/\/www.npmjs.com\/package\/deepify\">DEEP CLI<\/a>\u200a\u2014\u200asoftware development tool-chain that abstracts package management and associated development operations.<\/li>\n<li>\n<a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a>\u200a\u2014\u200aSoftware-as-a-Service that empowers customers to choose functionality from listed microapplications or microservices and deploy them together as a custom web app into their own AWS accounts.<\/li>\n<\/ol>\n<p>We are very excited and looking forward to extend this relationship with AWS Lambda team. On behalf of Mitoc Group, DEEP ecosystem and our customers\u200a\u2014\u200aThank\u00a0You!<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a7d3d5632cf8\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8\">Mitoc Group featured as Frameworks Partner by AWS Lambda team<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*BowOuQPH5VpHB9By1k1zOQ.png\"><figcaption><a href=\"https:\/\/aws.amazon.com\/lambda\/partners\">https:\/\/aws.amazon.com\/lambda\/partners<\/a><\/figcaption><\/figure><p>We are very humble and honored to be featured by AWS Lambda as one of their Framework Partners. On behalf of our customers, we\u2019d like to take this opportunity to thank AWS Lambda team for their continuous trust and\u00a0support.<\/p>\n<p>When we started this journey almost a year ago, our hopes and dreams were to conquer the world with simplified web development process, where developers focus 20% of their time on 80% of the overall software development and related operations. We were tired of the opposite, spending 80% of our time on 20% of results. And AWS Lambda played fundamental role in making it\u00a0happen.<\/p>\n<p>Fast-forward one year later, we still aim high and dream big. We are building scalable products in weeks that normally takes months. Our customers love the fact that speed, security and efficiency come out of the box. But most important aspect of our limited success is mainly due to powerful capabilities inside AWS\u00a0Lambda:<\/p>\n<ul>\n<li>Milliseconds deployment time<\/li>\n<li>Seconds execution time<\/li>\n<li>Performance and cost efficiency<\/li>\n<\/ul>\n<p>Last, but not the least, AWS Lambda empowered our team to create an enterprise software ecosystem called Digital Enterprise End-to-end Platform (shortly\u00a0DEEP):<\/p>\n<ol>\n<li>\n<a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>\u200a\u2014\u200aserverless web framework that abstracts web apps and web services from specific cloud services. This framework enables developers build cloud-native applications or platforms using microservices architecture in a completely serverless approach.<\/li>\n<li>\n<a href=\"https:\/\/www.npmjs.com\/package\/deepify\">DEEP CLI<\/a>\u200a\u2014\u200asoftware development tool-chain that abstracts package management and associated development operations.<\/li>\n<li>\n<a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a>\u200a\u2014\u200aSoftware-as-a-Service that empowers customers to choose functionality from listed microapplications or microservices and deploy them together as a custom web app into their own AWS accounts.<\/li>\n<\/ol>\n<p>We are very excited and looking forward to extend this relationship with AWS Lambda team. On behalf of Mitoc Group, DEEP ecosystem and our customers\u200a\u2014\u200aThank\u00a0You!<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a7d3d5632cf8\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8\">Mitoc Group featured as Frameworks Partner by AWS Lambda team<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["lambda", "partners", "aws"] }, { "title": "Building Scalable Web Apps with AWS Lambda and Home-Grown Serverless Web Framework", "pubDate": "2016-02-12 16:31:39", "link": "https:\/\/blog.mitocgroup.com\/building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework-e04c912d08f0?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/e04c912d08f0", "author": "Mitoc Group", "thumbnail": "", "description": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/940\/1*YhGSnfHYpfA-rE5PIMoPsg.png\"><figcaption>Development of Enterprise Software @ Mitoc\u00a0Group<\/figcaption><\/figure><p>There is a growing demand for enterprise software solutions that are easy to build and quick to deploy. Cloud Computing has emerged as one of the most viable routes for enterprise software delivery and, in our experience, Amazon Web Services is leading the charge. In this article, we will describe how we combined [1] Serverless Infrastructure from AWS with [2] Microservices Architecture to build and deploy a worry-free enterprise software marketplace we\u2019re calling the <a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a>.<\/p>\n<p><em>Note: We will assume that you have general knowledge about below 2 concepts (or read suggested articles in parenthesis to learn\u00a0more)<\/em><\/p>\n<ol>\n<li>\n<em>Serverless Computing (learn more\u200a\u2014\u200a<\/em><a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/microservices-without-the-servers\/\"><em>Microservices without the\u00a0Servers<\/em><\/a><em>)<\/em>\n<\/li>\n<li>\n<em>Microservices Architecture (learn more\u200a\u2014\u200a<\/em><a href=\"http:\/\/martinfowler.com\/articles\/microservices.html\"><em>Microservices by Martin\u00a0Fowler<\/em><\/a><em>)<\/em>\n<\/li>\n<\/ol>\n<h4>The Problem<\/h4>\n<p>Enterprise software is <a href=\"http:\/\/www.mycustomer.com\/selling\/crm\/enterprise-software-sucks-says-ceo-of-enterprise-software-firm-infor\">not attractive<\/a> because traditionally it\u2019s slow, architecturally monolithic and cumbersome to operate. Enterprise IT organizations are commonly overwhelmed by the technology they maintain and there aren\u2019t enough hours in a day to address the backlog of work. That\u2019s why the process of buying typical enterprise solution that solves a given business problem must include an evaluation of how easily it can be customized for specific use case along with a thorough understanding of the ongoing costs of day-to-day operations. That\u2019s why savvy enterprise technology teams are constantly seeking software that empowers business users to be self-sufficient through self-service.<\/p>\n<h4>The Solution<\/h4>\n<p>At <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group<\/a>, we believe that the most sustainable solution to enterprise software challenges is a marketplace of small pieces of functionality. Customers, especially non-technical users, can go to the marketplace, search for the functionality that they need, drag selected components into their shopping cart and push a button that will create a custom web application in their AWS account. This is similar to Lego Store, where customers buy lego pieces to build customized solutions at their will or pick from existing pre-packaged offers.<\/p>\n<h4>Building a Sample Application<\/h4>\n<p>In this post, we leverage open source software, while maintaining compliance with enterprise requirements. The sample application is a simple task management application, aka todo app, inspired by <a href=\"http:\/\/www.todomvc.com\/\">www.todomvc.com<\/a> and accessible at <a href=\"http:\/\/todo.deep.mg\/\">todo.deep.mg<\/a>. We will walk through the codebase and show how to build and deploy it as a scalable, yet serverless, custom web application.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*VPH-z-qkTW1UiTIJigMn8g.png\"><figcaption>Serverless microservices at core of www.deep.mg<\/figcaption><\/figure><h4>Architecture<\/h4>\n<p>The architecture that we have been using for over six months now can be summarized as\u00a0follows:<\/p>\n<ul>\n<li>Security: <a href=\"https:\/\/aws.amazon.com\/iam\/\">AWS IAM<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon\u00a0Cognito<\/a>\n<\/li>\n<li>Frontend: <a href=\"https:\/\/aws.amazon.com\/s3\/\">Amazon S3<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/cloudfront\/\">Amazon CloudFront<\/a>\n<\/li>\n<li>Backend: <a href=\"https:\/\/aws.amazon.com\/lambda\/\">AWS Lambda<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/api-gateway\/\">Amazon API\u00a0Gateway<\/a>\n<\/li>\n<li>Database: <a href=\"https:\/\/aws.amazon.com\/dynamodb\/\">Amazon DynamoDB<\/a>, <a href=\"https:\/\/aws.amazon.com\/sqs\/\">Amazon SQS<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/elasticache\/\">Amazon ElastiCache<\/a>\n<\/li>\n<\/ul>\n<p>The backbone of our approach is known as serverless microservices. We use AWS Lambda as our core computing service. Security by design is enforced by AWS IAM and we cache as much as possible, in every layer, to improve the performance and reduce the costs of running the web application.<\/p>\n<p>Amazon S3 is only capable of serving static assets so we must rely on browser-based JavaScript to provide dynamic functionality. Our team selected <a href=\"https:\/\/angularjs.org\/\">AngularJS<\/a> as frontend framework, but you can use any other JavaScript framework that you\u2019re most comfortable with.<\/p>\n<p>We developed <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>\u200a\u2014\u200aa home-grown and open-source serverless web framework\u200a\u2014\u200aand supporting <a href=\"https:\/\/www.npmjs.com\/package\/deepify\">DEEP CLI\u200a<\/a>\u2014\u200athe development tool-chain\u200a\u2014\u200athat has evolved through real-world use to increase our agility\u00a0by:<\/p>\n<ul>\n<li>Streamlined local development<\/li>\n<li>Abstracted use of cloud\u00a0services<\/li>\n<li>Automated allocation of infrastructure resources<\/li>\n<li>Zero devops and out-of-the-box scalability<\/li>\n<\/ul>\n<p>So, let\u2019s get\u00a0started\u2026<\/p>\n<h4>Getting Started<\/h4>\n<p>You will need the following pre-requisites:<\/p>\n<ol>\n<li>AWS Account (learn how to <a href=\"https:\/\/www.youtube.com\/watch?v=WviHsoz8yHk\">Create an Amazon Web Services\u00a0Account<\/a>)<\/li>\n<li>AWS CLI (learn how to <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-chap-getting-started.html\">Configure AWS Command Line Interface<\/a>)<\/li>\n<li>Node.js (learn how to <a href=\"http:\/\/howtonode.org\/how-to-install-nodejs\">Install\u00a0Node.js<\/a>)<\/li>\n<li>DEEP CLI (execute in command line: <em>npm install\u00a0deepify<\/em>)<\/li>\n<\/ol>\n<p>Next, deploy the todo app using the DEEP\u00a0CLI:<\/p>\n<ol>\n<li>\n<em>deepify install <\/em><a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app.git\"><em>https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app.git<\/em><\/a><em> ~\/deep-todo-app<\/em>\n<\/li>\n<li><em>deepify server ~\/deep-todo-app<\/em><\/li>\n<li><em>deepify deploy ~\/deep-todo-app<\/em><\/li>\n<\/ol>\n<p><em>Note: When step 2 (deepify server) is finished, you can open in your browser <\/em><a href=\"http:\/\/localhost:8000\/\"><em>http:\/\/localhost:8000<\/em><\/a><em> and enjoy the todo app running\u00a0locally.<\/em><\/p>\n<p>We use a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Service-oriented_architecture\">Services Oriented Architecture<\/a>. Every frontend interaction is powered by a backend service that talks to a data tier. The web application is a collection of web components (we call them microapplications). Every web component consists of a frontend, backend, database, security, tests and docs. And every microapplication manages the entire technology stack, starting with infrastructure services, going up to platform services and concluding with application services, everything packaged as a well-structured codebase.<\/p>\n<p><em>Note: Docs and tests are very important components of every microapplication, but we decided to leave them out of scope for this\u00a0article.<\/em><\/p>\n<p>Let\u2019s dive into the details of every tier\u00a0next\u2026<\/p>\n<h4>Building Frontend<\/h4>\n<p>The structure of our frontend is concentrated into: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Frontend\/bootstrap.js\">bootstrap.js<\/a>, <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Frontend\/package.json\">package.json<\/a> and\u00a0<a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/tree\/master\/src\/DeepNgToDo\/Frontend\/js\/\">js\/<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/7ef6db568e94927ef55d3b02e482b56e\/href\">https:\/\/medium.com\/media\/7ef6db568e94927ef55d3b02e482b56e\/href<\/a><a href=\"https:\/\/medium.com\/media\/59ce2ee7b1f4b8d116b8701bee8288ef\/href\">https:\/\/medium.com\/media\/59ce2ee7b1f4b8d116b8701bee8288ef\/href<\/a><a href=\"https:\/\/medium.com\/media\/a6d39873c769c779ed14943e4e4c4171\/href\">https:\/\/medium.com\/media\/a6d39873c769c779ed14943e4e4c4171\/href<\/a><p>As was mentioned earlier in this post, this todo app was inspired by <a href=\"http:\/\/www.todomvc.com\/\">www.todomvc.com<\/a>. In practice, it means that we took <a href=\"https:\/\/github.com\/tastejs\/todomvc\/tree\/master\/examples\/angularjs\">the sample code from GitHub<\/a> and <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-helloworld\">ported using Hello World as reference<\/a>. Reusing code allows us to be both consistent and\u00a0fast.<\/p>\n<p>Microservices architecture can be challenging sometimes. We found very useful the process of building a feature or a service first, and then break it down into microservices. Using this approach on todo app helped us take the code as it was, replace <a href=\"https:\/\/angularjs.org\/\">AngularJS<\/a> and <a href=\"https:\/\/github.com\/angular-ui\/ui-router\">AngularUI Router<\/a> modules with <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-root-angularjs\">DEEP Microservices Root AngularJS<\/a>, and transform the storage service using resource library from DEEP Framework.<\/p>\n<h4>Building Backend<\/h4>\n<p>The structure of our backend is reduced to: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/resources.json\">resources.json<\/a> and\u00a0<a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/tree\/master\/src\/DeepNgToDo\/Backend\/src\/\">src\/<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/a2398079974810e1abef0a88383b2c84\/href\">https:\/\/medium.com\/media\/a2398079974810e1abef0a88383b2c84\/href<\/a><a href=\"https:\/\/medium.com\/media\/c0da5738f43fd83cef7cee6b0c2f9ed5\/href\">https:\/\/medium.com\/media\/c0da5738f43fd83cef7cee6b0c2f9ed5\/href<\/a><p>When the UI and UX were defined, building the web services to support this frontend were intuitively easy. We are using RESTful APIs that provide CRUD (aka Create-Retrieve-Update-Delete) operations for each logically independent entity. In our case the entity is the todo task, and our todo app is supposed to offer functionality to create tasks, retrieve them, update or\u00a0delete.<\/p>\n<p>Each web service we use is very small, completely independent, highly decoupled, focused on context bounded one task, communicating through language-agnostic API. This is the very definition of a microservice, which we adopted by choice and by necessity. And this is where AWS Lambda\u00a0excels!<\/p>\n<p>Next, we will describe the structure of the \u201cCreate Todo\u201d microservice that we deploy on AWS Lambda (the other microservices in this todo app are structured pretty much the same): <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/src\/Todo\/Create\/bootstrap.es6\">bootstrap.es6<\/a>, <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/src\/Todo\/Create\/package.json\">package.json<\/a> and <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/src\/Todo\/Create\/Handler.es6\">Handler.es6<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href\">https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href<\/a><a href=\"https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href\">https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href<\/a><a href=\"https:\/\/medium.com\/media\/cae137a2d3350125d0f490a29025c7c1\/href\">https:\/\/medium.com\/media\/cae137a2d3350125d0f490a29025c7c1\/href<\/a><h4>Building Database<\/h4>\n<p>The structure of our database model is trivial, just one file: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Data\/Models\/Todo.json\">Todo.json<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/e4baf60cd4213b0d666196b7a357524d\/href\">https:\/\/medium.com\/media\/e4baf60cd4213b0d666196b7a357524d\/href<\/a><p>Since we\u2019re using a NoSQL database like Amazon DynamoDB, the only piece of information that the database library from DEEP Framework cares about is the table name and the primary key. Everything else is handled by the library itself, as long as it\u2019s in json\u00a0format.<\/p>\n<h4>Enforcing Security<\/h4>\n<p>The beauty of cloud-native approach is that security comes by design. When we deploy todo app, <em>deepify<\/em> automatically identifies the web services involved in the process and creates corresponding security roles. On backend and database tiers these roles are transposed into AWS IAM roles, while on frontend tier we automatically compile them and expose in the UI as Access Control Lists (also known as ACLs). Let\u2019s see some examples:<\/p>\n<a href=\"https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href\">https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href<\/a><a href=\"https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href\">https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href<\/a><h4>Putting Everything Together<\/h4>\n<p>Now that we\u2019re done with frontend, backend, database and security, it\u2019s time to glue everything together and put all web components into\u00a0action:<\/p>\n<a href=\"https:\/\/medium.com\/media\/18363867fa2132849cbd705a78bf99c1\/href\">https:\/\/medium.com\/media\/18363867fa2132849cbd705a78bf99c1\/href<\/a><p>There are two more components in the root path of the microapplication that are critical: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/deepkg.json\">deepkg.json<\/a> and <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/parameters.json\">parameters.json<\/a>. Similar to Node Package Manager (also know as <em>npm<\/em>), our command line tool DEEP CLI (also known as <em>deepify)<\/em> is looking for metadata (in this case\u200a\u2014\u200adeepkg.json) and configuration (in this case\u200a\u2014\u200aparameters.json) files. Additionally, <em>deepify<\/em> can be enriched with hooks (in this case\u200a\u2014\u200ahook.init.js) that allow flexibility and customization of the deployment process:<\/p>\n<a href=\"https:\/\/medium.com\/media\/98f80b1bbae49f86f3bdec40df41117f\/href\">https:\/\/medium.com\/media\/98f80b1bbae49f86f3bdec40df41117f\/href<\/a><a href=\"https:\/\/medium.com\/media\/bbf81fe20fc53c34b4897a278671d4a4\/href\">https:\/\/medium.com\/media\/bbf81fe20fc53c34b4897a278671d4a4\/href<\/a><a href=\"https:\/\/medium.com\/media\/1630abf562af115b2c170acb4002e5ba\/href\">https:\/\/medium.com\/media\/1630abf562af115b2c170acb4002e5ba\/href<\/a><p>Hopefully the deployment execution that was described in <em>Getting Started<\/em> section is done by now. If everything went well, you will see 2 URLs in the last rows of the terminal\u2019s output window: S3 Website Endpoint and CloudFront Distribution. Open in the browser any of the URLs and you\u2019ll see the todo app running in your own AWS\u00a0account.<\/p>\n<p><em>Note: The distribution takes up to 20 minutes to provision, therefore don\u2019t worry if it returns an HTTP error in the first couple of\u00a0minutes.<\/em><\/p>\n<p>Below video playlist summarizes the steps that we\u2019ve walked you\u00a0through:<\/p>\n<a href=\"https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href\">https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href<\/a><h4>Scalability Benchmarking<\/h4>\n<p>Even though SPAs (aka Single-Page Applications) are <a href=\"http:\/\/www.soasta.com\/blog\/angularjs-real-user-monitoring-single-page-applications\">challenging to monitor and benchmark<\/a>, we have load tested the todo app in order to associate some numbers to how big it can scale using out-of-the-box configurations. We found that standard setup gives us acceptable response time (within 2 seconds) for up to 10,000 concurrent users per second, at \u201cmy Starbucks coffee costs more\u201d price\u00a0tag:<\/p>\n<a href=\"https:\/\/medium.com\/media\/dc1311abb91378b6eccb1fc851159629\/href\">https:\/\/medium.com\/media\/dc1311abb91378b6eccb1fc851159629\/href<\/a><p><em>Note: These numbers can be improved with additional complexity and features that are beyond the scope of this\u00a0article<\/em><\/p>\n<h4>Key Takeaways<\/h4>\n<ol>\n<li>The sample web application described in this article is a simple example of how we are building and deploying enterprise software using serverless microservices on\u00a0AWS<\/li>\n<li>\n<a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">DEEP Todo App<\/a> is powered by DEEP Framework. It consists of 1 microapplication that interacts with 6 microservices and is resolving another microapplication as dependency<\/li>\n<li>\n<a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a> is powered by DEEP Framework. It consists of 12 microapplications that interacts with 64 microservices and is resolving several layers of dependencies across multiple microapplications<\/li>\n<li>\n<a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a> is a serverless web framework that abstracts web apps and web services from specific cloud services, enabling developers build cloud-native applications or platforms using microservices architecture<\/li>\n<li>Backend\u2019s resources are implemented in Node.js. AWS Lambda supports also Java and Python, but our process is not able yet to use them streamlined because <em>deepify<\/em> uses only <em>npm<\/em>, and doesn\u2019t support <em>mvn<\/em> or <em>pip<\/em>\u00a0yet<\/li>\n<li>Frontend\u2019s structure is designed to allow developers write code using any JavaScript framework they are comfortable with. More than that, it is possible to have multiple implementations of the same UI and UX using different Javascript frameworks and storing in the same codebase. For\u00a0example:<\/li>\n<\/ol>\n<ul>\n<li><em>js\/app\/angular\u200a\u2014\u200aimplementation of todo app using AngularJS<\/em><\/li>\n<li><em>js\/app\/react\u200a\u2014\u200aimplementation of todo app using\u00a0React<\/em><\/li>\n<li><em>js\/app\/backbone\u200a\u2014\u200aimplementation of todo app using Backbone.js<\/em><\/li>\n<\/ul>\n<h4>Closing Thoughts<\/h4>\n<p>In this post, we\u2019ve shown you how to build and deploy scalable web apps worry-free. We walked through the process of building and deploying frontend, backend, database and security of scalable web applications. You can fork the <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">sample code repository<\/a> as a starting point for your own custom web application powered by serverless microservices.<\/p>\n<p>And if you have questions or suggestions, please leave a comment\u00a0below.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e04c912d08f0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework-e04c912d08f0\">Building Scalable Web Apps with AWS Lambda and Home-Grown Serverless Web Framework<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/940\/1*YhGSnfHYpfA-rE5PIMoPsg.png\"><figcaption>Development of Enterprise Software @ Mitoc\u00a0Group<\/figcaption><\/figure><p>There is a growing demand for enterprise software solutions that are easy to build and quick to deploy. Cloud Computing has emerged as one of the most viable routes for enterprise software delivery and, in our experience, Amazon Web Services is leading the charge. In this article, we will describe how we combined [1] Serverless Infrastructure from AWS with [2] Microservices Architecture to build and deploy a worry-free enterprise software marketplace we\u2019re calling the <a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a>.<\/p>\n<p><em>Note: We will assume that you have general knowledge about below 2 concepts (or read suggested articles in parenthesis to learn\u00a0more)<\/em><\/p>\n<ol>\n<li>\n<em>Serverless Computing (learn more\u200a\u2014\u200a<\/em><a href=\"https:\/\/aws.amazon.com\/blogs\/compute\/microservices-without-the-servers\/\"><em>Microservices without the\u00a0Servers<\/em><\/a><em>)<\/em>\n<\/li>\n<li>\n<em>Microservices Architecture (learn more\u200a\u2014\u200a<\/em><a href=\"http:\/\/martinfowler.com\/articles\/microservices.html\"><em>Microservices by Martin\u00a0Fowler<\/em><\/a><em>)<\/em>\n<\/li>\n<\/ol>\n<h4>The Problem<\/h4>\n<p>Enterprise software is <a href=\"http:\/\/www.mycustomer.com\/selling\/crm\/enterprise-software-sucks-says-ceo-of-enterprise-software-firm-infor\">not attractive<\/a> because traditionally it\u2019s slow, architecturally monolithic and cumbersome to operate. Enterprise IT organizations are commonly overwhelmed by the technology they maintain and there aren\u2019t enough hours in a day to address the backlog of work. That\u2019s why the process of buying typical enterprise solution that solves a given business problem must include an evaluation of how easily it can be customized for specific use case along with a thorough understanding of the ongoing costs of day-to-day operations. That\u2019s why savvy enterprise technology teams are constantly seeking software that empowers business users to be self-sufficient through self-service.<\/p>\n<h4>The Solution<\/h4>\n<p>At <a href=\"https:\/\/www.mitocgroup.com\/\">Mitoc Group<\/a>, we believe that the most sustainable solution to enterprise software challenges is a marketplace of small pieces of functionality. Customers, especially non-technical users, can go to the marketplace, search for the functionality that they need, drag selected components into their shopping cart and push a button that will create a custom web application in their AWS account. This is similar to Lego Store, where customers buy lego pieces to build customized solutions at their will or pick from existing pre-packaged offers.<\/p>\n<h4>Building a Sample Application<\/h4>\n<p>In this post, we leverage open source software, while maintaining compliance with enterprise requirements. The sample application is a simple task management application, aka todo app, inspired by <a href=\"http:\/\/www.todomvc.com\/\">www.todomvc.com<\/a> and accessible at <a href=\"http:\/\/todo.deep.mg\/\">todo.deep.mg<\/a>. We will walk through the codebase and show how to build and deploy it as a scalable, yet serverless, custom web application.<\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*VPH-z-qkTW1UiTIJigMn8g.png\"><figcaption>Serverless microservices at core of www.deep.mg<\/figcaption><\/figure><h4>Architecture<\/h4>\n<p>The architecture that we have been using for over six months now can be summarized as\u00a0follows:<\/p>\n<ul>\n<li>Security: <a href=\"https:\/\/aws.amazon.com\/iam\/\">AWS IAM<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/cognito\/\">Amazon\u00a0Cognito<\/a>\n<\/li>\n<li>Frontend: <a href=\"https:\/\/aws.amazon.com\/s3\/\">Amazon S3<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/cloudfront\/\">Amazon CloudFront<\/a>\n<\/li>\n<li>Backend: <a href=\"https:\/\/aws.amazon.com\/lambda\/\">AWS Lambda<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/api-gateway\/\">Amazon API\u00a0Gateway<\/a>\n<\/li>\n<li>Database: <a href=\"https:\/\/aws.amazon.com\/dynamodb\/\">Amazon DynamoDB<\/a>, <a href=\"https:\/\/aws.amazon.com\/sqs\/\">Amazon SQS<\/a> &amp; <a href=\"https:\/\/aws.amazon.com\/elasticache\/\">Amazon ElastiCache<\/a>\n<\/li>\n<\/ul>\n<p>The backbone of our approach is known as serverless microservices. We use AWS Lambda as our core computing service. Security by design is enforced by AWS IAM and we cache as much as possible, in every layer, to improve the performance and reduce the costs of running the web application.<\/p>\n<p>Amazon S3 is only capable of serving static assets so we must rely on browser-based JavaScript to provide dynamic functionality. Our team selected <a href=\"https:\/\/angularjs.org\/\">AngularJS<\/a> as frontend framework, but you can use any other JavaScript framework that you\u2019re most comfortable with.<\/p>\n<p>We developed <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>\u200a\u2014\u200aa home-grown and open-source serverless web framework\u200a\u2014\u200aand supporting <a href=\"https:\/\/www.npmjs.com\/package\/deepify\">DEEP CLI\u200a<\/a>\u2014\u200athe development tool-chain\u200a\u2014\u200athat has evolved through real-world use to increase our agility\u00a0by:<\/p>\n<ul>\n<li>Streamlined local development<\/li>\n<li>Abstracted use of cloud\u00a0services<\/li>\n<li>Automated allocation of infrastructure resources<\/li>\n<li>Zero devops and out-of-the-box scalability<\/li>\n<\/ul>\n<p>So, let\u2019s get\u00a0started\u2026<\/p>\n<h4>Getting Started<\/h4>\n<p>You will need the following pre-requisites:<\/p>\n<ol>\n<li>AWS Account (learn how to <a href=\"https:\/\/www.youtube.com\/watch?v=WviHsoz8yHk\">Create an Amazon Web Services\u00a0Account<\/a>)<\/li>\n<li>AWS CLI (learn how to <a href=\"https:\/\/docs.aws.amazon.com\/cli\/latest\/userguide\/cli-chap-getting-started.html\">Configure AWS Command Line Interface<\/a>)<\/li>\n<li>Node.js (learn how to <a href=\"http:\/\/howtonode.org\/how-to-install-nodejs\">Install\u00a0Node.js<\/a>)<\/li>\n<li>DEEP CLI (execute in command line: <em>npm install\u00a0deepify<\/em>)<\/li>\n<\/ol>\n<p>Next, deploy the todo app using the DEEP\u00a0CLI:<\/p>\n<ol>\n<li>\n<em>deepify install <\/em><a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app.git\"><em>https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app.git<\/em><\/a><em> ~\/deep-todo-app<\/em>\n<\/li>\n<li><em>deepify server ~\/deep-todo-app<\/em><\/li>\n<li><em>deepify deploy ~\/deep-todo-app<\/em><\/li>\n<\/ol>\n<p><em>Note: When step 2 (deepify server) is finished, you can open in your browser <\/em><a href=\"http:\/\/localhost:8000\/\"><em>http:\/\/localhost:8000<\/em><\/a><em> and enjoy the todo app running\u00a0locally.<\/em><\/p>\n<p>We use a <a href=\"https:\/\/en.wikipedia.org\/wiki\/Service-oriented_architecture\">Services Oriented Architecture<\/a>. Every frontend interaction is powered by a backend service that talks to a data tier. The web application is a collection of web components (we call them microapplications). Every web component consists of a frontend, backend, database, security, tests and docs. And every microapplication manages the entire technology stack, starting with infrastructure services, going up to platform services and concluding with application services, everything packaged as a well-structured codebase.<\/p>\n<p><em>Note: Docs and tests are very important components of every microapplication, but we decided to leave them out of scope for this\u00a0article.<\/em><\/p>\n<p>Let\u2019s dive into the details of every tier\u00a0next\u2026<\/p>\n<h4>Building Frontend<\/h4>\n<p>The structure of our frontend is concentrated into: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Frontend\/bootstrap.js\">bootstrap.js<\/a>, <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Frontend\/package.json\">package.json<\/a> and\u00a0<a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/tree\/master\/src\/DeepNgToDo\/Frontend\/js\/\">js\/<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/7ef6db568e94927ef55d3b02e482b56e\/href\">https:\/\/medium.com\/media\/7ef6db568e94927ef55d3b02e482b56e\/href<\/a><a href=\"https:\/\/medium.com\/media\/59ce2ee7b1f4b8d116b8701bee8288ef\/href\">https:\/\/medium.com\/media\/59ce2ee7b1f4b8d116b8701bee8288ef\/href<\/a><a href=\"https:\/\/medium.com\/media\/a6d39873c769c779ed14943e4e4c4171\/href\">https:\/\/medium.com\/media\/a6d39873c769c779ed14943e4e4c4171\/href<\/a><p>As was mentioned earlier in this post, this todo app was inspired by <a href=\"http:\/\/www.todomvc.com\/\">www.todomvc.com<\/a>. In practice, it means that we took <a href=\"https:\/\/github.com\/tastejs\/todomvc\/tree\/master\/examples\/angularjs\">the sample code from GitHub<\/a> and <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-helloworld\">ported using Hello World as reference<\/a>. Reusing code allows us to be both consistent and\u00a0fast.<\/p>\n<p>Microservices architecture can be challenging sometimes. We found very useful the process of building a feature or a service first, and then break it down into microservices. Using this approach on todo app helped us take the code as it was, replace <a href=\"https:\/\/angularjs.org\/\">AngularJS<\/a> and <a href=\"https:\/\/github.com\/angular-ui\/ui-router\">AngularUI Router<\/a> modules with <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-root-angularjs\">DEEP Microservices Root AngularJS<\/a>, and transform the storage service using resource library from DEEP Framework.<\/p>\n<h4>Building Backend<\/h4>\n<p>The structure of our backend is reduced to: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/resources.json\">resources.json<\/a> and\u00a0<a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/tree\/master\/src\/DeepNgToDo\/Backend\/src\/\">src\/<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/a2398079974810e1abef0a88383b2c84\/href\">https:\/\/medium.com\/media\/a2398079974810e1abef0a88383b2c84\/href<\/a><a href=\"https:\/\/medium.com\/media\/c0da5738f43fd83cef7cee6b0c2f9ed5\/href\">https:\/\/medium.com\/media\/c0da5738f43fd83cef7cee6b0c2f9ed5\/href<\/a><p>When the UI and UX were defined, building the web services to support this frontend were intuitively easy. We are using RESTful APIs that provide CRUD (aka Create-Retrieve-Update-Delete) operations for each logically independent entity. In our case the entity is the todo task, and our todo app is supposed to offer functionality to create tasks, retrieve them, update or\u00a0delete.<\/p>\n<p>Each web service we use is very small, completely independent, highly decoupled, focused on context bounded one task, communicating through language-agnostic API. This is the very definition of a microservice, which we adopted by choice and by necessity. And this is where AWS Lambda\u00a0excels!<\/p>\n<p>Next, we will describe the structure of the \u201cCreate Todo\u201d microservice that we deploy on AWS Lambda (the other microservices in this todo app are structured pretty much the same): <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/src\/Todo\/Create\/bootstrap.es6\">bootstrap.es6<\/a>, <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/src\/Todo\/Create\/package.json\">package.json<\/a> and <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Backend\/src\/Todo\/Create\/Handler.es6\">Handler.es6<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href\">https:\/\/medium.com\/media\/2c6a0b6ae47ceb5b97b60250277d9e28\/href<\/a><a href=\"https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href\">https:\/\/medium.com\/media\/d3fa53fb655562079f6b2078a52ff0f0\/href<\/a><a href=\"https:\/\/medium.com\/media\/cae137a2d3350125d0f490a29025c7c1\/href\">https:\/\/medium.com\/media\/cae137a2d3350125d0f490a29025c7c1\/href<\/a><h4>Building Database<\/h4>\n<p>The structure of our database model is trivial, just one file: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/Data\/Models\/Todo.json\">Todo.json<\/a>.<\/p>\n<a href=\"https:\/\/medium.com\/media\/e4baf60cd4213b0d666196b7a357524d\/href\">https:\/\/medium.com\/media\/e4baf60cd4213b0d666196b7a357524d\/href<\/a><p>Since we\u2019re using a NoSQL database like Amazon DynamoDB, the only piece of information that the database library from DEEP Framework cares about is the table name and the primary key. Everything else is handled by the library itself, as long as it\u2019s in json\u00a0format.<\/p>\n<h4>Enforcing Security<\/h4>\n<p>The beauty of cloud-native approach is that security comes by design. When we deploy todo app, <em>deepify<\/em> automatically identifies the web services involved in the process and creates corresponding security roles. On backend and database tiers these roles are transposed into AWS IAM roles, while on frontend tier we automatically compile them and expose in the UI as Access Control Lists (also known as ACLs). Let\u2019s see some examples:<\/p>\n<a href=\"https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href\">https:\/\/medium.com\/media\/b48f1ad72cb25e6d3b3fbbae1fdd04af\/href<\/a><a href=\"https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href\">https:\/\/medium.com\/media\/2c59ecd0b28e5def9953b31b553eabb0\/href<\/a><h4>Putting Everything Together<\/h4>\n<p>Now that we\u2019re done with frontend, backend, database and security, it\u2019s time to glue everything together and put all web components into\u00a0action:<\/p>\n<a href=\"https:\/\/medium.com\/media\/18363867fa2132849cbd705a78bf99c1\/href\">https:\/\/medium.com\/media\/18363867fa2132849cbd705a78bf99c1\/href<\/a><p>There are two more components in the root path of the microapplication that are critical: <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/deepkg.json\">deepkg.json<\/a> and <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\/blob\/master\/src\/DeepNgToDo\/parameters.json\">parameters.json<\/a>. Similar to Node Package Manager (also know as <em>npm<\/em>), our command line tool DEEP CLI (also known as <em>deepify)<\/em> is looking for metadata (in this case\u200a\u2014\u200adeepkg.json) and configuration (in this case\u200a\u2014\u200aparameters.json) files. Additionally, <em>deepify<\/em> can be enriched with hooks (in this case\u200a\u2014\u200ahook.init.js) that allow flexibility and customization of the deployment process:<\/p>\n<a href=\"https:\/\/medium.com\/media\/98f80b1bbae49f86f3bdec40df41117f\/href\">https:\/\/medium.com\/media\/98f80b1bbae49f86f3bdec40df41117f\/href<\/a><a href=\"https:\/\/medium.com\/media\/bbf81fe20fc53c34b4897a278671d4a4\/href\">https:\/\/medium.com\/media\/bbf81fe20fc53c34b4897a278671d4a4\/href<\/a><a href=\"https:\/\/medium.com\/media\/1630abf562af115b2c170acb4002e5ba\/href\">https:\/\/medium.com\/media\/1630abf562af115b2c170acb4002e5ba\/href<\/a><p>Hopefully the deployment execution that was described in <em>Getting Started<\/em> section is done by now. If everything went well, you will see 2 URLs in the last rows of the terminal\u2019s output window: S3 Website Endpoint and CloudFront Distribution. Open in the browser any of the URLs and you\u2019ll see the todo app running in your own AWS\u00a0account.<\/p>\n<p><em>Note: The distribution takes up to 20 minutes to provision, therefore don\u2019t worry if it returns an HTTP error in the first couple of\u00a0minutes.<\/em><\/p>\n<p>Below video playlist summarizes the steps that we\u2019ve walked you\u00a0through:<\/p>\n<a href=\"https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href\">https:\/\/medium.com\/media\/d62a572b275accdaccbad8a18c782daa\/href<\/a><h4>Scalability Benchmarking<\/h4>\n<p>Even though SPAs (aka Single-Page Applications) are <a href=\"http:\/\/www.soasta.com\/blog\/angularjs-real-user-monitoring-single-page-applications\">challenging to monitor and benchmark<\/a>, we have load tested the todo app in order to associate some numbers to how big it can scale using out-of-the-box configurations. We found that standard setup gives us acceptable response time (within 2 seconds) for up to 10,000 concurrent users per second, at \u201cmy Starbucks coffee costs more\u201d price\u00a0tag:<\/p>\n<a href=\"https:\/\/medium.com\/media\/dc1311abb91378b6eccb1fc851159629\/href\">https:\/\/medium.com\/media\/dc1311abb91378b6eccb1fc851159629\/href<\/a><p><em>Note: These numbers can be improved with additional complexity and features that are beyond the scope of this\u00a0article<\/em><\/p>\n<h4>Key Takeaways<\/h4>\n<ol>\n<li>The sample web application described in this article is a simple example of how we are building and deploying enterprise software using serverless microservices on\u00a0AWS<\/li>\n<li>\n<a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">DEEP Todo App<\/a> is powered by DEEP Framework. It consists of 1 microapplication that interacts with 6 microservices and is resolving another microapplication as dependency<\/li>\n<li>\n<a href=\"https:\/\/www.deep.mg\/\">DEEP Marketplace<\/a> is powered by DEEP Framework. It consists of 12 microapplications that interacts with 64 microservices and is resolving several layers of dependencies across multiple microapplications<\/li>\n<li>\n<a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a> is a serverless web framework that abstracts web apps and web services from specific cloud services, enabling developers build cloud-native applications or platforms using microservices architecture<\/li>\n<li>Backend\u2019s resources are implemented in Node.js. AWS Lambda supports also Java and Python, but our process is not able yet to use them streamlined because <em>deepify<\/em> uses only <em>npm<\/em>, and doesn\u2019t support <em>mvn<\/em> or <em>pip<\/em>\u00a0yet<\/li>\n<li>Frontend\u2019s structure is designed to allow developers write code using any JavaScript framework they are comfortable with. More than that, it is possible to have multiple implementations of the same UI and UX using different Javascript frameworks and storing in the same codebase. For\u00a0example:<\/li>\n<\/ol>\n<ul>\n<li><em>js\/app\/angular\u200a\u2014\u200aimplementation of todo app using AngularJS<\/em><\/li>\n<li><em>js\/app\/react\u200a\u2014\u200aimplementation of todo app using\u00a0React<\/em><\/li>\n<li><em>js\/app\/backbone\u200a\u2014\u200aimplementation of todo app using Backbone.js<\/em><\/li>\n<\/ul>\n<h4>Closing Thoughts<\/h4>\n<p>In this post, we\u2019ve shown you how to build and deploy scalable web apps worry-free. We walked through the process of building and deploying frontend, backend, database and security of scalable web applications. You can fork the <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">sample code repository<\/a> as a starting point for your own custom web application powered by serverless microservices.<\/p>\n<p>And if you have questions or suggestions, please leave a comment\u00a0below.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e04c912d08f0\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework-e04c912d08f0\">Building Scalable Web Apps with AWS Lambda and Home-Grown Serverless Web Framework<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["microservices", "serverless", "aws-lambda"] }, { "title": "Interview: Creators of The DEEP Framework", "pubDate": "2015-12-16 15:30:50", "link": "https:\/\/blog.mitocgroup.com\/interview-creators-of-the-deep-framework-8c2d42ecd243?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/8c2d42ecd243", "author": "Mitoc Group", "thumbnail": "", "description": "\n<h4>Learn About The DEEP Framework Right From Its\u00a0Creators<\/h4>\n<p><em>Original article was posted on <\/em><a href=\"https:\/\/serverlesscode.com\/post\/deep-framework-developer-interview\/\"><em>https:\/\/serverlesscode.com\/post\/deep-framework-developer-interview\/<\/em><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*tv13hVJcaDT7zS0mmQI2ow.png\"><\/figure><p>If you want to write web applications in AWS Lambda, there are actually quite a few options out there. There\u2019s the <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>, <a href=\"http:\/\/serverless.com\/\">Serverless<\/a> (formerly JAWS), <a href=\"https:\/\/github.com\/braahyan\/PAWS\">PAWS<\/a>, and <a href=\"https:\/\/github.com\/mweagle\/Sparta\">Sparta<\/a>. There are likely more that I\u2019m omitting\u200a\u2014\u200aholler on Twitter <a href=\"https:\/\/twitter.com\/ryan_sb\">@ryan_sb<\/a> if you know of\u00a0one.<\/p>\n<p>Today, we\u2019ll hear from the creators of the DEEP Framework about its origins, what it\u2019s great at, and how to start using it. The big driver for the Mitoc Group behind going serverless was to reduce ongoing maintenance. What better way to maintain fewer servers by not having\u00a0them?<\/p>\n<p>Not only is there the DEEP Framework itself, but there\u2019s also a \u201cmicroapp\u201d store at <a href=\"http:\/\/www.deep.mg\/\">www.deep.mg<\/a> where developers can buy and sell small pieces of functionality, like a shopping cart or recommendation engine. It\u2019s still early days for their marketplace, but in the future it could enable developers to build full applications with relatively little\u00a0code.<\/p>\n<h3>The Interview<\/h3>\n<h4>Q: Tell me a little about the DEEP framework, what problem is it\u00a0solving?<\/h4>\n<p><a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP<\/a> is a serverless web framework that abstracts web applications and web services from specific cloud providers. This framework enables developers build cloud-native applications or platforms using microservices architecture in a completely serverless approach. We aim to help enterprise software and enterprise organizations to build web applications or web services that can be used across cloud providers, enabling the customers to choose between Amazon Web Services, or Google Cloud Platform, or Microsoft Azure, or others, without having developers to rewrite the\u00a0code.<\/p>\n<h4>Q: I see that there\u2019s an app store for DEEP modules, can you give me any information about how many vendors are making things available through the app store? How many people are getting modules via the app\u00a0store?<\/h4>\n<p>The DEEP Marketplace is a public app store built on top of the DEEP Framework, that empowers customers to choose functionality from listed microservices\/microapplications and deploy them together as an web app into their own cloud provider accounts with just few clicks; as well as empowering developers to create and publish their microservices\/microapplications and monetize them in similar approach to Apple\u2019s App Store. <a href=\"http:\/\/www.deep.mg\/\">www.deep.mg<\/a> is currently in private beta, so it\u2019s still very early to talk about it. But, it\u2019s not a secret and to address your curiosity, we have 16 developers publishing microservices\/microapplications and 3 customers using them in production.<\/p>\n<h4>Q: Can you talk about the design of the DEEP framework at a high level? What are the different components?<\/h4>\n<p>DEEP Framework is a collection of JavaScript libraries that can be used either in front-end or back-end, depends on the use case. Every library abstracts certain component of an web application or a cloud provider service. They are published through npmjs.com and documented on <a href=\"http:\/\/docs.deep.mg\/\">docs.deep.mg<\/a>. The full list of libraries and some details can be found in the\u00a0<a href=\"https:\/\/github.com\/MitocGroup\/deep-framework#what-is-deep-framework-\">README<\/a>.<\/p>\n<h4>Q: Other than Lambda, what other technologies is the DEEP using? This includes frontend, mobile, databases, whatever you can\u00a0share.<\/h4>\n<p>DEEP Framework was built originally on AWS, but we want and hope to extend support using other cloud providers like Google Cloud Platform or Microsoft Azure. In AWS context, we are using the following services:<\/p>\n<ol>\n<li>Security\u200a\u2014\u200aIAM and\u00a0Cognito<\/li>\n<li>Frontend\u200a\u2014\u200aS3 and CloudFront<\/li>\n<li>Backend\u200a\u2014\u200aLambda, API Gateway and\u00a0SNS<\/li>\n<li>Database\u200a\u2014\u200aDynamoDB<\/li>\n<\/ol>\n<p>Our <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework#roadmap\">roadmap<\/a> includes adding support for services like CloudSearch and Elasticsearch, SQS and Kinesis, VPC and Elasticache.<\/p>\n<h4>Q: How large is the DEEP team? Did any\/all of them have experience with Lambda and Node.js already, or were they coming from other areas of expertise?<\/h4>\n<p>The team that works on DEEP project is pretty small (less than 10 developers). Except <a href=\"https:\/\/github.com\/eistrati\">@eistrati<\/a>, nobody had prior experience with AWS. It\u2019s a long story, and to make it short, core members of the team worked together on other projects that turned out to be 80%+ of our time support and maintenance. So we forced ourselves into a serverless approach and learned on the fly everything else required to get the job\u00a0done.<\/p>\n<h4>Q: What do you recommend for monitoring with DEEP applications? Is CloudWatch your go-to, or are there other tools you use in addition?<\/h4>\n<p>At the beginning, CloudWatch was our go-to monitoring tool, but it\u2019s very limited in showing the full picture, especially in realtime. We are using an <a href=\"https:\/\/www.elastic.co\/webinars\/introduction-elk-stack\">ELK<\/a>(Elasticsearch + Logstash + Kibana) stack hacked together to solve our measuring and monitoring needs. Now we\u2019re working to transform that solution into a component that any web application or web platform could use, if it\u2019s built with DEEP Framework.<\/p>\n<h4>Q: How does the DEEP framework expect a production pipeline to look? Do you expect users to be developing on their \u201cproduction\u201d account and managing changes with versioning\/aliases?<\/h4>\n<p>DEEP Framework, DEEP Marketplace, and DEEP CLI (aka <em>deepify<\/em>) are components of a bigger Platform-as-a-Service that we call <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework#appendix-b-deep-ecosystem\">Digital Enterprise End-to-end Platform<\/a> (aka\u00a0DEEP).<\/p>\n<p>Production pipeline in context of DEEP Framework + DEEP CLI is focused on developers and makes it easier for them to build, test and deploy serverless applications. For\u00a0example:<\/p>\n<ol>\n<li>\n<em>deepify server<\/em>\u200a\u2014\u200asimulates the entire stack on localhost and helps developers build and test their microservice(s)\/microapplication(s) without any need of cloud provider accounts (e.g. AWS accounts)<\/li>\n<li>\n<em>deepify deploy<\/em>\u200a\u2014\u200adeploys the microservice(s)\/microapplication(s) on cloud provider account, into specific environment (e.g. prod, stage, test, dev,\u00a0etc)<\/li>\n<li>Enjoy the web application!<\/li>\n<\/ol>\n<p>Production pipeline in context of DEEP Framework + DEEP Marketplace is focused on customers, allowing them to search for functionality in UI (no need for technical expertise) and deploy everything in their own cloud provider accounts as an web application. For\u00a0example:<\/p>\n<ol>\n<li>Search\/select wanted functionality (or compatible functionalities) and add it (or them) to shopping\u00a0cart<\/li>\n<li>Go to checkout page, provide credit card (pay for licensing the code) and provide cloud provider account credentials (point where the code will be\u00a0loaded)<\/li>\n<li>Enjoy the web application!<\/li>\n<\/ol>\n<p>In both cases, DEEP ecosystem manages (and encourages, but doesn\u2019t enforce) environments\/versioning\/aliases for the users (developers or customers). Where appropriate, we ask for confirmations from users and apply changes to existing stacks. At some point in near future, we\u2019d like to build a process that is very close to blue-green deployments.<\/p>\n<h4>Q: Was there anything that surprised you along the way? Were certain tasks easier or harder than you\u2019d expected?<\/h4>\n<p>Well, this is a tricky question. Since almost everything for us was new, we had lots of questions and misperceptions on certain things, but with help and support from the community and AWS, every task that was hard at the beginning turned up easy at the end. The biggest surprise was to be spotted by AWS Lambda team and invited to speak at AWS re:Invent 2015, the breakout session called \u201cMicroservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB\u201d.<\/p>\n<h4>Q: Are there any tools or libraries you\u2019ve used to build DEEP, or that you use alongside DEEP that you want people to know\u00a0about?<\/h4>\n<p>DEEP Framework is open source project, built on top of <strong>tons<\/strong> of other open source projects from Github. I\u2019ll try to briefly mention some of them (and apologies in advance if I miss anything):<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/aws\/aws-sdk-js\">aws\/aws-sdk-js<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/getsentry\/raven-node\">getsentry\/raven-node<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/hapijs\/joi\">hapijs\/joi<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/ryanfitz\/vogels\">ryanfitz\/vogels<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/RiptideElements\/s3fs\">RiptideElements\/s3fs<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/luin\/ioredis\">luin\/ioredis<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/marcuswestin\/store.js\">marcuswestin\/store.js<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/young-steveo\/bottlejs\">young-steveo\/bottlejs<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/nylen\/wait-until\">nylen\/wait-until<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/visionmedia\/superagent\">visionmedia\/superagent<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/IonicaBizau\/node-parse-url\">IonicaBizau\/node-parse-url<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/sindresorhus\/query-string\">sindresorhus\/query-string<\/a><\/li>\n<\/ul>\n<h4>Q: How would someone start with the DEEP framework, do you have a quickstart guide for people to\u00a0try?<\/h4>\n<p>Yes, we have published couple of examples on how to start building and deploying applications with DEEP Framework + DEEP CLI. There\u2019s a <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-helloworld\">hello world app<\/a> and a <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">todo app<\/a> inspired by <a href=\"http:\/\/todomvc.com\/\">todomvc.com<\/a>.<\/p>\n<h3>Wrapping Up<\/h3>\n<p>Thanks so much to the DEEP team for agreeing to be interviewed. In addition to all that, the team has <a href=\"http:\/\/www.slideshare.net\/mitocgroup\/microservices-architecture-for-digital-platforms-using-serverless-aws\">presented at the AWS Loft<\/a> and posted an article (which you\u2019ve already seen if you subscribe to my <a href=\"https:\/\/serverlesscode.com\/mail\/\">mailing list<\/a>), <a href=\"https:\/\/medium.com\/@MitocGroup\/how-to-create-serverless-environments-on-aws-8485ae039765\">7 Steps to Create Serverless Environments on\u00a0AWS<\/a>.<\/p>\n<p>As always, if you have an idea, question, or comment, hit me on Twitter<a href=\"https:\/\/twitter.com\/ryan_sb\">@ryan_sb<\/a> or email me at <a href=\"mailto:lambda@ryansb.com\">lambda@ryansb.com<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8c2d42ecd243\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/interview-creators-of-the-deep-framework-8c2d42ecd243\">Interview: Creators of The DEEP Framework<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<h4>Learn About The DEEP Framework Right From Its\u00a0Creators<\/h4>\n<p><em>Original article was posted on <\/em><a href=\"https:\/\/serverlesscode.com\/post\/deep-framework-developer-interview\/\"><em>https:\/\/serverlesscode.com\/post\/deep-framework-developer-interview\/<\/em><\/a><\/p>\n<figure><img alt=\"\" src=\"https:\/\/cdn-images-1.medium.com\/max\/1024\/1*tv13hVJcaDT7zS0mmQI2ow.png\"><\/figure><p>If you want to write web applications in AWS Lambda, there are actually quite a few options out there. There\u2019s the <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP Framework<\/a>, <a href=\"http:\/\/serverless.com\/\">Serverless<\/a> (formerly JAWS), <a href=\"https:\/\/github.com\/braahyan\/PAWS\">PAWS<\/a>, and <a href=\"https:\/\/github.com\/mweagle\/Sparta\">Sparta<\/a>. There are likely more that I\u2019m omitting\u200a\u2014\u200aholler on Twitter <a href=\"https:\/\/twitter.com\/ryan_sb\">@ryan_sb<\/a> if you know of\u00a0one.<\/p>\n<p>Today, we\u2019ll hear from the creators of the DEEP Framework about its origins, what it\u2019s great at, and how to start using it. The big driver for the Mitoc Group behind going serverless was to reduce ongoing maintenance. What better way to maintain fewer servers by not having\u00a0them?<\/p>\n<p>Not only is there the DEEP Framework itself, but there\u2019s also a \u201cmicroapp\u201d store at <a href=\"http:\/\/www.deep.mg\/\">www.deep.mg<\/a> where developers can buy and sell small pieces of functionality, like a shopping cart or recommendation engine. It\u2019s still early days for their marketplace, but in the future it could enable developers to build full applications with relatively little\u00a0code.<\/p>\n<h3>The Interview<\/h3>\n<h4>Q: Tell me a little about the DEEP framework, what problem is it\u00a0solving?<\/h4>\n<p><a href=\"https:\/\/github.com\/MitocGroup\/deep-framework\">DEEP<\/a> is a serverless web framework that abstracts web applications and web services from specific cloud providers. This framework enables developers build cloud-native applications or platforms using microservices architecture in a completely serverless approach. We aim to help enterprise software and enterprise organizations to build web applications or web services that can be used across cloud providers, enabling the customers to choose between Amazon Web Services, or Google Cloud Platform, or Microsoft Azure, or others, without having developers to rewrite the\u00a0code.<\/p>\n<h4>Q: I see that there\u2019s an app store for DEEP modules, can you give me any information about how many vendors are making things available through the app store? How many people are getting modules via the app\u00a0store?<\/h4>\n<p>The DEEP Marketplace is a public app store built on top of the DEEP Framework, that empowers customers to choose functionality from listed microservices\/microapplications and deploy them together as an web app into their own cloud provider accounts with just few clicks; as well as empowering developers to create and publish their microservices\/microapplications and monetize them in similar approach to Apple\u2019s App Store. <a href=\"http:\/\/www.deep.mg\/\">www.deep.mg<\/a> is currently in private beta, so it\u2019s still very early to talk about it. But, it\u2019s not a secret and to address your curiosity, we have 16 developers publishing microservices\/microapplications and 3 customers using them in production.<\/p>\n<h4>Q: Can you talk about the design of the DEEP framework at a high level? What are the different components?<\/h4>\n<p>DEEP Framework is a collection of JavaScript libraries that can be used either in front-end or back-end, depends on the use case. Every library abstracts certain component of an web application or a cloud provider service. They are published through npmjs.com and documented on <a href=\"http:\/\/docs.deep.mg\/\">docs.deep.mg<\/a>. The full list of libraries and some details can be found in the\u00a0<a href=\"https:\/\/github.com\/MitocGroup\/deep-framework#what-is-deep-framework-\">README<\/a>.<\/p>\n<h4>Q: Other than Lambda, what other technologies is the DEEP using? This includes frontend, mobile, databases, whatever you can\u00a0share.<\/h4>\n<p>DEEP Framework was built originally on AWS, but we want and hope to extend support using other cloud providers like Google Cloud Platform or Microsoft Azure. In AWS context, we are using the following services:<\/p>\n<ol>\n<li>Security\u200a\u2014\u200aIAM and\u00a0Cognito<\/li>\n<li>Frontend\u200a\u2014\u200aS3 and CloudFront<\/li>\n<li>Backend\u200a\u2014\u200aLambda, API Gateway and\u00a0SNS<\/li>\n<li>Database\u200a\u2014\u200aDynamoDB<\/li>\n<\/ol>\n<p>Our <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework#roadmap\">roadmap<\/a> includes adding support for services like CloudSearch and Elasticsearch, SQS and Kinesis, VPC and Elasticache.<\/p>\n<h4>Q: How large is the DEEP team? Did any\/all of them have experience with Lambda and Node.js already, or were they coming from other areas of expertise?<\/h4>\n<p>The team that works on DEEP project is pretty small (less than 10 developers). Except <a href=\"https:\/\/github.com\/eistrati\">@eistrati<\/a>, nobody had prior experience with AWS. It\u2019s a long story, and to make it short, core members of the team worked together on other projects that turned out to be 80%+ of our time support and maintenance. So we forced ourselves into a serverless approach and learned on the fly everything else required to get the job\u00a0done.<\/p>\n<h4>Q: What do you recommend for monitoring with DEEP applications? Is CloudWatch your go-to, or are there other tools you use in addition?<\/h4>\n<p>At the beginning, CloudWatch was our go-to monitoring tool, but it\u2019s very limited in showing the full picture, especially in realtime. We are using an <a href=\"https:\/\/www.elastic.co\/webinars\/introduction-elk-stack\">ELK<\/a>(Elasticsearch + Logstash + Kibana) stack hacked together to solve our measuring and monitoring needs. Now we\u2019re working to transform that solution into a component that any web application or web platform could use, if it\u2019s built with DEEP Framework.<\/p>\n<h4>Q: How does the DEEP framework expect a production pipeline to look? Do you expect users to be developing on their \u201cproduction\u201d account and managing changes with versioning\/aliases?<\/h4>\n<p>DEEP Framework, DEEP Marketplace, and DEEP CLI (aka <em>deepify<\/em>) are components of a bigger Platform-as-a-Service that we call <a href=\"https:\/\/github.com\/MitocGroup\/deep-framework#appendix-b-deep-ecosystem\">Digital Enterprise End-to-end Platform<\/a> (aka\u00a0DEEP).<\/p>\n<p>Production pipeline in context of DEEP Framework + DEEP CLI is focused on developers and makes it easier for them to build, test and deploy serverless applications. For\u00a0example:<\/p>\n<ol>\n<li>\n<em>deepify server<\/em>\u200a\u2014\u200asimulates the entire stack on localhost and helps developers build and test their microservice(s)\/microapplication(s) without any need of cloud provider accounts (e.g. AWS accounts)<\/li>\n<li>\n<em>deepify deploy<\/em>\u200a\u2014\u200adeploys the microservice(s)\/microapplication(s) on cloud provider account, into specific environment (e.g. prod, stage, test, dev,\u00a0etc)<\/li>\n<li>Enjoy the web application!<\/li>\n<\/ol>\n<p>Production pipeline in context of DEEP Framework + DEEP Marketplace is focused on customers, allowing them to search for functionality in UI (no need for technical expertise) and deploy everything in their own cloud provider accounts as an web application. For\u00a0example:<\/p>\n<ol>\n<li>Search\/select wanted functionality (or compatible functionalities) and add it (or them) to shopping\u00a0cart<\/li>\n<li>Go to checkout page, provide credit card (pay for licensing the code) and provide cloud provider account credentials (point where the code will be\u00a0loaded)<\/li>\n<li>Enjoy the web application!<\/li>\n<\/ol>\n<p>In both cases, DEEP ecosystem manages (and encourages, but doesn\u2019t enforce) environments\/versioning\/aliases for the users (developers or customers). Where appropriate, we ask for confirmations from users and apply changes to existing stacks. At some point in near future, we\u2019d like to build a process that is very close to blue-green deployments.<\/p>\n<h4>Q: Was there anything that surprised you along the way? Were certain tasks easier or harder than you\u2019d expected?<\/h4>\n<p>Well, this is a tricky question. Since almost everything for us was new, we had lots of questions and misperceptions on certain things, but with help and support from the community and AWS, every task that was hard at the beginning turned up easy at the end. The biggest surprise was to be spotted by AWS Lambda team and invited to speak at AWS re:Invent 2015, the breakout session called \u201cMicroservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB\u201d.<\/p>\n<h4>Q: Are there any tools or libraries you\u2019ve used to build DEEP, or that you use alongside DEEP that you want people to know\u00a0about?<\/h4>\n<p>DEEP Framework is open source project, built on top of <strong>tons<\/strong> of other open source projects from Github. I\u2019ll try to briefly mention some of them (and apologies in advance if I miss anything):<\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/aws\/aws-sdk-js\">aws\/aws-sdk-js<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/getsentry\/raven-node\">getsentry\/raven-node<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/hapijs\/joi\">hapijs\/joi<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/ryanfitz\/vogels\">ryanfitz\/vogels<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/RiptideElements\/s3fs\">RiptideElements\/s3fs<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/luin\/ioredis\">luin\/ioredis<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/marcuswestin\/store.js\">marcuswestin\/store.js<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/young-steveo\/bottlejs\">young-steveo\/bottlejs<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/nylen\/wait-until\">nylen\/wait-until<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/visionmedia\/superagent\">visionmedia\/superagent<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/IonicaBizau\/node-parse-url\">IonicaBizau\/node-parse-url<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/sindresorhus\/query-string\">sindresorhus\/query-string<\/a><\/li>\n<\/ul>\n<h4>Q: How would someone start with the DEEP framework, do you have a quickstart guide for people to\u00a0try?<\/h4>\n<p>Yes, we have published couple of examples on how to start building and deploying applications with DEEP Framework + DEEP CLI. There\u2019s a <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-helloworld\">hello world app<\/a> and a <a href=\"https:\/\/github.com\/MitocGroup\/deep-microservices-todo-app\">todo app<\/a> inspired by <a href=\"http:\/\/todomvc.com\/\">todomvc.com<\/a>.<\/p>\n<h3>Wrapping Up<\/h3>\n<p>Thanks so much to the DEEP team for agreeing to be interviewed. In addition to all that, the team has <a href=\"http:\/\/www.slideshare.net\/mitocgroup\/microservices-architecture-for-digital-platforms-using-serverless-aws\">presented at the AWS Loft<\/a> and posted an article (which you\u2019ve already seen if you subscribe to my <a href=\"https:\/\/serverlesscode.com\/mail\/\">mailing list<\/a>), <a href=\"https:\/\/medium.com\/@MitocGroup\/how-to-create-serverless-environments-on-aws-8485ae039765\">7 Steps to Create Serverless Environments on\u00a0AWS<\/a>.<\/p>\n<p>As always, if you have an idea, question, or comment, hit me on Twitter<a href=\"https:\/\/twitter.com\/ryan_sb\">@ryan_sb<\/a> or email me at <a href=\"mailto:lambda@ryansb.com\">lambda@ryansb.com<\/a>.<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8c2d42ecd243\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/interview-creators-of-the-deep-framework-8c2d42ecd243\">Interview: Creators of The DEEP Framework<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["serverless", "microservices", "aws-lambda"] }, { "title": "Best re:Invent Ever!", "pubDate": "2015-10-12 02:11:28", "link": "https:\/\/blog.mitocgroup.com\/best-re-invent-ever-448ac73f6a4e?source=rss----d770bafd0445---4", "guid": "https:\/\/medium.com\/p\/448ac73f6a4e", "author": "Mitoc Group", "thumbnail": "", "description": "\n<p><a href=\"https:\/\/reinvent.awsevents.com\/\">AWS re:Invent 2015<\/a> is over, but the media, the industry and the cloud computing blogs are still talking about it. And this is no surprise, because Amazon Web Services announced <a href=\"https:\/\/aws.amazon.com\/new\/reinvent\/\">21 new major services and features<\/a>!<\/p>\n<p>We would like to share some thoughts while it\u2019s still hot on what this conference meant for us. It was the Best re:Invent Ever! We have met with a lot of technical folks and learned so much, that it would take months to process it and transform into added value for our customers.<\/p>\n<p>We have presented <a href=\"https:\/\/www.portal.reinvent.awsevents.com\/connect\/sessionDetail.ww?SESSION_ID=1646&amp;tclass=popup\">\u201cMicroservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB\u201d<\/a>. The video will be loaded on Youtube (<a href=\"https:\/\/www.youtube.com\/playlist?list=PLhr1KZpdzukdRxs_pGJm-qSy5LayL6W_Y\">Architecture Playlist<\/a>) and the slides will be loaded on Slideshare (<a href=\"http:\/\/www.slideshare.net\/AmazonWebServices\/presentations\">Latest Presentations<\/a>), therefore stay tuned and we\u2019ll repost them as soon as they will be available.<\/p>\n<p>But don\u2019t take our word for granted and look at some customers tweets:<\/p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>Enjoying the thoughtful, informative and friendly style of <a href=\"http:\/\/twitter.com\/eistrati\" target=\"_blank\" title=\"Twitter profile for @eistrati\">@eistrati<\/a> #reInvent<\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/micwar\/status\/651884475396288512\">@micwar<\/a><\/p>\n<\/blockquote>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>Nice serverless app demo: Angular UI served from S3; Microservices with API gateway, Lambda, and Cognito. #reinvent #ifm <a href=\"http:\/\/twitter.com\/eistrati\" target=\"_blank\" title=\"Twitter profile for @eistrati\">@eistrati<\/a><\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/luketn\/status\/651885406015746048\">@luketn<\/a><\/p>\n<\/blockquote>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>\"microservices are game changers\" <a href=\"http:\/\/twitter.com\/eistrati\" target=\"_blank\" title=\"Twitter profile for @eistrati\">@eistrati<\/a> , Mitoc Group , #reInvent<\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/micwarg\/status\/651886347624579073\">@micwarg<\/a><\/p>\n<\/blockquote>\n<p>And some feedback that we have received by email, and we\u2019d like to share with everybody, because it really inspires us to move\u00a0forward:<\/p>\n<blockquote>I attended your session today on Microservices. Brilliant. Very inspiring to the companies like [company\u2019s name] who are into Application Development business. Looking forward to see more sessions like this. Demo of Deepify was killer\u00a0:)<\/blockquote>\n<p>We are looking forward to continue investing in technology solutions on AWS. And we are looking forward to help customers improving their digital platforms on AWS. But the most important at this point, we would like to thank everybody who tirelessly put a lot of effort and energy to make this conference happen. You guys are the real heroes here, so Thank\u00a0You!<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=448ac73f6a4e\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/best-re-invent-ever-448ac73f6a4e\">Best re:Invent Ever!<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "content": "\n<p><a href=\"https:\/\/reinvent.awsevents.com\/\">AWS re:Invent 2015<\/a> is over, but the media, the industry and the cloud computing blogs are still talking about it. And this is no surprise, because Amazon Web Services announced <a href=\"https:\/\/aws.amazon.com\/new\/reinvent\/\">21 new major services and features<\/a>!<\/p>\n<p>We would like to share some thoughts while it\u2019s still hot on what this conference meant for us. It was the Best re:Invent Ever! We have met with a lot of technical folks and learned so much, that it would take months to process it and transform into added value for our customers.<\/p>\n<p>We have presented <a href=\"https:\/\/www.portal.reinvent.awsevents.com\/connect\/sessionDetail.ww?SESSION_ID=1646&amp;tclass=popup\">\u201cMicroservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB\u201d<\/a>. The video will be loaded on Youtube (<a href=\"https:\/\/www.youtube.com\/playlist?list=PLhr1KZpdzukdRxs_pGJm-qSy5LayL6W_Y\">Architecture Playlist<\/a>) and the slides will be loaded on Slideshare (<a href=\"http:\/\/www.slideshare.net\/AmazonWebServices\/presentations\">Latest Presentations<\/a>), therefore stay tuned and we\u2019ll repost them as soon as they will be available.<\/p>\n<p>But don\u2019t take our word for granted and look at some customers tweets:<\/p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>Enjoying the thoughtful, informative and friendly style of <a href=\"http:\/\/twitter.com\/eistrati\" target=\"_blank\" title=\"Twitter profile for @eistrati\">@eistrati<\/a> #reInvent<\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/micwar\/status\/651884475396288512\">@micwar<\/a><\/p>\n<\/blockquote>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>Nice serverless app demo: Angular UI served from S3; Microservices with API gateway, Lambda, and Cognito. #reinvent #ifm <a href=\"http:\/\/twitter.com\/eistrati\" target=\"_blank\" title=\"Twitter profile for @eistrati\">@eistrati<\/a><\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/luketn\/status\/651885406015746048\">@luketn<\/a><\/p>\n<\/blockquote>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-align=\"center\" data-dnt=\"true\">\n<p>\"microservices are game changers\" <a href=\"http:\/\/twitter.com\/eistrati\" target=\"_blank\" title=\"Twitter profile for @eistrati\">@eistrati<\/a> , Mitoc Group , #reInvent<\/p>\n<p>\u200a\u2014\u200a<a href=\"https:\/\/twitter.com\/micwarg\/status\/651886347624579073\">@micwarg<\/a><\/p>\n<\/blockquote>\n<p>And some feedback that we have received by email, and we\u2019d like to share with everybody, because it really inspires us to move\u00a0forward:<\/p>\n<blockquote>I attended your session today on Microservices. Brilliant. Very inspiring to the companies like [company\u2019s name] who are into Application Development business. Looking forward to see more sessions like this. Demo of Deepify was killer\u00a0:)<\/blockquote>\n<p>We are looking forward to continue investing in technology solutions on AWS. And we are looking forward to help customers improving their digital platforms on AWS. But the most important at this point, we would like to thank everybody who tirelessly put a lot of effort and energy to make this conference happen. You guys are the real heroes here, so Thank\u00a0You!<\/p>\n<img src=\"https:\/\/medium.com\/_\/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=448ac73f6a4e\" width=\"1\" height=\"1\"><hr>\n<p><a href=\"https:\/\/blog.mitocgroup.com\/best-re-invent-ever-448ac73f6a4e\">Best re:Invent Ever!<\/a> was originally published in <a href=\"https:\/\/blog.mitocgroup.com\/\">Mitoc Group<\/a> on Medium, where people are continuing the conversation by highlighting and responding to this story.<\/p>\n", "enclosure": [], "categories": ["aws", "microservices", "reinvent"] }]
}

for (i = 0; i < 3; i++) {

    var post = n.items[i];
    var title = post.title;
    var date = post.pubDate;
    var tagIndex = post.description.indexOf('<img');
    var srcIndex = post.description.substring(tagIndex).indexOf('src=') + tagIndex;
    var srcStart = srcIndex + 5;
    var srcEnd = post.description.substring(srcStart).indexOf('"') + srcStart;
    var src = post.description.substring(srcStart, srcEnd);
    var y = i.toString();

    document.getElementById("blog_title_" + i).innerHTML = title;
    document.getElementById("blog_img_" + i).style.backgroundImage = "url('" + src + "')";
}
