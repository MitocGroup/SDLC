{"our-first-story-the-beginning-of-the-journey":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 29 May 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-05-29/startup.jpeg","Title":"Our first story … the beginning of the journey.","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-05-29/startup.jpeg\" alt=\"Startup\" />\n    <div class=\"center img-description\">Source: gonature.es</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Every startup has a story. Most of these stories begin with a couple of folks getting together to solve a problem they have or see. It’s not very encouraging to know that <a href=\"https://fortune.com/2014/09/25/why-startups-fail-according-to-their-founders/\">9 out of 10 startups</a> fail, according to their founders. Still, we have decided to take this path anyway. So the question is … Why?</p>\n<p class=\"graf graf-up margin-bottom-25\">To be honest, why not? We are working with a team of brilliant engineers that build great products and are constantly delivering cool stuff. We are indirectly engaging with a couple of enterprise customers that are using these products and are constantly asking for more. We are exposing both sides to latest and greatest piece of technology that neither of them thought about before. Sounds like <a href=\"https://www.linkedin.com/pulse/marc-andreessen-product-market-fit-startups-marc-andreessen\">a perfect product/market</a> fit that we have to explore, doesn’t it?</p>\n<p class=\"graf graf-up margin-bottom-25\">It is and it’s not.</p>\n<p class=\"graf graf-up margin-bottom-25\">The truth is that one evening we were discussing among friends who has the worst manager and how much it hurts the companies we’re working at the time. After a great dinner and some wine, the level of discussion was so intense and the frustration in people voices so obvious, that occasionally somebody was trying to change the topic, but we were quickly coming back to the same topic. Eventually, everybody agrees that to make an impactful and sustainable difference, you gotta start your own business. Period.</p>\n<p class=\"graf graf-up margin-bottom-25\">So here we are today, at the beginning of our journey. It is the hardest we could pick and the most unpredictable we could want, but we are proud of the choice we consciously took and we’ll work smart to bring high value to our future customers.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-05-29/quote.jpeg\" alt=\"Quote\" />\n    <div class=\"center img-description\">Source: quotefancy.com</div>\n</div>"},"mitoc-group-inc-accepted-as-aws-technology-partner":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 28 July 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-07-28/partnerAws.png","Title":"Mitoc Group Inc accepted as AWS Technology Partner","Intro":"","minRead":"~ 1 min read","htmlCode":"<div class=\"external-article\">\n  <a href=\"http://www.aws-partner-directory.com/PartnerDirectory/PartnerDetail?Name=Mitoc%20Group%20Inc&source=post_page-----86b6f936db52----------------------\">\n    <h5>Mitoc Group Inc</h5>\n    <span>AWS Solution Provider: Mitoc Group Inc</span>\n    <span>www.aws-partner-directory.com</span>\n  </a>\n</div>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2015-07-28/partnerAws.png\" alt=\"Partner AWS\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Although we’ve been quiet for almost 2 months, our team has been heads down and working hard to achieve difficult milestones. Today we can proudly talk about our first major achievement — accepted as Official AWS Technology Partner: <a href=\"http://www.aws-partner-directory.com/PartnerDirectory/PartnerDetail?Name=Mitoc+Group+Inc\">http://www.aws-partner-directory.com/PartnerDirectory/PartnerDetail?Name=Mitoc+Group+Inc</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">To provide a little bit of insight why this is great for a small group like ours, I think it’s important to start from the vision and the mission that we’ve all committed when we’ve started this company. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. We’ve been using AWS at the core of our business for a while and it’s a huge privilege to be able to partner with such a great company, that inspires us to do great things!</p>\n<p class=\"graf graf-up margin-bottom-25\">We are humble to recognize the value and the big responsibility that comes with this partnership. And we are ready to provide great products and great services, knowing that we can rely on AWS as our infrastructure provider. We are looking forward to continue to help our customers, who’ll benefit the most from this partnership. Thank you for trusting us to do the best!</p>"},"deep-management-is-pending-patent-at-us-patent-and-trademark-office":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 05 August 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-08-05/usPatent.jpeg","Title":"DEEP Management is pending patent at US Patent and Trademark Office","Intro":"","minRead":"~ 3 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-05/usPatent.jpeg\" alt=\"Why CI?\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">For the last couple of weeks we have been working with <a href=\"http://steinbergiplaw.com/\">Steinberg Intellectual Property Law LLC</a> to file a patent with <a href=\"http://www.uspto.gov/\">United States Patent and Trademark Office</a> that protects the Intellectual Property developed by our group. We are proud and excited to report the acceptance of the application number 62/195,190 entitled “Digital Asset Management System and Method of Use”.</p>\n<h3>What does this mean for our customers?</h3>\n<p class=\"graf graf-up margin-bottom-25\">One of our goals is to protect our customers and our partners from malicious third parties that threaten progress and innovation. The innovation we’re bringing to the Digital Asset Management Systems is based on microservices architecture using managed services from cloud computing providers like Amazon Web Services.</p>\n<p class=\"graf graf-up margin-bottom-25\">Majority of modern systems are built on top of servers (in AWS context that would be Amazon EC2). At scale, depending on the complexity and the flexibility of the application, it would require to integrate with other infrastructure components / servers that grows exponentially the management, operational burden and inevitably cost. Our approach is fundamentally different, based on the new trends in cloud computing space known as serverless environments. We leverage and combine fully managed services (in AWS context that would be Amazon S3, Amazon CloudFront, AWS Lambda, Amazon DynamoDB and so on) that provide customers integrated components that doesn’t require access to underlying servers. This approach saves customers lots of management and operational overhead, driving down complexity and associated costs.</p>\n<h3>The benefits of serverless environments</h3>\n<p class=\"graf graf-up margin-bottom-25\">The concepts behind serverless environments is pretty simple: no servers / infrastructure to manage. It really pushes developers and application owners to think differently, towards progress and innovation. There are lots of benefits that we could talk about, but we’d like to focus on the biggest and the most important ones, like:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><p class=\"graf graf-up margin-bottom-25\">High flexibility and high scalability — <a href=\"https://www.gartner.com/newsroom/id/2598515\">Gartner says digital business incompetence will cause 25% of businesses to lose competitive ranking by 2017</a>. That’s why lots of enterprises are pushing hard for adoption of digital as part of their core businesses. Serverless environments can sustainably help with digital transformation in a highly flexible and highly scalable manner.</p></li>\n<li><p class=\"graf graf-up margin-bottom-25\">Low cost and low maintenance — Forrester Research predicts that enterprise content volume is growing <a href=\"http://www.workforce.com/ext/resources/archive_mediafiles/Google_GSA_ROI_WP.pdf\">at a rate of 200% annually</a>. Enterprises are managing large amount of digital goods with exponential growth rates. Serverless environments can sustainably help upgrade existing digital platforms without breaking the bank or cutting short on performance and security.</p></li>\n<li><p class=\"graf graf-up margin-bottom-25\">Low barrier of entry — <a href=\"http://www.mckinsey.com/insights/business_technology/minding_your_digital_business_mckinsey_global_survey_results\">McKinsey’s global survey</a> summarized that “Executives expect that new digital technologies will transform their businesses, but many admit their companies are far from prepared in developing capabilities and meeting challenges”. Serverless environments can sustainably help break through these challenges and attract the right talent to execute on this strategy.</p></li>\n</ol>\n<h3>So what are you waiting for?</h3>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Management as a serverless platform is designed to help enterprises to manage their digital treasures. Customers can manage, at scale, large number of digital assets or content without compromising on performance, security and cost. Start today by going to <a href=\"https://www.deep.mg/\">www.deep.mg</a> and try it out for free. Let us know your feedback at <a href=\"mailto:hello@deep.mg\">hello@deep.mg</a> and how can we improve, to make it helpful and meaningful to your needs.</p>"},"deep-management-s-continuous-integration-with-travis-ci-and-coveralls":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 11 August 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-08-11/whyCI.png","Title":"DEEP Management’s Continuous Integration with Travis CI and Coveralls","Intro":"","minRead":"~ 4 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-11/whyCI.png\" alt=\"Why CI?\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://www.deep.mg/\">DEEP Management</a> offers functionality to help automate and streamline the management of digital assets. This process in software development vertical is known as <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">Continuous Integration</a>. According to wiki:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em><strong>Continuous Integration</strong> (CI) is the practice, in software engineering, of merging all developer working copies with a shared mainline several times a day.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">From the very first days of DEEP Management, we’ve been thinking and working to add continuous integration process into the core of our platform. We believe that digital assets can be managed similar to software code and some of the best practices from software development could be easily applied to digital asset management. We’re happy to share the experience and step-by-step guide of what we’ve implemented so far.</p>\n<h3>Continuous Integration Requirements</h3>\n<p class=\"graf graf-up margin-bottom-25\">We’ve approached continuous integration the same way we’ve approached development of digital asset management platform. Our requirements are (additionally to the <a href=\"https://en.wikipedia.org/wiki/Continuous_integration#Best_practices\">best practices</a> of continuous integration process):</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>High-flexibility and high-scalability — we’re building this process for our internal use, and we’re planning to make it an integrated solution into our platform on top of managed services;</li>\n<li>Low-cost and low-maintenance — our budget is pretty tiny, so it’s crucial for us not to break the bank and we want to figure out the best solution while working hands on, so our customers can reuse it;</li>\n<li>Low barrier of entry — if there is a market leader in open source community, we’d definitely want to adopt something that is already widely used.</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">In above context, the choice was pretty simple: <a href=\"https://travis-ci.com/\">Travis CI</a>. According to wiki:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em><strong>Travis CI</strong> is an open-source hosted, distributed continuous integration service used to build and test projects hosted at <a href=\"https://github.com/\">GitHub</a>.</em></p>\n</blockquote>\n<h3>Continuous Integration Implementation</h3>\n<p class=\"graf graf-up margin-bottom-25\">Our technology stack is fully on Javascript, so obviously we’ve started with official documentation page for <a href=\"http://docs.travis-ci.com/user/languages/javascript-with-nodejs/\">Javascript (with Node.js)</a>. Unfortunately, it doesn’t cover all our needs, so we’ve expended our research and ended up following Valeri Karpov’s blog post: <a href=\"https://strongloop.com/strongblog/npm-modules-travis-coveralls/\">Building Better npm Modules with Travis and Coveralls</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">To get started with Travis CI for Node.js, just simply create .travis.yaml in the root of your GitHub project that looks like this:</p>\n<pre><code>language: node_js\nsudo: false\nnode_js:\n  - '0.12'\n  - '0.11'\n  - '0.10'\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">Travis CI for Node.js uses by default <a href=\"https://www.npmjs.com/package/npm\">npm</a> (Node Package Manager) and <a href=\"https://www.npmjs.com/package/nvm\">nvm</a> (Node Version Manager). To use it with default settings, just add into your <em>package.json</em> related lines to manage the triggering of <em>npm install</em> (line 10 below) and <em>npm test</em> (line 11 below):</p>\n<pre><code class=\"json language-json\">{\n  \"name\": \"deep management\",\n  \"description\": \"deep - digital enterprise end-to-end platform\",\n  \"version\": \"0.0.1\",\n  \"author\": {\n    \"name\": \"Mitoc Group\",\n    \"email\": \"hello@mitocgroup.com\"\n  },\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"scripts\": {\n    ...\n    \"install\": \"node ./bin/www &amp;\",\n    \"test\": \"./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- -R spec ./test/*\",\n    \"test-mocha\": \"./node_modules/mocha/bin/mocha ./test/*\",\n    \"coveralls\": \"cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js\"\n  },\n  \"dependencies\": {\n    ...\n    \"coveralls\": \"~2.11.3\",\n    \"istanbul\": \"~0.3.17\",\n    \"mocha\": \"~2.2.5\"\n  }\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">There are couple of more optimizations that we’ve added, including repository branches restrictions, caching directories and code testing coverage library <a href=\"https://www.npmjs.com/package/coveralls\">Coveralls</a> (line 13 above and line 15 below):</p>\n<pre><code>branches:\n  only:\n    - master\n    - stage\n    - test\n    - dev\n\ncache:\n  directories:\n    - node_modules\n    - bower_components\n    - docs/bower_components\n\nafter_success:\n  - npm run coveralls\n</code></pre>\n<h3>The Benefits of Using Travis CI and GitHub</h3>\n<p class=\"graf graf-up margin-bottom-25\">At the time of writing this article, Travis CI is fully integrated and functional only with GitHub repositories. Even the first step in the <a href=\"http://docs.travis-ci.com/user/getting-started/\">Getting Started Guide</a> is enforcing it:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><a href=\"https://travis-ci.org/auth\">Sign in to Travis CI</a> with your GitHub account, accepting the GitHub <a href=\"http://docs.travis-ci.com/user/github-oauth-scopes\">access permissions confirmation</a>.</li>\n</ol>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-11/wantTravis.png\" alt=\"Want to try Travis?\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">This native integration with GitHub allows low barrier of entry, low-cost and low-maintenance, as well as high-flexibility and high-scalability, perfectly fitting into our additional requirements. If the code is stored on GitHub’s public repositories, you can benefit of Travis CI for free. Otherwise you’ll need to purchase one of their <a href=\"https://travis-ci.com/plans\">monthly plans</a> (picture above).</p>\n<p class=\"graf graf-up margin-bottom-25\">But the biggest benefit out of the box is transparency and professionalism. And as the owners of the code, our goal is to inspire trust and example to other developers who will be building their solutions on top of existing ones. That being said, we’re proud to have badges in our <em>README.md</em> file in any GitHub repository:</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-11/icons.png\" alt=\"icons\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">And here below is the source code of the above badges:</p>\n<pre><code>[![Build Status](https://travis-ci.org/MitocGroup/mitocgroup.github.io.svg?branch=master)](https://travis-ci.org/MitocGroup/mitocgroup.github.io)\n[![Dependencies Status](https://david-dm.org/MitocGroup/mitocgroup.github.io.svg?branch=master)](https://david-dm.org/MitocGroup/mitocgroup.github.io)\n[![Coverage Status](https://coveralls.io/repos/MitocGroup/mitocgroup.github.io/badge.svg)](https://coveralls.io/r/MitocGroup/mitocgroup.github.io)\n</code></pre>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">To summarize, in just a couple of simple steps we’ve setup fully managed, low-cost and low-maintenance continuous integration process that requires zero servers management. These efforts are driven by open source friendly companies and can scale to any project size. Last, but not the least, by making it easier to everybody on both business side and engineering side, anyone can build high quality code that solves problems through technology and makes the world a better place. We’d be happy to talk to you, so please <a href=\"http://www.mitocgroup.com/#contact\">let us know your thoughts</a> or just <a href=\"mailto:hello@mitocgroup.com\">stop by to say hello</a>.</p>"},"very-exciting-and-looking-forward-to-aws-re-invent-2015":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 12 August 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-09-27/logo.png","Title":"Very exciting and looking forward to AWS re:Invent 2015!","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2015-09-27/logo.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">When we’re submitting our proposal for a breakout session at Amazon’s biggest conference <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent 2015</a>, a friend of ours (who is also a former Amazon employee) was telling there is no chance in the world it would be accepted. So imagine now our surprise to receive this nice and friendly email (shown in above picture) saying it was accepted. At some point, we’re looking into the email’s headers to see if it’s not a joke orchestrated by the same friend.</p>\n<h3>Why it’s such a big deal?</h3>\n<p class=\"graf graf-up margin-bottom-25\">Again, quoting our friend: “Last year couple of hundreds of proposals have been received by AWS re:Invent 2014 team and only twenty-ish of them have been accepted.” Therefore it’s a very small (single digit) probability that young and tiny startup like <a href=\"http://www.mitocgroup.com/\">Mitoc Group</a> would be accepted to present. Combine that with the size of AWS (at the time of writing — <a href=\"http://www.geekwire.com/2014/amazon-web-services-passes-milestone-1m-customers/\">over 1M active customers</a> and <a href=\"http://techcrunch.com/2015/07/23/amazons-aws-unit-reports-q2-revenue-of-1-8b-391m-profit/\">on course to become more than $6B business</a>) and it’s partners ecosystem (at the time of writing — <a href=\"http://www.aws-partner-directory.com/PartnerDirectory/PartnerSearch?type=SI\">1287 Consulting Partners</a> and <a href=\"http://www.aws-partner-directory.com/PartnerDirectory/PartnerSearch?type=ISV\">958 Technology Partners</a>), this is mission impossible!</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-12/email.png\" alt=\"aws reinvent email\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><em>AWS re:Invent Portal Link: <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=1646&tclass=popup\">https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION</em>ID=1646&amp;tclass=popup</a>_</p>\n<p class=\"graf graf-up margin-bottom-25\">Nevertheless, we’ve been selected. We are very humble and would like to thank AWS re:Invent 2015 team for trusting us to present such a hot topic like “Microservices Architecture for Digital Plaforms with Lambda, CloudFront and DynamoDB”. We believe that lots of technical people, regardless of software engineers or hardware engineers, solutions architects or dev-/sys-ops, management or decisions making, would benefit from a little bit of hands on experience with serverless digital platforms using managed services from AWS.</p>\n<h3>What is AWS re:Invent?</h3>\n<p class=\"graf graf-up margin-bottom-25\">In case you’ve never heard of re:Invent from Amazon Web Services, we’ll quote from the conference’s <a href=\"https://reinvent.awsevents.com/\">official website</a>:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>AWS re:Invent is the Amazon Web Services annual user conference. The event features keynote announcements, training and certification opportunities, over 250 technical sessions, a partner expo, after hours activities, and more. The event is ideal for developers and engineers, system administrators, systems architects, and technical decision makers.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">My favorite question from the <a href=\"https://reinvent.awsevents.com/faq.html\">AWS re:Invent’s FAQ</a> this year is:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>How can I convince my boss to let me attend?</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">Yeah, we all have been there and struggled with that… And here below is the answer:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>There are a number of great benefits for attending AWS re:Invent. We have made it easy for you to convince your boss to attend AWS re:Invent! Use our <a href=\"https://reinvent.awsevents.com/justification.html\">Justify Your Trip</a> template.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">So, guess we’ll see you there and please stop by to attend our <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=1646&tclass=popup\">breakout session</a> or just <a href=\"mailto:hello@mitocgroup.com\">say hello</a>. Vegas, here we come!</p>"},"welcome-to-deep-management-dam-as-a-service-and-dam-as-a-platform":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 3 August 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-08-03/Welcome.png","Title":"Very exciting and looking forward to AWS re:Invent 2015!","Intro":"","minRead":"~ 4 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2015-08-03/welcome.png\" alt=\"Welcome\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Our journey started years ago when we’ve been crafting and inventing the wheels of Digital Asset Management (also known as DAM) for mobile platforms. Sounds like an eternity to talk about mobile-focused applications built before smartphones and tables, and to some degree it is, but it’s the roots that define the trees and are the foundation for their branches and their leaves. That being said, in this article, we’ll be talking about where we’re coming from, what we’re planning to accomplish and who will be the real winners of adopting and using our DAM system called DEEP Management.</p>\n<h3>How we ended up building Digital Asset Management platform?</h3>\n<p class=\"graf graf-up margin-bottom-25\">So, back to the roots, core members of our team have been working since 2007, helping media and publishing companies to manage and distribute their assets to the digital world, mainly over Internet. Brands like <a href=\"http://starmagazine.com/\">Star Magazine</a> or <a href=\"http://www.usmagazine.com/\">Us Weekly</a> have been working with agencies like <a href=\"http://www.kargo.com/\">Kargo</a> to tap into mobile audiences. As part of <a href=\"https://www.zend.com/topics/KargoZendWebinar-final.pdf\">Kargo Framework</a>, the foundation of agency’s Mobile Publishing Platform, we’ve built KAMP (also known as Kargo Advanced Media Platform) to manage digital assets on behalf of our customers. Those assets have been stored and distributed through multiple mobile channels like WAP-push, MMS and alike, way before iOS and Android. Technology evolved exponentially since then and the rise of cloud computing opened up new opportunities to solve Digital Asset Management needs with a tap of a finger.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-03/cloud.jpeg\" alt=\"cloud\" />\n</div>\n<h3>What is DEEP Management?</h3>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Management (also known as Digital Enterprise End-to-end Platform Management) is a low-cost and low-maintenance digital asset management platform powered by managed services from AWS. Customers can manage, at scale, large number of digital properties without compromising on performance, security or cost. Let’s say I’m Chief Digital Officer at Big Company Inc. I have thousands of microsites and static websites, millions of images and videos that are spread all over our internal infrastructure and require a lot of resources to manage them. DEEP Management provides functionality that, within couple of clicks, will move everything to company’s AWS account and manage it cost-effectively in one place, with minimum to none management and operational overhead. All this can be done easily in the UI by none-technical people, without any kind of involvement or resources allocation from IT department.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2015-08-03/assets.png\" alt=\"assets\" />\n</div>\n<h3>Why would enterprises even consider yet another DAM solution?</h3>\n<p class=\"graf graf-up margin-bottom-25\">As mentioned before, the rise of cloud computing providers like AWS opened up another world of digital possibilities and opportunities never explored before. For the first time, developers and customers alike can use wide range of technologies that allow them to build and run serverless environments with minimum to none effort. More than that, driven by AWS mission to provide services at high volume and low margin, our team was able to build into DEEP Management fundamental benefits like low cost, high flexibility and low maintenance. It is up to enterprises to decide weather they continue to invest lots of resources (time, money, people, etc) into existing digital systems or switch to new wave of digital systems like DEEP Management to free up their resources for other core projects.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-08-03/architecture.png\" alt=\"architecture\" />\n</div>\n<h3>What we’re planning to provide?</h3>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Management is our take on Digital Asset Management systems, built on top of a serverless platform with microservices architecture (as shown in the picture above). At this point, we’ve identified the following use cases:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Managing images and videos without a need to import actual assets into the system (assets can be stored remotely as well)</li>\n<li>Managing microsites and static websites with full development capabilities like continuous integration and continuous deployment on top of multiple environments (development, testing, staging and production)</li>\n<li>Managing logs and data that handle out-of-the-box “close to realtime” processes and visualize insights of your own datasets</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Some other roadmap features include:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Metadata management (including custom ones)</li>\n<li>Workflow management and access control lists</li>\n<li>Publishing and distribution management</li>\n</ul>\n<h3>Who could consider DEEP Management?</h3>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Management is designed to help large organizations to organize their internal digital goods (and some digital services) into one place and manage them easily. It best fits in environments that require high flexibility, end to end management and want to control the overall operations without actually moving assets from where they currently are. It could run in customer’s own AWS account where you own all the layers (frontend, backend, database, security, etc) without compromising performance, security and cost. If you have thousands of digital assets, you know what pain we’re solving and hopefully you’ll appreciate our product.</p>"},"how-do-you-get-invited-to-speak-at-aws-re-invent":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sun, 27 September 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-09-27/logo.png","Title":"How do you get invited to speak at AWS re:Invent?","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2015-09-27/logo.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">AWS re:Invent is the Amazon Web Services annual user conference. The event features keynote announcements, training and certification opportunities, over 250 technical sessions, a partner expo, after hours activities, and more. The event is ideal for developers and engineers, system administrators, systems architects, and technical decision makers.</p>\n<h3>AWS re:Invent 2015</h3>\n<p class=\"graf graf-up margin-bottom-25\">This year, Amazon Web Services is organizing the biggest conference ever. Check out this inforgraphic put together by Cloudability Team:</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-09-27/banner.png\" alt=\"partner aws\" />\n</div>\n<h3>Invitation to Speak at AWS re:Invent</h3>\n<p class=\"graf graf-up margin-bottom-25\">There is no secret back channel or something. At least not for us. Everything was very simple and transparent. In May 2015, AWS opened up to speakers and invited everybody to submit presentations, which we did. Here is an excerpt from the breakout session submission guidance:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>At its core, AWS re:Invent is a learning conference. We count on sessions to educate attendees using real case studies, best practices, lessons learned, demos, or technical tips. Sessions should appeal to a skilled developer audience, going deep on AWS technologies and solutions. While AWS is already planning for sessions covering its core services, we are always looking for standout customer stories, unique AWS implementations and examples of successful collaborations with our partners.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">Since AWS re:Invent is a learning conference, the main and only tip that we can give you: Come up with a session that will help people to learn something relevant and cool. We believe that our presentation was selected for 3 reasons:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Microservices Architecture for Digital Platforms</li>\n<li>Serverless Digital Environments on AWS</li>\n<li>Digital Asset Management system using above approach</li>\n</ol>\n<h3>Tips for Next Year</h3>\n<p class=\"graf graf-up margin-bottom-25\">This year is already closed for new sessions, but there is next year. And the truth is: There is no cheat sheet. So try to think proactively, do what you are passioned about and if what you do will be of industry interest, AWS will definitely pick your proposal.</p>\n<p class=\"graf graf-up margin-bottom-25\">And if you are attending the conference this year, please join our breakout session: <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=1646&tclass=popup\">ARC201 — Microservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB</a></p>"},"best-re-invent-ever":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 12 October 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-10-12/reinvent.jpeg","Title":"Best re:Invent Ever!","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-10-12/reinvent.jpeg\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Best re:Invent Ever!</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://reinvent.awsevents.com/\">AWS re:Invent 2015</a> is over, but the media, the industry and the cloud computing blogs are still talking about it. And this is no surprise, because Amazon Web Services announced <a href=\"https://aws.amazon.com/new/reinvent/\">21 new major services and features</a>!</p>\n<p class=\"graf graf-up margin-bottom-25\">We would like to share some thoughts while it’s still hot on what this conference meant for us. It was the Best re:Invent Ever! We have met with a lot of technical folks and learned so much, that it would take months to process it and transform into added value for our customers.</p>\n<p class=\"graf graf-up margin-bottom-25\">We have presented <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=1646&tclass=popup\">“Microservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB”</a>. The video will be loaded on Youtube (<a href=\"https://www.youtube.com/playlist?list=PLhr1KZpdzukdRxs_pGJm-qSy5LayL6W_Y\">Architecture Playlist</a>) and the slides will be loaded on Slideshare (<a href=\"http://www.slideshare.net/AmazonWebServices/presentations\">Latest Presentations</a>), therefore stay tuned and we’ll repost them as soon as they will be available.</p>\n<p class=\"graf graf-up margin-bottom-25\">But don’t take our word for granted and look at some customers tweets:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Enjoying the thoughtful, informative and friendly style of <a href=\"https://twitter.com/eistrati?ref_src=twsrc%5Etfw\">@eistrati</a> <a href=\"https://twitter.com/hashtag/reInvent?src=hash&amp;ref_src=twsrc%5Etfw\">#reInvent</a></p>&mdash; Michael Warrilow (@micwar) <a href=\"https://twitter.com/micwar/status/651884475396288512?ref_src=twsrc%5Etfw\">October 7, 2015</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<div class=\"padd25px\">\n    <div class=\"center img-description\">Enjoying the thoughtful, informative and friendly style of @eistrati</div>\n</div>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Nice serverless app demo: Angular UI served from S3; Microservices with API gateway, Lambda, and Cognito. <a href=\"https://twitter.com/hashtag/reinvent?src=hash&amp;ref_src=twsrc%5Etfw\">#reinvent</a> <a href=\"https://twitter.com/hashtag/ifm?src=hash&amp;ref_src=twsrc%5Etfw\">#ifm</a> <a href=\"https://twitter.com/eistrati?ref_src=twsrc%5Etfw\">@eistrati</a></p>&mdash; Luke Thompson (@luketn) <a href=\"https://twitter.com/luketn/status/651885406015746048?ref_src=twsrc%5Etfw\">October 7, 2015</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<div class=\"padd25px\">\n    <div class=\"center img-description\">Nice serverless app demo: Angular UI served from S3; Microservices with API gateway, Lambda, and Cognito</div>\n</div>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">&quot;microservices are game changers&quot; <a href=\"https://twitter.com/eistrati?ref_src=twsrc%5Etfw\">@eistrati</a> , Mitoc Group , <a href=\"https://twitter.com/hashtag/reInvent?src=hash&amp;ref_src=twsrc%5Etfw\">#reInvent</a></p>&mdash; Michael Warrilow (@micwarg) <a href=\"https://twitter.com/micwarg/status/651886347624579073?ref_src=twsrc%5Etfw\">October 7, 2015</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<div class=\"padd25px\">\n    <div class=\"center img-description\">Microservices are game changers</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">And some feedback that we have received by email, and we’d like to share with everybody, because it really inspires us to move forward:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>I attended your session today on Microservices. Brilliant. Very inspiring to the companies like [company’s name] who are into Application Development business. Looking forward to see more sessions like this. Demo of Deepify was killer :)</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">We are looking forward to continue investing in technology solutions on AWS. And we are looking forward to help customers improving their digital platforms on AWS. But the most important at this point, we would like to thank everybody who tirelessly put a lot of effort and energy to make this conference happen. You guys are the real heroes here, so Thank You!</p>"},"how-to-create-serverless-environments-on-aws":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 5 October 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-10-05/without-servers.png","Title":"7 Steps to Create Serverless Environments on AWS","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-10-05/without-servers.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Microservices without the Servers:\n      <a href=\"https://aws.amazon.com/blogs/compute/microservices-without-the-servers/\">https://aws.amazon.com/blogs/compute/microservices-without-the-servers/</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://aws.amazon.com/\">Amazon Web Services</a> is couple of days away from its fourth edition of <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent</a>. We are getting ready to fly to Las Vegas and present the breakout session A<a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=1646&tclass=popup\">RC201 — Microservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB</a>. Minutes away from departure, we are working out the final improvements that have been turned into short videos. Next, we’d like to share with technical teams how to create serverless environments on AWS, in 7 simple steps that would take up to 10 minutes.</p>\n<p class=\"graf graf-up margin-bottom-25\">First step is to create an AWS IAM role that will enable your account to make calls from AWS Lambda to Amazon DynamoDB:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/KKp4G7ELE80\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Second step is to create an Amazon S3 bucket that will store the front end code and serve it securely to Amazon CloudFront:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/W_X6xb2ZZHA\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Third step is to create Amazon CloudFront distribution that will distribute globally the front end code and other static assets:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/1IKAHayNGPI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Fourth step is to create AWS Lambda function that will provide back end code, depending on the use case:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/dIaCmFu1BfI\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Fifth step is to create Amazon API Gateway endpoint that will expose AWS Lambda functions externally as a RESTful API:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/aX2-nzlelP4\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Sixth step is to enable CORS (Cross-Origin Resource Sharing) in Amazon API Gateway:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/NwNsTIF9W_Y\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Seventh step, and final one, is to create Amazon DynamoDB table that will store consistently the data:</p>\n<div class=\"iframe-container\">\n  <iframe width=\"680\" height=\"510\" src=\"https://www.youtube.com/embed/7ciIrFC_hP8\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">I hope these 7 simple steps will make it easier to get started with serverless environments on AWS. If you’d like to learn more, take a look at this awesome blog post published recently by AWS Lambda team: <a href=\"https://aws.amazon.com/blogs/compute/microservices-without-the-servers/\">https://aws.amazon.com/blogs/compute/microservices-without-the-servers/</a></p>"},"press-release-digital-enterprise-end-to-end-platform":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Thu, 8 October 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-10-08/platform.png","Title":"Press Release: Digital Enterprise End-to-end Platform","Intro":"","minRead":"~ 2 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">Today, during the AWS re:Invent breakout session <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=1646&tclass=popup\">ARC201 — Microservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB</a>, Mitoc Group Inc is announcing the Platform-as-a-Service offering on AWS called Digital Enterprise End-to-end Platform (also known as DEEP).</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-10-08/platform.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Digital Enterprise End-to-end Platform</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Digital Platforms are by nature resource intensive, expensive to build, and difficult to manage at scale. What if we can change this perception and help AWS customers architect their digital platforms that are fast, secure, low cost and easy to maintain? As a recognized AWS Technology Partner, we have been solving these problems for our customers for a while and have been invited to speak at AWS re:Invent 2015.</p>\n<p class=\"graf graf-up margin-bottom-25\">DEEP is low cost and low maintenance Platform-as-a-Service powered by abstracted services (also known as serverless environments) from AWS. This platform enables businesses and developers to achieve more by doing less. And DEEP is enforcing security by design, where end users have the flexibility to choose role-based access without having developers to write security specific code.</p>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Marketplace <a href=\"www.deep.mg\">www.deep.mg</a> is Software-as-a-Service, built on top of DEEP, that empowers customers to choose functionality from listed microservices and deploy them together as an web app into their own AWS accounts with just few clicks; as well as empowers developers to create and publish their microservices and monetize them in similar approach to Apple’s App Store.</p>\n<p class=\"graf graf-up margin-bottom-25\">Eugene Istrati, the CTO of Mitoc Group, said:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>Our long term strategy is to save customers money, time and effort. We’d like to streamline their software development capabilities and empower enterprise customers, especially non technical people, to solve business problems through technology. Think of us as Apple’s App Store for enterprise applications. Does average consumer knows the technical details of what Apple is doing to make iOS modern, beautiful, secure and low-cost? I don’t think so. Customers just install the apps on their mobile devices and consume: click, tap, slide, etc, etc. It feels so natural to have no long-term commitments, no big upfront investments, no penalties for removing the applications, and so on.</em></p>\n  <p class=\"graf graf-up margin-bottom-25\"><em>So that’s what we do: We are building the same user experience that empowers enterprise customers to choose functionality for their applications from an existing marketplace and deploy them together into their own AWS accounts with just few clicks. On the other side, we empower developers and partners to create and publish their applications into the marketplace and monetize them in a similar approach to Apple’s App Store.</em></p>\n</blockquote>\n<div class=\"padd25px\">\n    <img class=\"img-center\" src=\"/images/blog/2015-10-08/mitoc.png\" alt=\"mitoc\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Note to Editors:</strong> Mitoc Group is a web development studio that focuses on enterprise applications and platforms. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world.</p>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Media Inquires:</strong> Press information is available by emailing <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com</a></p>"},"interview-creators-of-the-deep-framework":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 16 December 2015 12:20:55 -0400","Thumbnail":"/images/blog/2015-12-16/interview.png","Title":"Interview: Creators of The DEEP Framework","Intro":"Learn About The DEEP Framework Right From Its Creators","minRead":"~ 6 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">Original article was posted on <a href=\"https://serverlesscode.com/post/deep-framework-developer-interview/\">https://serverlesscode.com/post/deep-framework-developer-interview/</a></p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2015-12-16/interview.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">If you want to write web applications in AWS Lambda, there are actually quite a few options out there. There’s the <a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework</a>, <a href=\"http://serverless.com/\">Serverless</a> (formerly JAWS), <a href=\"https://github.com/braahyan/PAWS\">PAWS</a>, and <a href=\"https://github.com/mweagle/Sparta\">Sparta</a>. There are likely more that I’m omitting — holler on Twitter <a href=\"https://twitter.com/ryan_sb\">@ryan_sb</a> if you know of one.</p>\n<p class=\"graf graf-up margin-bottom-25\">Today, we’ll hear from the creators of the DEEP Framework about its origins, what it’s great at, and how to start using it. The big driver for the Mitoc Group behind going serverless was to reduce ongoing maintenance. What better way to maintain fewer servers by not having them?</p>\n<p class=\"graf graf-up margin-bottom-25\">Not only is there the DEEP Framework itself, but there’s also a “microapp” store at <a href=\"www.deep.mg\">www.deep.mg</a> where developers can buy and sell small pieces of functionality, like a shopping cart or recommendation engine. It’s still early days for their marketplace, but in the future it could enable developers to build full applications with relatively little code.</p>\n<h3>The Interview</h3>\n<h4>Q: Tell me a little about the DEEP framework, what problem is it solving?</h4>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/MitocGroup/deep-framework\">DEEP</a> is a serverless web framework that abstracts web applications and web services from specific cloud providers. This framework enables developers build cloud-native applications or platforms using microservices architecture in a completely serverless approach. We aim to help enterprise software and enterprise organizations to build web applications or web services that can be used across cloud providers, enabling the customers to choose between Amazon Web Services, or Google Cloud Platform, or Microsoft Azure, or others, without having developers to rewrite the code.</p>\n<h4>Q: I see that there’s an app store for DEEP modules, can you give me any information about how many vendors are making things available through the app store? How many people are getting modules via the app store?</h4>\n<p class=\"graf graf-up margin-bottom-25\">The DEEP Marketplace is a public app store built on top of the DEEP Framework, that empowers customers to choose functionality from listed microservices/microapplications and deploy them together as an web app into their own cloud provider accounts with just few clicks; as well as empowering developers to create and publish their microservices/microapplications and monetize them in similar approach to Apple’s App Store. <a href=\"www.deep.mg\">www.deep.mg</a> is currently in private beta, so it’s still very early to talk about it. But, it’s not a secret and to address your curiosity, we have 16 developers publishing microservices/microapplications and 3 customers using them in production.</p>\n<h4>Q: Can you talk about the design of the DEEP framework at a high level? What are the different components?</h4>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Framework is a collection of JavaScript libraries that can be used either in front-end or back-end, depends on the use case. Every library abstracts certain component of an web application or a cloud provider service. They are published through npmjs.com and documented on <a href=\"docs.deep.mg\">docs.deep.mg</a>. The full list of libraries and some details can be found in the <a href=\"https://github.com/MitocGroup/deep-framework#what-is-deep-framework-\">README</a>.</p>\n<h4>Q: Other than Lambda, what other technologies is the DEEP using? This includes frontend, mobile, databases, whatever you can share.</h4>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Framework was built originally on AWS, but we want and hope to extend support using other cloud providers like Google Cloud Platform or Microsoft Azure. In AWS context, we are using the following services:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Security — IAM and Cognito</li>\n<li>Frontend — S3 and CloudFront</li>\n<li>Backend — Lambda, API Gateway and SNS</li>\n<li>Database — DynamoDB</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Our <a href=\"https://github.com/MitocGroup/deep-framework#roadmap\">roadmap</a> includes adding support for services like CloudSearch and Elasticsearch, SQS and Kinesis, VPC and Elasticache.</p>\n<h4>Q: How large is the DEEP team? Did any/all of them have experience with Lambda and Node.js already, or were they coming from other areas of expertise?</h4>\n<p class=\"graf graf-up margin-bottom-25\">The team that works on DEEP project is pretty small (less than 10 developers). Except <a href=\"https://github.com/eistrati\">@eistrati</a>, nobody had prior experience with AWS. It’s a long story, and to make it short, core members of the team worked together on other projects that turned out to be 80%+ of our time support and maintenance. So we forced ourselves into a serverless approach and learned on the fly everything else required to get the job done.</p>\n<h4>Q: What do you recommend for monitoring with DEEP applications? Is CloudWatch your go-to, or are there other tools you use in addition?</h4>\n<p class=\"graf graf-up margin-bottom-25\">At the beginning, CloudWatch was our go-to monitoring tool, but it’s very limited in showing the full picture, especially in realtime. We are using an <a href=\"https://www.elastic.co/webinars/introduction-elk-stack\">ELK</a>(Elasticsearch + Logstash + Kibana) stack hacked together to solve our measuring and monitoring needs. Now we’re working to transform that solution into a component that any web application or web platform could use, if it’s built with DEEP Framework.</p>\n<h4>Q: How does the DEEP framework expect a production pipeline to look? Do you expect users to be developing on their “production” account and managing changes with versioning/aliases?</h4>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Framework, DEEP Marketplace, and DEEP CLI (aka deepify) are components of a bigger Platform-as-a-Service that we call <a href=\"https://github.com/MitocGroup/deep-framework#appendix-b-deep-ecosystem\">Digital Enterprise End-to-end Platform</a> (aka DEEP).</p>\n<p class=\"graf graf-up margin-bottom-25\">Production pipeline in context of DEEP Framework + DEEP CLI is focused on developers and makes it easier for them to build, test and deploy serverless applications. For example:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><em>deepify server</em> — simulates the entire stack on localhost and helps developers build and test their microservice(s)/microapplication(s) without any need of cloud provider accounts (e.g. AWS accounts)</li>\n<li><em>deepify deploy</em> — deploys the microservice(s)/microapplication(s) on cloud provider account, into specific environment (e.g. prod, stage, test, dev, etc)</li>\n<li>Enjoy the web application!</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Production pipeline in context of DEEP Framework + DEEP Marketplace is focused on customers, allowing them to search for functionality in UI (no need for technical expertise) and deploy everything in their own cloud provider accounts as an web application. For example:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Search/select wanted functionality (or compatible functionalities) and add it (or them) to shopping cart</li>\n<li>Go to checkout page, provide credit card (pay for licensing the code) and provide cloud provider account credentials (point where the code will be loaded)</li>\n<li>Enjoy the web application!</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">In both cases, DEEP ecosystem manages (and encourages, but doesn’t enforce) environments/versioning/aliases for the users (developers or customers). Where appropriate, we ask for confirmations from users and apply changes to existing stacks. At some point in near future, we’d like to build a process that is very close to blue-green deployments.</p>\n<h4>Q: Was there anything that surprised you along the way? Were certain tasks easier or harder than you’d expected?</h4>\n<p class=\"graf graf-up margin-bottom-25\">Well, this is a tricky question. Since almost everything for us was new, we had lots of questions and misperceptions on certain things, but with help and support from the community and AWS, every task that was hard at the beginning turned up easy at the end. The biggest surprise was to be spotted by AWS Lambda team and invited to speak at AWS re:Invent 2015, the breakout session called “Microservices Architecture for Digital Platforms with AWS Lambda, Amazon CloudFront and Amazon DynamoDB”.</p>\n<h4>Q: Are there any tools or libraries you’ve used to build DEEP, or that you use alongside DEEP that you want people to know about?</h4>\n<p class=\"graf graf-up margin-bottom-25\">DEEP Framework is open source project, built on top of <strong>tons</strong> of other open source projects from Github. I’ll try to briefly mention some of them (and apologies in advance if I miss anything):</p>\n<ul class=\"graf graf--li graf-grap\">\n<li><a href=\"https://github.com/aws/aws-sdk-js\">aws/aws-sdk-js</a></li>\n<li><a href=\"https://github.com/getsentry/raven-node\">getsentry/raven-node</a></li>\n<li><a href=\"https://github.com/hapijs/joi\">hapijs/joi</a></li>\n<li><a href=\"https://github.com/ryanfitz/vogels\">ryanfitz/vogels</a></li>\n<li><a href=\"https://github.com/RiptideElements/s3fs\">RiptideElements/s3fs</a></li>\n<li><a href=\"https://github.com/luin/ioredis\">luin/ioredis</a></li>\n<li><a href=\"https://github.com/marcuswestin/store.js\">marcuswestin/store.js</a></li>\n<li><a href=\"https://github.com/young-steveo/bottlejs\">young-steveo/bottlejs</a></li>\n<li><a href=\"https://github.com/nylen/wait-until\">nylen/wait-until</a></li>\n<li><a href=\"https://github.com/visionmedia/superagent\">visionmedia/superagent</a></li>\n<li><a href=\"https://github.com/IonicaBizau/node-parse-url\">IonicaBizau/node-parse-url</a></li>\n<li><a href=\"https://github.com/sindresorhus/query-string\">sindresorhus/query-string</a></li>\n</ul>\n<h4>Q: How would someone start with the DEEP framework, do you have a quickstart guide for people to try?</h4>\n<p class=\"graf graf-up margin-bottom-25\">Yes, we have published couple of examples on how to start building and deploying applications with DEEP Framework + DEEP CLI. There’s a <a href=\"https://github.com/MitocGroup/deep-microservices-helloworld\">hello world app</a> and a <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app\">todo app</a> inspired by <a href=\"http://todomvc.com/\">todomvc.com</a>.</p>\n<h3>Wrapping Up</h3>\n<p class=\"graf graf-up margin-bottom-25\">Thanks so much to the DEEP team for agreeing to be interviewed. In addition to all that, the team has <a href=\"http://www.slideshare.net/mitocgroup/microservices-architecture-for-digital-platforms-using-serverless-aws\">presented at the AWS Loft</a> and posted an article (which you’ve already seen if you subscribe to my <a href=\"https://serverlesscode.com/mail/\">mailing list</a>), <a href=\"https://medium.com/@MitocGroup/how-to-create-serverless-environments-on-aws-8485ae039765\">7 Steps to Create Serverless Environments on AWS</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">As always, if you have an idea, question, or comment, hit me on Twitter <a href=\"https://twitter.com/ryan_sb\">@ryan_sb</a> or email me at <a href=\"mailto:lambda@ryansb.com\">lambda@ryansb.com</a>.</p>"},"building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 12 February 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-02-12/coder.png","Title":"Building Scalable Web Apps with AWS Lambda and Home-Grown Serverless Web Framework","Intro":"","minRead":"~ 9 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2016-02-12/coder.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Development of Enterprise Software @ Mitoc Group</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">There is a growing demand for enterprise software solutions that are easy to build and quick to deploy. Cloud Computing has emerged as one of the most viable routes for enterprise software delivery and, in our experience, Amazon Web Services is leading the charge. In this article, we will describe how we combined [1] Serverless Infrastructure from AWS with [2] Microservices Architecture to build and deploy a worry-free enterprise software marketplace we’re calling the <a href=\"https://www.deep.mg/\">DEEP Marketplace</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\"><em>Note: We will assume that you have general knowledge about below 2 concepts (or read suggested articles in parenthesis to learn more)</em></p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><em>Serverless Computing (learn more — Microservices without the Servers)</em></li>\n<li><em>Microservices Architecture (learn more — Microservices by Martin Fowler)</em></li>\n</ol>\n<h3>The Problem</h3>\n<p class=\"graf graf-up margin-bottom-25\">Enterprise software is <a href=\"http://www.mycustomer.com/selling/crm/enterprise-software-sucks-says-ceo-of-enterprise-software-firm-infor\">not attractive</a> because traditionally it’s slow, architecturally monolithic and cumbersome to operate. Enterprise IT organizations are commonly overwhelmed by the technology they maintain and there aren’t enough hours in a day to address the backlog of work. That’s why the process of buying typical enterprise solution that solves a given business problem must include an evaluation of how easily it can be customized for specific use case along with a thorough understanding of the ongoing costs of day-to-day operations. That’s why savvy enterprise technology teams are constantly seeking software that empowers business users to be self-sufficient through self-service.</p>\n<h3>The Solution</h3>\n<p class=\"graf graf-up margin-bottom-25\">At <a href=\"https://www.mitocgroup.com/\">Mitoc Group</a>, we believe that the most sustainable solution to enterprise software challenges is a marketplace of small pieces of functionality. Customers, especially non-technical users, can go to the marketplace, search for the functionality that they need, drag selected components into their shopping cart and push a button that will create a custom web application in their AWS account. This is similar to Lego Store, where customers buy lego pieces to build customized solutions at their will or pick from existing pre-packaged offers.</p>\n<h3>Building a Sample Application</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this post, we leverage open source software, while maintaining compliance with enterprise requirements. The sample application is a simple task management application, aka todo app, inspired by <a href=\"http://www.todomvc.com/\">www.todomvc.com</a> and accessible at <a href=\"http://todo.deep.mg/\">todo.deep.mg</a>. We will walk through the codebase and show how to build and deploy it as a scalable, yet serverless, custom web application.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2016-02-12/serverless.png\" alt=\"serverless microservices\" />\n    <div class=\"center img-description\">Serverless microservices at core of www.deep.mg</div>\n</div>\n<h3>Architecture</h3>\n<p class=\"graf graf-up margin-bottom-25\">The architecture that we have been using for over six months now can be summarized as follows:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Security: <a href=\"https://aws.amazon.com/iam/\">AWS IAM</a> &amp; <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a></li>\n<li>Frontend: <a href=\"https://aws.amazon.com/s3/\">Amazon S3</a> &amp; <a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a></li>\n<li>Backend: <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> &amp; <a href=\"https://aws.amazon.com/api-gateway/\">Amazon API Gateway</a></li>\n<li>Database: <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>, <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS</a> &amp; <a href=\"https://aws.amazon.com/elasticache/\">Amazon ElastiCache</a></li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">The backbone of our approach is known as serverless microservices. We use AWS Lambda as our core computing service. Security by design is enforced by AWS IAM and we cache as much as possible, in every layer, to improve the performance and reduce the costs of running the web application.</p>\n<p class=\"graf graf-up margin-bottom-25\">Amazon S3 is only capable of serving static assets so we must rely on browser-based JavaScript to provide dynamic functionality. Our team selected <a href=\"https://angularjs.org/\">AngularJS</a> as frontend framework, but you can use any other JavaScript framework that you’re most comfortable with.</p>\n<p class=\"graf graf-up margin-bottom-25\">We developed <a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework</a> — a home-grown and open-source serverless web framework — and supporting <a href=\"https://www.npmjs.com/package/deepify\">DEEP CLI</a> — the development tool-chain — that has evolved through real-world use to increase our agility by:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Streamlined local development</li>\n<li>Abstracted use of cloud services</li>\n<li>Automated allocation of infrastructure resources</li>\n<li>Zero devops and out-of-the-box scalability</li>\n</ul>\n<h4>So, let’s get started…</h4>\n<p class=\"graf graf-up margin-bottom-25\">You will need the following pre-requisites:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>AWS Account (learn how to <a href=\"https://www.youtube.com/watch?v=WviHsoz8yHk\">Create an Amazon Web Services Account</a>)</li>\n<li>AWS CLI (learn how to <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\">Configure AWS Command Line Interface</a>)</li>\n<li>Node.js (learn how to <a href=\"http://howtonode.org/how-to-install-nodejs\">Install Node.js</a>)</li>\n<li>DEEP CLI (execute in command line: <em>npm install deepify</em>)</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Next, deploy the todo app using the DEEP CLI:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><em>deepify install https://github.com/MitocGroup/deep-microservices-todo-app.git ~/deep-todo-app</em></li>\n<li><em>deepify server ~/deep-todo-app</em></li>\n<li><em>deepify deploy ~/deep-todo-app</em></li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\"><em>Note: When step 2 (deepify server) is finished, you can open in your browser <a href=\"http://localhost:8000\">http://localhost:8000</a> and enjoy the todo app running locally.</em></p>\n<p class=\"graf graf-up margin-bottom-25\">We use a <a href=\"https://en.wikipedia.org/wiki/Service-oriented_architecture\">Services Oriented Architecture</a>. Every frontend interaction is powered by a backend service that talks to a data tier. The web application is a collection of web components (we call them microapplications). Every web component consists of a frontend, backend, database, security, tests and docs. And every microapplication manages the entire technology stack, starting with infrastructure services, going up to platform services and concluding with application services, everything packaged as a well-structured codebase.</p>\n<p class=\"graf graf-up margin-bottom-25\"><em>Note: Docs and tests are very important components of every microapplication, but we decided to leave them out of scope for this article.</em></p>\n<p class=\"graf graf-up margin-bottom-25\">Let’s dive into the details of every tier next…</p>\n<h4>Building Frontend</h4>\n<p class=\"graf graf-up margin-bottom-25\">The structure of our frontend is concentrated into: <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Frontend/bootstrap.js\">bootstrap.js</a>, <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Frontend/package.json\">package.json</a> and <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/tree/master/src/DeepNgToDo/Frontend/js/\">js/</a>.</p>\n<pre><code class=\"js language-js\">/* global System */\n'use strict';\n'format es6';\n\nexport default function todo() {\n  var deepAsset = DeepFramework.Kernel.container.get('asset');\n  return System.import(deepAsset.locate('@deep.todo:js/app/angular/index.js'));\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">bootstrap.js — the bootstrap file used by frontend as execution’s entry point</div>\n</div>\n<pre><code class=\"json language-json\">{\n  \"private\": true,\n  \"dependencies\": {\n    \"todomvc-app-css\": \"^2.0.0\",\n    \"todomvc-common\": \"^1.0.1\",\n    \"underscore\": \"^1.7.0\"\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">package.json — the metadata file used by deepify to resolve dependencies and automate the deployment</div>\n</div>\n<pre><code class=\"js language-js\">js/\n  app/\n    angular/\n      controllers/\n        DeepTodoController.js\n        index.js\n      directives/\n        index.js\n        taskEscape.js\n        taskFocus.js\n      module/\n        index.js\n        ng-config.js\n        ng-module.js\n        ng-routes.js\n      services/\n        DeepTodoService.js\n        index.js\n      views/\n        layout.html\n        todo.html\n      index.js\n      name.js\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">js/ — the folder that contains application code / AngularJS in our case</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">As was mentioned earlier in this post, this todo app was inspired by <a href=\"http://www.todomvc.com/\">www.todomvc.com</a>. In practice, it means that we took <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/angularjs\">the sample code from GitHub</a> and <a href=\"https://github.com/MitocGroup/deep-microservices-helloworld\">ported using Hello World as reference</a>. Reusing code allows us to be both consistent and fast.</p>\n<p class=\"graf graf-up margin-bottom-25\">Microservices architecture can be challenging sometimes. We found very useful the process of building a feature or a service first, and then break it down into microservices. Using this approach on todo app helped us take the code as it was, replace <a href=\"https://angularjs.org/\">AngularJS</a> and <a href=\"https://github.com/angular-ui/ui-router\">AngularUI Router</a> modules with <a href=\"https://github.com/MitocGroup/deep-microservices-root-angularjs\">DEEP Microservices Root AngularJS</a>, and transform the storage service using resource library from DEEP Framework.</p>\n<h4>Building Backend</h4>\n<p class=\"graf graf-up margin-bottom-25\">The structure of our backend is reduced to: <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Backend/resources.json\">resources.json</a> and <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/tree/master/src/DeepNgToDo/Backend/src/\">src/</a>.</p>\n<pre><code class=\"json language-json\">{\n  \"task\": {\n    \"create\": {\n      \"description\": \"Lambda that creates todo task\",\n      \"type\": \"lambda\",\n      \"methods\": [\"POST\"],\n      \"source\": \"src/Task/Create\"\n    },\n    \"retrieve\": {\n      \"description\": \"Lambda that retrieves todo task\",\n      \"type\": \"lambda\",\n      \"methods\": [\"GET\"],\n      \"source\": \"src/Task/Retrieve\"\n    },\n    \"delete\": {\n      \"description\": \"Lambda that deletes todo task\",\n      \"type\": \"lambda\",\n      \"methods\": [\"DELETE\"],\n      \"source\": \"src/Task/Delete\"\n    },\n    \"update\": {\n      \"description\": \"Lambda that updates todo task\",\n      \"type\": \"lambda\",\n      \"methods\": [\"PUT\"],\n      \"source\": \"src/Task/Update\"\n    }\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">resources.json — the resources file used by deepify to map and deploy each microservice’s codebase</div>\n</div>\n<pre><code class=\"js language-js\">src/\n  Task/\n    Create/\n      Handler.es6\n      bootstrap.es6\n      package.json\n    Delete/\n      Handler.es6\n      bootstrap.es6\n      package.json\n    Retrieve/\n      Handler.es6\n      bootstrap.es6\n      package.json\n    Update/\n      Handler.es6\n      bootstrap.es6\n      package.json\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">src/ — the folder that contains microservices code / Node.js in our case</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">When the UI and UX were defined, building the web services to support this frontend were intuitively easy. We are using RESTful APIs that provide CRUD (aka Create-Retrieve-Update-Delete) operations for each logically independent entity. In our case the entity is the todo task, and our todo app is supposed to offer functionality to create tasks, retrieve them, update or delete.</p>\n<p class=\"graf graf-up margin-bottom-25\">Each web service we use is very small, completely independent, highly decoupled, focused on context bounded one task, communicating through language-agnostic API. This is the very definition of a microservice, which we adopted by choice and by necessity. And this is where AWS Lambda excels!</p>\n<p class=\"graf graf-up margin-bottom-25\">Next, we will describe the structure of the “Create Todo” microservice that we deploy on AWS Lambda (the other microservices in this todo app are structured pretty much the same): <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Backend/src/Todo/Create/bootstrap.es6\">bootstrap.es6</a>, <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Backend/src/Todo/Create/package.json\">package.json</a> and <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Backend/src/Todo/Create/Handler.es6\">Handler.es6</a>.</p>\n<pre><code>'use strict';\n\nimport DeepFramework from 'deep-framework';\nimport Handler from './Handler';\n\nexport default DeepFramework.LambdaHandler(Handler);\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">bootstrap.es6 — the bootstrap file used by backend as execution’s entry point</div>\n</div>\n<pre><code class=\"json language-json\">{\n  \"name\": \"deep-todo-task-create\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Create a new todo task\",\n  \"scripts\": {\n    \"postinstall\": \"npm run compile\",\n    \"compile\": \"deepify compile-es6 `pwd`\"\n  },\n  \"dependencies\": {\n    \"deep-framework\": \"^1.8.x\"\n  },\n  \"preferGlobal\": false,\n  \"private\": true,\n  \"analyze\": true\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">package.json — the metadata file used by deepify to resolve dependencies and automate the deployment</div>\n</div>\n<pre><code>'use strict';\n\nimport DeepFramework from 'deep-framework';\n\nexport default class extends DeepFramework.Core.AWS.Lambda.Runtime {\n  constructor(...args) {\n    super(...args);\n  }\n\n  handle(request) {\n    let TodoModel = this.kernel.get('db').get('Todo');\n    TodoModel.createItem(request.data, (err, todo) =&gt; {\n      if (err) {\n        throw new DeepFramework.Core.Exception.DatabaseOperationException(err);\n      }\n      return this.createResponse(todo.get()).send();\n    });\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">Handler.es6 — the actual microservice that creates the record in the Todo table</div>\n</div>\n<h4>Building Database</h4>\n<p class=\"graf graf-up margin-bottom-25\">The structure of our database model is trivial, just one file: <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/Data/Models/Todo.json\">Todo.json</a>.</p>\n<pre><code class=\"json language-json\">{\n  \"Title\": \"string\",\n  \"Completed\": \"boolean\"\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">Todo.json — the schema file that defines the table name and the primary key / everything else is optional</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Since we’re using a NoSQL database like Amazon DynamoDB, the only piece of information that the database library from DEEP Framework cares about is the table name and the primary key. Everything else is handled by the library itself, as long as it’s in json format.</p>\n<h4>Enforcing Security</h4>\n<p class=\"graf graf-up margin-bottom-25\">The beauty of cloud-native approach is that security comes by design. When we deploy todo app, <em>deepify</em> automatically identifies the web services involved in the process and creates corresponding security roles. On backend and database tiers these roles are transposed into AWS IAM roles, while on frontend tier we automatically compile them and expose in the UI as Access Control Lists (also known as ACLs). Let’s see some examples:</p>\n<pre><code class=\"json language-json\">{\n  \"Version\": \"2015-10-07\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"deep.todo:task:create\"],\n      \"Resource\": [\"deep.todo:task\"]\n    }\n  ]\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">DEEP role to allow Task Create execution / deep.todo — microapplication ID</div>\n</div>\n<pre><code class=\"json language-json\">{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"lambda:InvokeFunction\"],\n            \"Resource\": [\"arn:aws:lambda:us-east-1:123456789000:function:DeepProdTodoCreate1234abcd*\"]\n        }\n    ]\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">IAM role to allow Lambda invocation / 123456789000 — AWS account number / abcd1234 — deepify deploy ID</div>\n</div>\n<h4>Putting Everything Together</h4>\n<p class=\"graf graf-up margin-bottom-25\">Now that we’re done with frontend, backend, database and security, it’s time to glue everything together and put all web components into action:</p>\n<pre><code class=\"js language-js\">DeepTodo/\n  Backend/\n  Data/\n  Docs/\n  Frontend/\n  Tests/\n  deepkg.json\n  hook.init.js\n  parameters.json\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">DeepNgTodo — the structure of our todo app</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">There are two more components in the root path of the microapplication that are critical: <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/deepkg.json\">deepkg.json</a> and <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app/blob/master/src/DeepNgToDo/parameters.json\">parameters.json</a>. Similar to Node Package Manager (also know as <em>npm</em>), our command line tool DEEP CLI (also known as <em>deepify</em>) is looking for metadata (in this case — deepkg.json) and configuration (in this case — parameters.json) files. Additionally, <em>deepify</em> can be enriched with hooks (in this case — hook.init.js) that allow flexibility and customization of the deployment process:</p>\n<pre><code class=\"json language-json\">{\n  \"identifier\": \"deep.todo\",\n  \"name\": \"DeepTodo\",\n  \"description\": \"DeepTodo Microapplication\",\n  \"version\": \"0.0.1\",\n  \"propertyRoot\": false,\n  \"author\": {\n    \"name\": \"Mitoc Group\",\n    \"email\": \"hello@mitocgroup.com\",\n    \"website\": \"http://www.mitocgroup.com\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"DEEP Team\",\n      \"email\": \"hello@deep.mg\",\n      \"website\": \"https://www.deep.mg\"\n    }\n  ],\n  \"frontendEngine\": [\"angular\"],\n  \"dependencies\": {\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">deepkg.json — the metadata file used by deepify to resolve dependencies and automate the deployment</div>\n</div>\n<pre><code class=\"json language-json\">{\n  \"frontend\": {},\n  \"backend\": {}\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">parameters.json — the parameters file that allows configuration and customization of microapplications</div>\n</div>\n<pre><code class=\"js language-js\">'use strict';\n\nvar exports = module.exports = function(callback) {\n  var exec = require(\"child_process\").exec;\n  var path = require('path');\n  var source = path.join(__dirname, 'Frontend/learn.json');\n  var dist = path.join(__dirname, '../DeepNgRoot/Frontend');\n\n  exec('cp ' + source + ' ' + dist, function(error, stdout, stderr) {\n    if (error) {\n      console.error('Error while copying learn.json', error);\n      callback();\n      return;\n    }\n    console.log('learn.json was successfully copied into DeepNgRoot');\n    callback();\n  })\n};\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">hook.init.js — the hook file that executes at deploy init / copies learn.json file into root microapplication</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Hopefully the deployment execution that was described in <em>Getting Started</em> section is done by now. If everything went well, you will see 2 URLs in the last rows of the terminal’s output window: S3 Website Endpoint and CloudFront Distribution. Open in the browser any of the URLs and you’ll see the todo app running in your own AWS account.</p>\n<p class=\"graf graf-up margin-bottom-25\"><em>Note: The distribution takes up to 20 minutes to provision, therefore don’t worry if it returns an HTTP error in the first couple of minutes.</em></p>\n<p class=\"graf graf-up margin-bottom-25\">Below video playlist summarizes the steps that we’ve walked you through:</p>\n<div class=\"iframe-container\">\n  <iframe src=\"https://www.youtube.com/embed/ghZNn5Gjv90?list=PLPGfD-tGOl7uNDXo_eMN1odMZflYVu2n9\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<h3>Scalability Benchmarking</h3>\n<p class=\"graf graf-up margin-bottom-25\">Even though SPAs (aka Single-Page Applications) are <a href=\"http://www.soasta.com/blog/angularjs-real-user-monitoring-single-page-applications\">challenging to monitor and benchmark</a>, we have load tested the todo app in order to associate some numbers to how big it can scale using out-of-the-box configurations. We found that standard setup gives us acceptable response time (within 2 seconds) for up to 10,000 concurrent users per second, at “my Starbucks coffee costs more” price tag:</p>\n<table class=\"table\">\n<thead>\n<tr class=\"graf graf--li graf-grap\">\n<th>Concurrency (in users/sec)</th>\n<th>Capacity Peak (in reads/sec)</th>\n<th>Average Response (in ms)</th>\n<th>Total Requests (in 1min)</th>\n<th>Average Cost (in $/min)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">100</td>\n<td class=\"center\">14</td>\n<td class=\"center\">529</td>\n<td class=\"center\">5,984</td>\n<td class=\"center\">$0.000013</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1,000</td>\n<td class=\"center\">18</td>\n<td class=\"center\">1,003</td>\n<td class=\"center\">59,446</td>\n<td class=\"center\">$0.000141</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">5,000</td>\n<td class=\"center\">12</td>\n<td class=\"center\">1,724</td>\n<td class=\"center\">219,027</td>\n<td class=\"center\">$0.000825</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">10,000</td>\n<td class=\"center\">17</td>\n<td class=\"center\">2,152</td>\n<td class=\"center\">274,518</td>\n<td class=\"center\">$0.001898</td>\n</tr>\n</tbody>\n</table>\n<p class=\"graf graf-up margin-bottom-25\"><em>Note: These numbers can be improved with additional complexity and features that are beyond the scope of this article</em></p>\n<h3>Key Takeaways</h3>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>The sample web application described in this article is a simple example of how we are building and deploying enterprise software using serverless microservices on AWS</li>\n<li><a href=\"https://github.com/MitocGroup/deep-microservices-todo-app\">DEEP Todo App</a> is powered by DEEP Framework. It consists of 1 microapplication that interacts with 6 microservices and is resolving another microapplication as dependency</li>\n<li><a href=\"https://www.deep.mg/\">DEEP Marketplace</a> is powered by DEEP Framework. It consists of 12 microapplications that interacts with 64 microservices and is resolving several layers of dependencies across multiple microapplications</li>\n<li><a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework</a> is a serverless web framework that abstracts web apps and web services from specific cloud services, enabling developers build cloud-native applications or platforms using microservices architecture</li>\n<li>Backend’s resources are implemented in Node.js. AWS Lambda supports also Java and Python, but our process is not able yet to use them streamlined because <em>deepify</em> uses only <em>npm</em>, and doesn’t support <em>mvn</em> or <em>pip</em> yet</li>\n<li>Frontend’s structure is designed to allow developers write code using any JavaScript framework they are comfortable with. More than that, it is possible to have multiple implementations of the same UI and UX using different Javascript frameworks and storing in the same codebase. For example:</li>\n</ol>\n<ul class=\"graf graf--li graf-grap\">\n<li><em>js/app/angular — implementation of todo app using AngularJS</em></li>\n<li><em>js/app/react — implementation of todo app using React</em></li>\n<li><em>js/app/backbone — implementation of todo app using Backbone.js</em></li>\n</ul>\n<h3>Closing Thoughts</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this post, we’ve shown you how to build and deploy scalable web apps worry-free. We walked through the process of building and deploying frontend, backend, database and security of scalable web applications. You can fork the <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app\">sample code repository</a> as a starting point for your own custom web application powered by serverless microservices.</p>\n<p class=\"graf graf-up margin-bottom-25\">And if you have questions or suggestions, please don't hesitate to contact us.</p>"},"mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 26 February 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-02-26/mitoc.png","Title":"Mitoc Group featured as Frameworks Partner by AWS Lambda team","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-02-26/mitoc.png\" alt=\"Speakers\" />\n    <div class=\"center img-description\"><a href=\"https://aws.amazon.com/lambda/partners\">https://aws.amazon.com/lambda/partners</a></div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">We are very humble and honored to be featured by AWS Lambda as one of their Framework Partners. On behalf of our customers, we’d like to take this opportunity to thank AWS Lambda team for their continuous trust and support.</p>\n<p class=\"graf graf-up margin-bottom-25\">When we started this journey almost a year ago, our hopes and dreams were to conquer the world with simplified web development process, where developers focus 20% of their time on 80% of the overall software development and related operations. We were tired of the opposite, spending 80% of our time on 20% of results. And AWS Lambda played fundamental role in making it happen.</p>\n<p class=\"graf graf-up margin-bottom-25\">Fast-forward one year later, we still aim high and dream big. We are building scalable products in weeks that normally takes months. Our customers love the fact that speed, security and efficiency come out of the box. But most important aspect of our limited success is mainly due to powerful capabilities inside AWS Lambda:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Milliseconds deployment time</li>\n<li>Seconds execution time</li>\n<li>Performance and cost efficiency</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Last, but not the least, AWS Lambda empowered our team to create an enterprise software ecosystem called Digital Enterprise End-to-end Platform (shortly DEEP):</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework </a>— serverless web framework that abstracts web apps and web services from specific cloud services. This framework enables developers build cloud-native applications or platforms using microservices architecture in a completely serverless approach.</li>\n<li><a href=\"https://www.npmjs.com/package/deepify\">DEEP CLI</a> — software development tool-chain that abstracts package management and associated development operations.</li>\n<li><a href=\"https://www.deep.mg/\">DEEP Marketplace</a> — Software-as-a-Service that empowers customers to choose functionality from listed microapplications or microservices and deploy them together as a custom web app into their own AWS accounts.</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">We are very excited and looking forward to extend this relationship with AWS Lambda team. On behalf of Mitoc Group, DEEP ecosystem and our customers — Thank You!</p>"},"are-you-ready-for-stackworld-2016":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 18 April 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-04-18/speakers.png","Title":"Are you ready for StackWorld 2016?","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-04-18/speakers.png\" alt=\"Speakers\" />\n    <div class=\"center img-description\">Speakers from amazing companies like Mitoc Group, SolarCity, Puppet Labs and Red Hat</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">We are excited to announce that we’ll be presenting <a href=\"https://github.com/MitocGroup/deep-framework\">Digital Enterprise End-to-end Platform</a> at <a href=\"http://www.stackworld.com/\">StackWorld Conference 2016</a>. The session is listed in the track <code>Choosing a Cloud</code>, section <code>Amazon Cloud and Ecosystem</code> and is called <code>Building Scalable Web Applications using Microservices Architecture and Serverless Computing from AWS</code>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Quoting conference’s website:</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>Join 1,200+ Technology Executives, DevOps Engineers, and Developers June 27–28 in San Francisco for the StackWorld 2016 Conference & Expo.</em></p>\n  <p class=\"graf graf-up margin-bottom-25\"><em>Choosing your technology stack is one of the most important decisions your company will make. StackWorld is San Francisco’s largest technology conference 100% focused on helping you choose your technology stack.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">In our humble opinion, scalable applications are by nature resource intensive, expensive to build and difficult to manage. What if we can change this perception and help developers design full-stack applications that are low cost and low maintenance? This session will describe the underlying architecture behind <a href=\"http://www.deep.mg%2C/\">www.deep.mg</a>, the microservices marketplace built by Mitoc Group using AngularJS, NodeJS and powered by abstracted services like AWS Lambda, Amazon CloudFront, Amazon DynamoDB, and so on. Eugene Istrati, Technology Partner at Mitoc Group, will dive deep into our approach to microservices architecture using serverless environments from AWS and demonstrate how anyone can use serverless computing to achieve high scalability, high availability, and high performance without huge efforts or expensive resources allocation.</p>\n<p class=\"graf graf-up margin-bottom-25\">Eugene Istrati has spent over 15 years as a technologist in a variety of industries, including digital media, cloud computing, and reputation marketing. Before joining Mitoc Group as Technology Partner, Eugene worked as Director of Engineering at Hearst Corporation and Program Manager at Amazon Web Services. He holds a dual Bachelor of Science degree in Mathematics and Computer Science and a Master of Science degree in Computer Science and Engineering.</p>\n<p class=\"graf graf-up margin-bottom-25\">So, are you ready for StackWorld 2016? We hope to see you there!</p>"},"building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Thu, 14 April 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-04-14/code.png","Title":"Building Enterprise Level Web Applications on AWS Lambda with the DEEP Framework","Intro":"Original article was published at <a href=\"https://aws.amazon.com/blogs/compute/building-enterprise-level-web-applications-on-aws-lambda-with-deep/\">https://aws.amazon.com/blogs/compute/building-enterprise-level-web-applications-on-aws-lambda-with-deep/</a>","minRead":"~ 10 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-04-14/code.png\" alt=\"Speakers\" />\n</div>\n<h3>Overview</h3>\n<p class=\"graf graf-up margin-bottom-25\">Since the beginning, <a href=\"https://www.mitocgroup.com/\">Mitoc Group</a> has been building web applications for enterprise customers. We are a small group of developers who are helping customers with their entire web development process, from conception through execution and down to maintenance. Being in the business of doing everything is very hard, and it would be impossible without using AWS foundational services, but we incrementally needed more. That is why we became earlier adopters of serverless approach and developed an ecosystem called <a href=\"https://www.mitocgroup.com/partners/aws-lambda/index.html\">Digital Enterprise End-to-end Platform</a> (shortly DEEP) with AWS Lambda at core.</p>\n<p class=\"graf graf-up margin-bottom-25\">In this post, we will dive deeper into how DEEP is leveraging AWS Lambda to empower developers build cloud-native applications or platforms using microservices architecture. We will walk through the thinking process of identifying the front-end, the back-end and the data tiers required to build web applications with AWS Lambda at core. We will focus on the structure of AWS Lambda functions we use, as well as security, performance and benchmarking steps that we take to build enterprise-level web applications.</p>\n<h3>Enterprise-level Web Applications</h3>\n<p class=\"graf graf-up margin-bottom-25\">Our approach to web development is full-stack and user-driven, focused on UI (aka User Interaction) and UX (aka User eXperience). But before going into the details, we’d like to emphasize the strategical (biased and opinionated) decisions we have made early:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>We don’t say “no” to customers; Every problem is seriously evaluated and sometimes we offer options that involve our direct competitors</li>\n<li>We are developers and we focus only on the application level; Everything else (platform level and infrastructure level) must be managed by AWS</li>\n<li>We focus our 20% of effort to solve 80% of work load; Everything must be automated and pushed on the services side rather than ours (clients)</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">To be honest and fair, it doesn’t work all the time as expected, but it does help us to learn fast and move quickly, sustainably and incrementally solving business problems through technical solutions that really matters. But the definition of “really matters” is different from customer to customer, quite unique in some cases. Nevertheless, what we learn from our customers is that enterprise-level web applications must provide the following 7 common expectations:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Be secure — security through obscurity (e.g. <a href=\"https://aws.amazon.com/iam/\">Amazon IAM</a>, <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a>);</li>\n<li>Be compliant — governance-focused, audit-friendly service features with <a href=\"https://aws.amazon.com/compliance/\">applicable compliance or audit standards</a>;</li>\n<li>Be reliable — Service Level Agreements (e.g. <a href=\"https://aws.amazon.com/s3/sla/\">Amazon S3</a>, <a href=\"https://aws.amazon.com/cloudfront/sla/\">Amazon CloudFront</a>);</li>\n<li>Be performant — studies show that <a href=\"https://medium.com/@puppybits/letting-people-in-the-door-how-and-why-to-get-page-loads-under-2-seconds-340c487bd81d\">page loads longer than 2s start impacting the users behavior</a>;</li>\n<li>Be pluggable — <a href=\"https://www.gartner.com/doc/371379/best-practices-key-successful-application\">successful enterprise ecosystem</a> is mainly driven by fully integrated web applications inside organizations;</li>\n<li>Be cost-efficient — benefit of <a href=\"https://aws.amazon.com/free/\">AWS Free Tier</a>, as well as <a href=\"https://aws.amazon.com/pricing/\">pay only for services that you use and when you use them</a>;</li>\n<li>Be scalable — serverless approach relies on abstracted services that are pre-scaled to AWS size, <a href=\"http://www.techrepublic.com/article/aws-now-10x-the-size-of-its-competitors-is-the-cloud-arms-race-over/\">whatever that would be</a>.</li>\n</ol>\n<h3>Architecture</h3>\n<p class=\"graf graf-up margin-bottom-25\">This article will describe how we have transformed a self-managed task management application (aka todo app) in minutes. The original version can be seen on <a href=\"http://www.todomvc.com%2C/\">www.todomvc.com</a> and the original code can be downloaded from <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/angularjs\">https://github.com/tastejs/todomvc/tree/master/examples/angularjs</a>.\nThe architecture of every web application we build or transform, including the one described above, is similar to the reference architecture of the realtime voting application published recently by AWS on Github:</p>\n<div class=\"external-article\">\n  <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone/aws?source=post_page-----3e566ee6e73f----------------------\">\n  <h5>awslabs/lambda-refarch-webapp</h5>\n  <span>lambda-refarch-webapp — AWS Lambda Reference Architecture for creating a Web Application</span>\n    <span>github.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">The todo app is written in AngularJS and deployed on Amazon S3, behind Amazon CloudFront (the front-end tier). The tasks management is processed by AWS Lambda, optionally behind Amazon API Gateway (the back-end tier). The tasks metadata is stored in Amazon DynamoDB (the data tier). The transformed todo app, along with instructions on how to install and deploy this web application, is described in <a href=\"https://blog.mitocgroup.com/building-scalable-web-apps-with-aws-lambda-and-home-grown-serverless-web-framework-e04c912d08f0\">this blog post</a> and the code is available on Github:</p>\n<div class=\"external-article\">\n  <a href=\"https://github.com/MitocGroup/deep-microservices-todo-app?source=post_page-----dd81719b0dff----------------------\">\n  <h5>MitocGroup/deep-microservices-todomvc</h5>\n  <span>DEEP Todo App ( https://github.com/MitocGroup/deep-microservices-todomvc) is a web app inspired from AngularJS TodoMVC…</span>\n    <span>github.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this article, we will focus on AWS Lambda functions and the value proposition it offers to us and our customers.</p>\n<h3>AWS Lambda Functions</h3>\n<p class=\"graf graf-up margin-bottom-25\">Let’s get into the details of the thinking process and the AWS Lambda functions that we have written for this web app. The goal of the todo app is to manage tasks in a self-service mode. End users can view tasks, create new tasks, mark or unmark a task as done, and clear completed tasks. From UI and UX point of view, that leads us to 4 user interactions that will require 4 different back-end calls:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>web service that retrieves task(s)</li>\n<li>web service that creates task(s)</li>\n<li>web service that deletes task(s)</li>\n<li>web service that updates task(s)</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Simple reorder of the above identified back-end calls leads us to basic CRUD (Create, Retrieve, Update, Delete) operations on the Task data object. And these are the simple logical steps that we take to identify the front-end, the back-end and the data tiers of (drums beating, trumpets playing) our approach to microservices, which we prefer to call microapplications.</p>\n<p class=\"graf graf-up margin-bottom-25\">Therefore, coming back to AWS Lambda, we have written 4 small node.js functions that are context-bounded and self-sustained (each below microservice corresponds to the above identified back-end web service):</p>\n<pre><code class=\"js language-js\">'use strict';\n\nimport DeepFramework from 'deep-framework';\n\nexport default class Handler extends DeepFramework.Core.AWS.Lambda.Runtime {\n  /**\n   * @param {Array} args\n   */\n  constructor(...args) {\n    super(...args);\n  }\n\n  /**\n   * @param request\n   */\n  handle(request) {\n    let taskId = request.getParam('Id');\n\n    if (taskId) {\n      this.retrieveTask(taskId, (task) =&gt; {\n        return this.createResponse(task).send();\n      });\n    } else {\n      this.retrieveAllTasks((result) =&gt; {\n        return this.createResponse(result).send();\n      });\n    }\n  }\n\n  /**\n   * @param {Function} callback\n   */\n  retrieveAllTasks(callback) {\n    let TaskModel = this.kernel.get('db').get('Task');\n\n    TaskModel.findAll((err, task) =&gt; {\n      if (err) {\n        throw new DeepFramework.Core.Exception.DatabaseOperationException(err);\n      }\n\n      return callback(task.Items);\n    });\n  }\n\n  /**\n   * @param {String} taskId\n   * @param {Function} callback\n   */\n  retrieveTask(taskId, callback) {\n    let TaskModel = this.kernel.get('db').get('Task');\n\n    TaskModel.findOneById(taskId, (err, task) =&gt; {\n      if (err) {\n        throw new DeepFramework.Core.Exception.DatabaseOperationException(err);\n      }\n\n      return callback(task ? task.get() : null);\n    });\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">1. Microservice that Retrieves Task(s) — \n    <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/retrieve/Handler.es6\">https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/retrieve/Handler.es6</a>\n  </div>\n</div>\n<pre><code class=\"js language-js\">'use strict';\n\nimport DeepFramework from 'deep-framework';\n\nexport default class extends DeepFramework.Core.AWS.Lambda.Runtime {\n  /**\n   * @param {Array} args\n   */\n  constructor(...args) {\n    super(...args);\n  }\n\n  /**\n   * @param request\n   */\n  handle(request) {\n    let TaskModel = this.kernel.get('db').get('Task');\n\n    TaskModel.createItem(request.data, (err, task) =&gt; {\n      if (err) {\n        throw new DeepFramework.Core.Exception.DatabaseOperationException(err);\n      }\n\n      return this.createResponse(task.get()).send();\n    });\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">2. Microservice that Creates a Task — \n    <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/create/Handler.es6\">https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/create/Handler.es6</a>\n  </div>\n</div>\n<pre><code class=\"js language-js\">'use strict';\n\nimport DeepFramework from 'deep-framework';\n\nexport default class Handler extends DeepFramework.Core.AWS.Lambda.Runtime {\n  /**\n   * @param {Array} args\n   */\n  constructor(...args) {\n    super(...args);\n  }\n\n  /**\n   * @param request\n   */\n  handle(request) {\n    let taskId = request.getParam('Id');\n\n    if (typeof taskId !== 'string') {\n      throw new InvalidArgumentException(taskId, 'string');\n    }\n\n    let TaskModel = this.kernel.get('db').get('Task');\n\n    TaskModel.updateItem(taskId, request.data, (err, task) =&gt; {\n      if (err) {\n        throw new DeepFramework.Core.Exception.DatabaseOperationException(err);\n      }\n\n      return this.createResponse(task.get()).send();\n    });\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">3. Microservice that Updates a Task — \n    <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/update/Handler.es6\">https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/update/Handler.es6</a>\n  </div>\n</div>\n<pre><code class=\"js language-js\">'use strict';\n\nimport DeepFramework from 'deep-framework';\n\nexport default class extends DeepFramework.Core.AWS.Lambda.Runtime {\n  /**\n   * @param {Array} args\n   */\n  constructor(...args) {\n    super(...args);\n  }\n\n  /**\n   * @param request\n   */\n  handle(request) {\n    let taskId = request.getParam('Id');\n\n    if (typeof taskId !== 'string') {\n      throw new DeepFramework.Core.Exception.InvalidArgumentException(taskId, 'string');\n    }\n\n    let TaskModel = this.kernel.get('db').get('Task');\n\n    TaskModel.deleteById(taskId, (err) =&gt; {\n      if (err) {\n        throw new DeepFramework.Core.Exception.DatabaseOperationException(err);\n      }\n\n      return this.createResponse({}).send();\n    });\n  }\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">4. Microservice that Deletes a Task — \n    <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/delete/Handler.es6\">https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/delete/Handler.es6</a>\n  </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Each above file with related dependencies is compressed into .zip file and uploaded to AWS Lambda. If you’re new to this process, we’d strongly recommend to follow <a href=\"https://docs.aws.amazon.com/AWSToolkitEclipse/latest/ug/lambda-tutorial.html\">How to Create, Upload and Invoke an AWS Lambda function</a> tutorial.</p>\n<p class=\"graf graf-up margin-bottom-25\">Back to our 4 small node.js functions, you can see that we have adopted ES6 (aka <a href=\"https://babeljs.io/docs/learn-es2015\">ES2015</a>) as our coding standard. And we are importing deep-framework in every function. What is this framework anyway and why we’re using it everywhere?</p>\n<h3>Full-stack Web Framework</h3>\n<p class=\"graf graf-up margin-bottom-25\">Let us step back. Building and uploading AWS Lambda functions to the service is very simple and straight-forward, but now imagine you need to manage 100–150 web services to access a web page, multiplied by hundreds or thousands of web pages.</p>\n<p class=\"graf graf-up margin-bottom-25\">We believe that the only way to achieve this kind of flexibility and scale is automation and code reuse. These principles led us to build and open source <a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework</a> — a full-stack web framework that abstracts web services and web applications from specific cloud services — and DEEP CLI (aka <em>deepify</em>) — development tool-chain that abstracts package management and associated development operations.</p>\n<p class=\"graf graf-up margin-bottom-25\">Therefore, to make sure that the process of managing AWS Lambda functions is streamlined and automated, we have adopted a consistent approach to include 2 more files in each uploaded .zip:</p>\n<pre><code class=\"js language-js\">'use strict';\n\nimport DeepFramework from 'deep-framework';\nimport Handler from './Handler';\n\nexport default DeepFramework.LambdaHandler(Handler);\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">1. DEEP Microservice Bootstrap — \n    <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/create/bootstrap.es6\">https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/create/bootstrap.es6</a>\n  </div>\n</div>\n<pre><code class=\"js language-js\">{\n  \"name\": \"deep-todo-task-create\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Create a new todo task\",\n  \"scripts\": {\n    \"postinstall\": \"npm run compile\",\n    \"compile\": \"deepify compile-es6 `pwd`\"\n  },\n  \"dependencies\": {\n    \"deep-framework\": \"^1.8.x\"\n  },\n  \"preferGlobal\": false,\n  \"private\": true,\n  \"analyze\": true\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">2. DEEP Microservice Package Metadata (for npm) —\n    <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/create/package.json\">https://github.com/MitocGroup/deep-microservices-todomvc/blob/master/src/deep-todomvc/backend/src/task/create/package.json</a>\n  </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Having these 3 files (Handler.es6, bootstrap.es6 and package.json) in each AWS Lambda function doesn’t mean your final .zip file will be that small. Actually, a lot of additional operations happen before the .zip file is created. To name few:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS Lambda performs better when the uploaded codebase is smaller. Since we provide both local development capabilities and one-step push to production, our process optimizes resources before deploying to AWS.</li>\n<li>ES6 is not supported by node.js v0.10.x that currently runs in AWS Lambda. We compile .es6 files into ES5 compliant .js files using babel.</li>\n<li>Dependencies that are defined in package.json are automatically pulled and fine tuned for node.js v0.10.x to provide best performance possible.</li>\n</ul>\n<h3>Putting Everything Together</h3>\n<p class=\"graf graf-up margin-bottom-25\">First, you will need the following pre-requisites:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>AWS Account (learn how to <a href=\"https://www.youtube.com/watch?v=WviHsoz8yHk\">Create an Amazon Web Services Account</a>)</li>\n<li>AWS CLI (learn how to <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html\">Configure AWS Command Line Interface</a>)</li>\n<li>Git v2+ (learn how to <a href=\"https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\">Get Started — Installing Git</a>)</li>\n<li>Java / JRE v6+ (learn how to <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html\">JDK 8 and JRE 8 Installation Start Here</a>)</li>\n<li>Node.js v4+ (learn how to <a href=\"https://github.com/creationix/nvm#install-script\">Install nvm</a> and <a href=\"https://github.com/creationix/nvm#usage\">Use latest node v4</a>)</li>\n<li>DEEP CLI (execute in command line: <em>npm install deepify -g</em>)</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Note: Don’t use “sudo” in step 5. Otherwise you’ll have to <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\">fix npm permissions</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Next, you will deploy the todo app using <em>deepify</em>:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><em>deepify install github://MitocGroup/deep-microservices-todomvc ~/deep-microservices-todomvc</em></li>\n<li><em>deepify server ~/deep-microservices-todomvc</em></li>\n<li><em>deepify deploy ~/deep-microservices-todomvc</em></li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\"><em>Note: When step 2 (deepify server) is finished, you can open in your browser <a href=\"http://localhost:8000/\">http://localhost:8000</a> and enjoy the todo app running locally.</em></p>\n<div class=\"iframe-container\">\n  <iframe width=\"680\" height=\"383\" src=\"https://www.youtube.com/embed/ghZNn5Gjv90?list=PLPGfD-tGOl7uNDXo_eMN1odMZflYVu2n9\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n<h3>Cleaning Up</h3>\n<p class=\"graf graf-up margin-bottom-25\">There are at least half a dozen services and several dozen of resources created during <em>deepify deploy</em>. If only there was a simple command that would clean up everything when we’re done. We thought of that and created <em>deepify undeploy</em> to address this need. When you are done using todo app and want to remove web app related resources, simply execute step 4:</p>\n<ol start=\"4\">\n<li><em>deepify undeploy ~/deep-microservices-todomvc</em></li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">As you can see, we empower developers to build hassle-free cloud-native applications or platforms using microservices architecture and serverless computing. And what about security?</p>\n<h3>Security</h3>\n<p class=\"graf graf-up margin-bottom-25\">Well, one of the biggest value propositions on AWS is out-of-the-box <a href=\"https://aws.amazon.com/security/\">security</a> and <a href=\"https://aws.amazon.com/compliance/\">compliance</a>. The beauty of cloud-native approach is that security comes by design (in other words, it won’t work otherwise). We take full advantage of shared responsibility model and enforce security in every layer.</p>\n<p class=\"graf graf-up margin-bottom-25\">Developers and applications’ end users benefit of <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html\">AWS IAM best practices</a> through streamlined implementations of <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege\">least privilege access</a>, <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#delegate-using-roles\">delegated roles instead of credentials</a> and <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#keep-a-log\">integration with logging and monitoring services</a> (e.g. AWS CloudTrail, Amazon CloudWatch, Amazon Elasticsearch + Kibana). For example, developers and end users of todo app didn’t need to explicitly define any security roles (it was done by <em>deepify deploy</em>), but they can rest assured that only their instance of todo app will be using their infrastructure &amp; platform &amp; application resources.</p>\n<p class=\"graf graf-up margin-bottom-25\">Here below are 2 security roles (1 for back-end and 1 for front-end) that have been seamlessly generated and enforced in each layer:</p>\n<pre><code class=\"js language-js\">{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"lambda:InvokeFunction\"],\n            \"Resource\": [\"arn:aws:lambda:us-east-1:123456789000:function:DeepProdTodoCreate1234abcd*\"]\n        }\n    ]\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">AWS IAM role that allows back-end invocation of AWS Lambda function (e.g. DeepProdTodoCreate1234abcd) in web application’s AWS account (e.g. 123456789000)</div>\n</div>\n<pre><code class=\"js language-js\">{\n  \"Version\": \"2015-10-07\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"deep.todo:task:create\"],\n      \"Resource\": [\"deep.todo:task\"]\n    }\n  ]\n}\n</code></pre>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">DEEP role that allows front-end resource (e.g deep.todo:task) to execute action (e.g. deep.todo:task:create)</div>\n</div>\n<h3>Benchmarking</h3>\n<p class=\"graf graf-up margin-bottom-25\">We have been continuously benchmarking AWS Lambda for various use cases in our microapplications. After a couple of repetitive times doing similar analysis, we decided to build the benchmarking as another microapplication and reuse the ecosystem to automatically include where we needed it. The codebase is open sourced on Github:</p>\n<div class=\"external-article\">\n  <a href=\"https://github.com/MitocGroup/deep-microservices-benchmarking?source=post_page-----dd81719b0dff----------------------\">\n  <h5>MitocGroup/deep-microservices-benchmarking</h5>\n  <span>DEEP Benchmarking ( https://github.com/MitocGroup/deep-microservices-benchmarking) is a microservice that is built on…</span>\n  <span>github.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Particularly, for todo app, we have performed various benchmarking analysis on AWS Lambda by tweaking different components in a specific function (e.g. function size, memory size, billable cost, etc.). Next, we would like to share results with you:</p>\n<div class=\"horizontalScrollTable\" data-markdown=\"1\"><table class=\"table\">\n<thead>\n<tr class=\"graf graf--li graf-grap\">\n<th>Req No</th>\n<th>Function Size (MB)</th>\n<th>Memory Size (MB)</th>\n<th>Max Memory Used (MB)</th>\n<th>Start time</th>\n<th>Stop time</th>\n<th>Front-end Call (ms)</th>\n<th>Back-end Call (ms)</th>\n<th>Billed Time (ms)</th>\n<th>Billed Time ($)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:15.8</td>\n<td class=\"center\">20:16.2</td>\n<td class=\"center\">359</td>\n<td class=\"center\">200.47</td>\n<td class=\"center\">300</td>\n<td class=\"center\">0.000000624</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">2</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:17.8</td>\n<td class=\"center\">20:18.2</td>\n<td class=\"center\">381</td>\n<td class=\"center\">202.45</td>\n<td class=\"center\">300</td>\n<td class=\"center\">0.000000624</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">3</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:19.9</td>\n<td class=\"center\">20:20.3</td>\n<td class=\"center\">406</td>\n<td class=\"center\">192.52</td>\n<td class=\"center\">200</td>\n<td class=\"center\">0.000000416</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">4</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:21.9</td>\n<td class=\"center\">20:22.2</td>\n<td class=\"center\">306</td>\n<td class=\"center\">152.19</td>\n<td class=\"center\">200</td>\n<td class=\"center\">0.000000416</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">5</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:23.9</td>\n<td class=\"center\">20:24.2</td>\n<td class=\"center\">333</td>\n<td class=\"center\">175.01</td>\n<td class=\"center\">200</td>\n<td class=\"center\">0.000000416</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">6</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:25.9</td>\n<td class=\"center\">20:26.3</td>\n<td class=\"center\">431</td>\n<td class=\"center\">278.03</td>\n<td class=\"center\">300</td>\n<td class=\"center\">0.000000624</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">7</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:27.9</td>\n<td class=\"center\">20:28.2</td>\n<td class=\"center\">323</td>\n<td class=\"center\">170.97</td>\n<td class=\"center\">200</td>\n<td class=\"center\">0.000000416</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">8</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:29.9</td>\n<td class=\"center\">20:30.2</td>\n<td class=\"center\">327</td>\n<td class=\"center\">160.24</td>\n<td class=\"center\">200</td>\n<td class=\"center\">0.000000416</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">9</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34</td>\n<td class=\"center\">20:31.9</td>\n<td class=\"center\">20:32.4</td>\n<td class=\"center\">556</td>\n<td class=\"center\">225.25</td>\n<td class=\"center\">300</td>\n<td class=\"center\">0.000000624</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">10</td>\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">35</td>\n<td class=\"center\">20:33.9</td>\n<td class=\"center\">20:34.2</td>\n<td class=\"center\">333</td>\n<td class=\"center\">179.59</td>\n<td class=\"center\">200</td>\n<td class=\"center\">0.000000416</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\"></td>\n<td class=\"center\"></td>\n<td class=\"center\"></td>\n<td class=\"center\"></td>\n<td class=\"center\"><strong>Average</strong></td>\n<td class=\"center\"><em>375.50</em></td>\n<td class=\"center\"><em>193.67</em></td>\n<td class=\"center\"><strong>Total</strong></td>\n<td class=\"center\"><em>0.000004992</em></td>\n<td class=\"center\"></td>\n</tr>\n</tbody>\n</table></div>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">Benchmarking for todo app — https://todo.deep.mg/#/deep-benchmarking</div>\n</div>\n<h3>Performance</h3>\n<p class=\"graf graf-up margin-bottom-25\">Speaking of performance, we find AWS Lambda mature enough to power large-scale web applications. The key is to build the functions as small as possible, focusing on a simple rule of one function to achieve only one task. Over time, these functions might grow in size, therefore we always keep an eye on them and refactor / split into the lowest possible logical denominator (smallest task).</p>\n<p class=\"graf graf-up margin-bottom-25\">Using the benchmarking tool, we ran multiple scenarios on the same function from todo app:</p>\n<table class=\"table\">\n<thead>\n<tr class=\"graf graf--li graf-grap\">\n<th>Function Size (MB)</th>\n<th>Memory Size (MB)</th>\n<th>Max Memory Used (MB)</th>\n<th>Avg Front-end (ms)</th>\n<th>Avg Back-end (ms)</th>\n<th>Total Calls (#)</th>\n<th>Total Billed (ms)</th>\n<th>Total Billed ($/1B)*</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34-35</td>\n<td class=\"center\">375.50</td>\n<td class=\"center\">193.67</td>\n<td class=\"center\">10</td>\n<td class=\"center\">2,400</td>\n<td class=\"center\">4,992</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1.1</td>\n<td class=\"center\">256</td>\n<td class=\"center\">34-37</td>\n<td class=\"center\">399.40</td>\n<td class=\"center\">153.25</td>\n<td class=\"center\">10</td>\n<td class=\"center\">2,000</td>\n<td class=\"center\">8,340</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1.1</td>\n<td class=\"center\">512</td>\n<td class=\"center\">33-35</td>\n<td class=\"center\">341.60</td>\n<td class=\"center\">134.32</td>\n<td class=\"center\">10</td>\n<td class=\"center\">1,800</td>\n<td class=\"center\">15,012</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1.1</td>\n<td class=\"center\">128</td>\n<td class=\"center\">34-49</td>\n<td class=\"center\">405.57</td>\n<td class=\"center\">223.82</td>\n<td class=\"center\">100</td>\n<td class=\"center\">27,300</td>\n<td class=\"center\">56,784</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1.1</td>\n<td class=\"center\">256</td>\n<td class=\"center\">28-48</td>\n<td class=\"center\">354.75</td>\n<td class=\"center\">177.91</td>\n<td class=\"center\">100</td>\n<td class=\"center\">23,800</td>\n<td class=\"center\">99,246</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">1.1</td>\n<td class=\"center\">512</td>\n<td class=\"center\">32-47</td>\n<td class=\"center\">345.92</td>\n<td class=\"center\">163.17</td>\n<td class=\"center\">100</td>\n<td class=\"center\">23,100</td>\n<td class=\"center\">192,654</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">55.8</td>\n<td class=\"center\">128</td>\n<td class=\"center\">49-50</td>\n<td class=\"center\">543.00</td>\n<td class=\"center\">284.03</td>\n<td class=\"center\">10</td>\n<td class=\"center\">3,400</td>\n<td class=\"center\">7,072</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">55.8</td>\n<td class=\"center\">256</td>\n<td class=\"center\">49-50</td>\n<td class=\"center\">339.80</td>\n<td class=\"center\">153.13</td>\n<td class=\"center\">10</td>\n<td class=\"center\">2,100</td>\n<td class=\"center\">8,757</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">55.8</td>\n<td class=\"center\">512</td>\n<td class=\"center\">49-50</td>\n<td class=\"center\">342.60</td>\n<td class=\"center\">141.02</td>\n<td class=\"center\">10</td>\n<td class=\"center\">2,000</td>\n<td class=\"center\">16,680</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">55.8</td>\n<td class=\"center\">128</td>\n<td class=\"center\">83-87</td>\n<td class=\"center\">416.10</td>\n<td class=\"center\">220.91</td>\n<td class=\"center\">100</td>\n<td class=\"center\">26,900</td>\n<td class=\"center\">55,952</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">55.8</td>\n<td class=\"center\">256</td>\n<td class=\"center\">50-71</td>\n<td class=\"center\">377.69</td>\n<td class=\"center\">194.22</td>\n<td class=\"center\">100</td>\n<td class=\"center\">25,600</td>\n<td class=\"center\">106,752</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">55.8</td>\n<td class=\"center\">512</td>\n<td class=\"center\">57-81</td>\n<td class=\"center\">353.46</td>\n<td class=\"center\">174.65</td>\n<td class=\"center\">100</td>\n<td class=\"center\">23,300</td>\n<td class=\"center\">194,322</td>\n</tr>\n</tbody>\n</table>\n<div class=\"padd25px\">\n  <div class=\"center img-description\">Key performance indicators that helps decide how to fine tune the web application (* 1B = 1 Billion)</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Based on performance data, we have learned pretty cool stuff:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>The smaller the function is, the better it performs; On the other hand, if more memory is allocated, the size of the function matters less and less</li>\n<li>Memory size is not directly proportional to billable costs; Developers can decide the memory size based on performance requirements combined with associated costs</li>\n<li>The key to better performance is continuous load, thanks to <a href=\"https://aws.amazon.com/blogs/compute/container-reuse-in-lambda\">container reuse in AWS Lambda</a></li>\n</ul>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this article, we have presented a small web application that is built with AWS Lambda at core. Together we walked through the thinking process of identifying the front-end, the back-end and the data tiers required to build the todo app. We focused on the structure of AWS Lambda functions used in this app, as well as security, performance and benchmarking steps that we use to build enterprise-level web applications. You can fork the <a href=\"https://github.com/MitocGroup/deep-microservices-todomvc\">example code repository</a> as a starting point for your own web applications.</p>\n<p class=\"graf graf-up margin-bottom-25\">If you have questions or suggestions, please contact us.</p>"},"scaleup-award-winner-stories":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sun, 12 June 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-06-12/scaleup-award-winner-stories.png","Title":"StackWorld ScaleUp Award Winner Stories","Intro":"","minRead":"~ 1 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-06-12/scaleup-award-winner-stories.png\" alt=\"winner story\" />\n    <div class=\"center img-description\">\n        <a href=\"http://www.stackworld.com/awards/scaleup-winner-stories\" rel=\"noreferrer\">http://www.stackworld.com/awards/scaleup-winner-stories</a>)\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"http://www.stackworld.com/\">StackWorld</a> is San Francisco’s Largest DevOps + Scalability Technology Conference where 1,200+ tech companies scale their technology stack from Clouds to DevOps Tools to Back-End Coding Languages. The goal of StackWorld is to connect the community and educate practitioners on scaling their applications and technology stacks. “DevOps” has emerged as an intersection between Developers and IT — where specialized DevOps professionals and DevOps technologies allow applications to scale and get delivered at faster speeds.</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is humble and proud to be nominated among companies like New Relic or Sumo Logic, and voted for <a href=\"http://www.stackworld.com/awards/scaleup-winner-stories\">Top 25 ScaleUp Award</a>. On behalf of our customers and our partners, as well as the entire team who works on <a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework</a>, <a href=\"https://www.npmjs.com/packages/deepify\">DEEP CLI</a> and <a href=\"https://www.deep.mg/\">DEEP Marketplace</a>, we would like to thank everybody who believes in our capabilities and recognize our achievements.</p>\n<p class=\"graf graf-up margin-bottom-25\">Looking forward to StackWorld 2016 and please join our session <strong>“Building Scalable Web Applications using Microservices Architecture and Serverless Computing from AWS”</strong> on Tuesday, June 28th at 10am.</p>"},"blue-green-deployments-for-serverless-powered-applications-on-aws":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Thu, 20 October 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-10-20/lambda-edge.png","Title":"Blue-Green Deployments for Serverless Powered Applications on AWS","Intro":"First described by Martin Fowler back in 2010, blue-green deployment is \na release technique that reduces downtime and risk by running two identical \nproduction environments called Blue and Green.","minRead":"~ 6 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2016-11-29/partner-network.jpeg\" alt=\"lambda edge\" />\n    <div class=\"center img-description\">Source:\n        <a href=\"https://devopscube.com/wp-content/uploads/2016/12/lamda@edge.png\" rel=\"noreferrer\">https://devopscube.com/wp-content/uploads/2016/12/lamda@edge.png</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Fast-forwarding to 2013, <a href=\"https://github.com/dtsato\">Danilo Sato</a> from ThoughtWorks published on their blog a very insightful article that describes <a href=\"https://www.thoughtworks.com/insights/blog/implementing-blue-green-deployments-aws\">how to implement blue-green deployments using AWS.</a> We, at Mitoc Group, are working primarily with serverless computing from AWS, and today we’d like to share our experience using blue-green deployment process for serverless powered applications.</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>Note: This blogpost uses intentionally screenshots from AWS Management Console to outline a Do-It-Yourself point of view, but we’ll also provide (wherever possible) the equivalent devops command or tool, to make sure that more advanced audience is NOT bored to death :)</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">The key points to keep in mind as we move forward:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>We use <strong>full stack</strong> approach to build web applications using serverless computing from AWS (not just AWS Lambda and API Gateway)</li>\n<li>We enforce <strong>security in every layer</strong> and <strong>least privilege access</strong> (e.g. front-end tier, back-end tier, data tier, as well as centralized monitoring)</li>\n<li>We apply the same approach to newly built applications, as well as newly cloud-migrated applications that are compatible with <strong>microservices architecture</strong> (we call them <strong>cloud-native applications</strong>)</li>\n</ol>\n<h3>Serverless Architecture on AWS</h3>\n<p class=\"graf graf-up margin-bottom-25\">Before we dive into the details of the blue-green deployment process for serverless powered applications, it’s vital to point out the architecture of a typical web application that uses serverless computing from AWS (as shown in the picture below, as well as described in <a href=\"https://blog.mitocgroup.com/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">this blogpost</a>).</p>\n<div class=\"img-post-left\">\n    <img src=\"https://miro.medium.com/max/3968/1*obn8oKjcqkJJUIZ2bB59xg.png\" alt=\"lambda-deep-framework\" />\n    <div class=\"center img-description\">\n        <a href=\"https://blog.mitocgroup.com/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\" rel=\"noreferrer\">https://blog.mitocgroup.com/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Here below is the summarized list of AWS products we use:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Security tier: 1) <a href=\"https://aws.amazon.com/iam/\">AWS IAM</a> and 2) <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a></li>\n<li>Front-end tier: 3) <a href=\"https://aws.amazon.com/route53/\">Amazon Route53</a>, 4) <a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a> and 5) <a href=\"https://aws.amazon.com/s3/\">Amazon S3</a></li>\n<li>Back-end tier: 6) <a href=\"https://aws.amazon.com/api-gateway/\">Amazon API Gateway</a>, 7) <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> and 8) <a href=\"https://aws.amazon.com/sns/\">Amazon SNS</a></li>\n<li>Data tier: 9) <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>, 10) <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS</a>, 11) <a href=\"https://aws.amazon.com/elasticache/\">Amazon ElastiCache</a> and 12) <a href=\"https://aws.amazon.com/elasticsearch-service/\">Amazon Elasticsearch Service</a></li>\n<li>Monitoring tier: 13) <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a>, 14) <a href=\"https://aws.amazon.com/cloudtrail/\">AWS CloudTrail</a> and 12) <a href=\"https://aws.amazon.com/elasticsearch-service/\">Amazon Elasticsearch Service</a></li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\"><em><code>Note: As you can see above, a typical web application in our case uses 14 different services from AWS. Also, Amazon CloudSearch is a much better fit as a serverless option for full-text search capabilities, but we prefer Elasticsearch technology and Amazon Elasticsearch Service instead</code></em></p>\n<h3>Pre-requisites and Initial Considerations</h3>\n<p class=\"graf graf-up margin-bottom-25\">The blue-green deployment for serverless powered applications is happening entirely on the front-end tier, mainly because all other resources from back-end, data, monitoring and security tiers are duplicated and therefore are NOT altered during this process. So, going forward, we’ll be describing only the changes that will be applied to Amazon Route53, Amazon CloudFront and Amazon S3 during any serverless blue-green deployment.</p>\n<p class=\"graf graf-up margin-bottom-25\">The simplest and most straight-forward approach to blue-green deployments for serverless powered applications is to switch all traffic from blue environment to green environment on DNS level (and in case of failures, rollback from green environment to blue environment).</p>\n<p class=\"graf graf-up margin-bottom-25\">Managing DNS records can be sometimes very tricky, mainly because the propagation might take unpredictable time due to various caching layers on Internet. But our experience with Amazon Route53 is amazing, as long as we are using A alias records instead of CNAME records. Here below are 3 screenshots from AWS Management Console that shows how we’ve setup <em>www1.adtechmedia.io</em> in Amazon Route53, Amazon CloudFront and Amazon S3:</p>\n<div class=\"maxHeight500px center padd25px\">\n    <img src=\"/images/blog/2016-10-20/edit-record-set.png\" alt=\"edit-record-set\" />\n    <div class=\"center img-description\">\n        aws route53 list-resource-record-sets --hosted-zone-id [YOUR_HOSTED_ZONE_ID]\n    </div>\n</div>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-10-20/get-distribution.png\" alt=\"get-distribution\" />\n    <div class=\"center img-description\">\n        aws cloudfront get-distribution --id [YOUR_DISTRIBUTION_ID]\n    </div>\n</div>\n<div class=\"\">\n    <img src=\"/images/blog/2016-10-20/stati-webhosting.png\" alt=\"static-webhosting\" />\n    <div class=\"center img-description\">\n        aws s3 website s3://www1.adtechmedia.io/ --index-document index.html --error-document error.html\n    </div>\n</div>\n<h3>Blue/Green Deployments v1</h3>\n<p class=\"graf graf-up margin-bottom-25\">At this point, we are ready to switch from blue environment to green environment with zero downtime and low risks. The switch is quite simple:</p>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Step 1:</strong> Update CloudFront distribution for blue environment by removing <em>www1.adtechmedia.io</em> from Alternative Domain Names (CNAMEs)</p>\n<div class=\"\">\n    <img src=\"/images/blog/2016-10-20/step1.png\" alt=\"step1\" />\n    <div class=\"center img-description\">\n        aws cloudfront update-distribution --distribution-config file://distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Step 2:</strong> Update CloudFront distribution for green environment by adding <em>www1.adtechmedia.io</em> to Alternative Domain Names (CNAMEs)</p>\n<div class=\"\">\n    <img src=\"/images/blog/2016-10-20/step2.png\" alt=\"step2\" />\n    <div class=\"center img-description\">\n        aws cloudfront update-distribution --distribution-config file://distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Step 3:</strong> Update Route53 A alias record with CloudFront distribution Domain Name from green environment</p>\n<div class=\"maxHeight500px center\">\n    <img src=\"/images/blog/2016-10-20/step3.png\" alt=\"step3\" />\n    <div class=\"center img-description\">\n        aws route53 change-resource-record-sets --change-batch file://resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">If, for some unexpected reason, your green environment starts generating high level of failures, the rollback process is pretty similar to the one described above:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Remove CNAME from green environment</li>\n<li>Add CNAME to blue environment</li>\n<li>Update Amazon Route53 with blue environment Domain Name</li>\n</ol>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>UPDATE on 11/03/2016: A friend pointed out that it’s not necessarily to add/remove CNAMEs (which could take up to 20 minutes to propagate). Instead, just leave blue environment as it is (e.g. www1.adtechmedia.io) and setup wild carded CNAME on green environment (e.g. *.adtechmedia.io). When both distributions are enabled, blue will take precedence over green, making sure you’re not stuck with new deploy in case of high level of failures.</em></p>\n</blockquote>\n<h3>Blue/Green Deployments v2</h3>\n<p class=\"graf graf-up margin-bottom-25\">As you have seen in the previous blue-green deployments process the traffic between environments is switched suddenly, at 100% capacity. This is great for zero downtime, but if your application starts to fail, all of your users are affected. Some modern continuous deployment technics promote a more gradual switch of the traffic between environments. For example, we push only 5% of requests to green environment, while 95% still goes to blue environment. This allows to detect production problems early and on a much smaller audience of users, problems that have never surfaced in testing and staging phases. Is it possible to enable such an approach for serverless powered applications?</p>\n<p class=\"graf graf-up margin-bottom-25\">Short answer, yes! We’re very excited and humble to be able to explain our serverless solution, but there are some additional pre-requisites that must happen before. Let’s describe the challenge first, and then jump into our implementation and pre-requisites.</p>\n<h4>The Challenge</h4>\n<p class=\"graf graf-up margin-bottom-25\">Amazon CloudFront, the way it is designed, doesn’t allow same CNAME on multiple distributions. That is also the reason why we’re removing it from the blue environment and adding it to the green environment in our previous implementation.</p>\n<h4>Our implementation</h4>\n<p class=\"graf graf-up margin-bottom-25\">Amazon Route53 allows weighted routing of the traffic across multiple Amazon CloudFront distributions, Amazon S3 static websites and other endpoints. So, instead of load balancing requests between distributions, we are changing current A alias record that points to blue environment from simple routing to weighted routing, and add another A alias record as green environment that points directly to Amazon S3 static website endpoint. This enables us to manipulate requests across environments as we wish: 95% vs 5% (as shown in the screenshot below), then (if everything is fine) 90% vs 10%, and so on until blue is 0% and green is 100%.</p>\n<div class=\"maxHeight500px center\">\n    <img src=\"/images/blog/2016-10-20/hosted-zone-id.png\" alt=\"hosted-zone-id\" />\n    <div class=\"center img-description\">\n        aws route53 change-resource-record-sets --change-batch file://resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">All changes are made on Amazon Route53 level, without altering Amazon CloudFront or Amazon S3 resources. And compared to previous blue-green deployment, rollback process is even faster and easier. We remove A alias record of green environment and we’re done! Well, almost done… For consistency and cost saving purposes, we also revert back A alias record of blue environment from weighted routing to simple routing.</p>\n<h3>Final Thoughts and Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">What are the down sizes (pre-requisites) of the blue-green deployments v2?</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Amazon S3 static website hosting doesn’t support SSL, so we find ourselves temporarily enforcing HTTP-only during blue-green deployment</li>\n<li>Amazon S3 static endpoint can be used with Amazon Route53 A alias only if the bucket name is the same with the domain name (e.g. <a href=\"http://www.adtechmedia.io\">www.adtechmedia.io</a>)</li>\n<li>Depends on the traffic size, specifically how much TPS you’re consuming, Amazon S3 might start throttling you (more details here: <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html\">Request Rate and Performance Considerations</a>)</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Unfortunately, there is no silver bullet that would work perfectly for any serverless powered applications on AWS. As with any software, it’s up to us (developers or devops engineers) to decide the right process that fits specific use case. We just wanted to share two different approaches that empowered us to provide high quality at scale without compromising on resources and costs (which, by the way, are ridiculously low, but that’s another blogpost).</p>\n<div class=\"center img-description\">\n        <a href=\"https://blog.mitocgroup.com/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8\">\n        https://blog.mitocgroup.com/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8</a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Last, but not the least, <a href=\"https://www.mitocgroup.com/\">Mitoc Group</a> is a technology company that focuses on innovative enterprise solutions. Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a> or <a href=\"https://facebook.com/mitocgroup\">Facebook</a>.</p>"},"mitoc-group-inc-achieves-aws-service-delivery-partner-status-for-aws-lambda":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 29 Novembre 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-11-29/partner-network.jpeg","Title":"Mitoc Group Inc. Achieves AWS Service Delivery Partner Status for AWS Lambda","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-11-29/partner-network.jpeg\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       Mitoc Group Inc. achieves AWS Service Delivery Partner status for AWS Lambda\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Woodcliff Lake, NJ — Nov. 29, 2016 – <a href=\"https://www.mitocgroup.com/\">Mitoc Group Inc.</a>, a technology company that focuses on innovative enterprise solutions, announced today that it has achieved AWS Service Delivery Partner status for AWS Lambda. The AWS Service Delivery Program is designed to highlight AWS Partner Network (APN) Partners who have a track record of delivering verified customer success for specific Amazon Web Services (AWS) products.</p>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Service Delivery Program was recently launched to help AWS customers find qualified APN Partners that provide expertise in a specific service or skill area. To qualify, partners must pass service-specific verification of customer references and a technical review, meaning customers can be confident they are working with partners that provide recent and relevant experience.</p>\n<p class=\"graf graf-up margin-bottom-25\">“Mitoc Group is proud to be one of the first APN partners to participate in the AWS Service Delivery Program,” said <a href=\"https://linkedin.com/in/eistrati\">Eugene Istrati</a>, Technology Partner at Mitoc Group. “Our team has built a base of applied experience around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of the AWS Cloud.”</p>\n<p class=\"graf graf-up margin-bottom-25\">APN Partners with AWS Service Delivery Partner Status for AWS Lambda provide services and tools that help customers build or migrate their solutions to a micro-services based serverless architecture, without the need to worry about provisioning or managing servers.</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is helping customers like <a href=\"https://www.manning.com/\">Manning Publications</a> build a new product intended to give users better access to for-pay content. “ We haven’t had the best experiences when developing new products in the past,” said Marjan Bace, Publisher at Manning. “With AWS Lambda, there’s a noticeable difference in the speed of development. We’re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.”</p>\n<p class=\"graf graf-up margin-bottom-25\">About Mitoc Group</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact <a href=\"mailto:hello@mitocgroup.com\">hello@mitocgroup.com</a> or visit <a href=\"https://www.mitocgroup.com/\">www.mitocgroup.com</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com</a>.</p>"},"mitoc-group-inc-granted-aws-advanced-technology-partner-status":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sat, 22 July 2017 12:20:55 -0400","Thumbnail":"/images/blog/2016-11-29/partner-network.jpeg","Title":"Mitoc Group Inc. Granted AWS Advanced Technology Partner Status","Intro":"Congratulations! Your Firm Has Been Accepted into the Advanced AWS Partner Network (APN) Tier.","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-11-29/partner-network.jpeg\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       Mitoc Group Inc. achieves AWS Service Delivery Partner status for AWS Lambda\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Woodcliff Lake, NJ — July 21, 2017 — Mitoc Group Inc., a technology company that focuses on innovative enterprise solutions, announced today that it has been granted <a href=\"https://aws.amazon.com/partners/technology\">AWS Advanced Technology Partner</a> status by Amazon Web Services, recognizing its ability to help businesses and developers drive innovation using DevOps and Serverless on the AWS Cloud.</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is also part of the <a href=\"https://aws.amazon.com/partners/saas/\">AWS SaaS Partner Program</a> which provides APN Technology Partners with support as they build, launch, and grow SaaS solutions on AWS. The company and its staff is very proud to join the ranks of Chef and Puppet, US based companies that pioneered DevOps landscape.</p>\n<p class=\"graf graf-up margin-bottom-25\">“We are thrilled to be named an Advanced Technology Partner in the AWS Partner Network,” said <a href=\"https://linkedin.com/in/eistrati\">Eugene Istrati</a>, Technology Partner at Mitoc Group. “Our team has built a base of innovative products and simplified processes around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of DevOps and Serverless on the AWS Cloud.”</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is helping customers like <a href=\"https://www.manning.com/\">Manning Publications</a> build a new product intended to give users better access to for-pay content. “ We haven’t had the best experiences when developing new products in the past,” said Marjan Bace, Publisher at Manning. “With AWS Lambda, there’s a noticeable difference in the speed of development. We’re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.”</p>\n<h4>About Mitoc Group</h4>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact hello@mitocgroup.com or visit <a href=\"https://www.mitocgroup.com/\">www.mitocgroup.com</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com</a>.</p>"},"aws-re-invent-2017-serverless-chalk-talk":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 24 November 2017 12:20:55 -0400","Thumbnail":"/images/blog/2017-11-24/awsReInvent.png","Title":"AWS re:Invent 2017. Serverless Track. SRV326 Chalk Talk.","Intro":"Mitoc Group was nominated again to deliver a serverless session at Amazon Web Services’ biggest event of the year, AWS re:Invent 2017.","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2017-11-24/awsReInvent.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       <a href=\"https://www.portal.reinvent.awsevents.com/connect/search.ww#loadSearch-searchPhrase=SRV326&searchType=session\" target=\"_blank\">https://www.portal.reinvent.awsevents.com/connect/search.ww#loadSearch-searchPhrase=SRV326&searchType=session</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">If you are like me, you probably regret the amount of food and drinks from yesterday’s Thanksgiving dinner. At least I had lots of fun and an amazing time with family and friends. And, to feel better, this morning I woke up early and played two hours of soccer.</p>\n<p class=\"graf graf-up margin-bottom-25\">Wait. What am I talking about?</p>\n<p class=\"graf graf-up margin-bottom-25\">Oh, right. AWS re:Invent 2017. After <a href=\"https://blog.mitocgroup.com/best-re-invent-ever-448ac73f6a4e\">AWS re:Invent 2015</a>, it is time for me to get back to writing (apologies for being quiet for most of the year or so) and share great news for our customers, our partners and our team:</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2017-11-24/email.png\" alt=\"aws email\" />\n    <div class=\"center img-description\">\n       Nomination email from AWS re:Invent team\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">We have been busy. Business as usual. Little to no time to write about our experience and achievements. Nevertheless, back in July 2017, we have received above email that nominates Mitoc Group to present at Amazon Web Services’ biggest event of the year. It was very humbling and very exciting to be considered for a talk on serverless topic, our core business and focus, and it comes with huge responsibility. We have been working with AWS Serverless products since 2014, and <a href=\"https://blog.mitocgroup.com/deep-management-s-continuous-integration-with-travis-ci-and-coveralls-1cfcfcb3c284\">Continuous Integration</a> is part of our culture. That’s why our proposal, <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=18059\">How to Approach Continuous Integration for Serverless Applications</a>, was a no-brainer and a natural choice:</p>\n<div class=\"external-article\">\n  <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=18059&source=post_page-----92bd01ef8151----------------------\">\n  <h5>How to Approach Continuous Integration for Servless Applications</h5>\n  <span>Continuous integration is the practice of merging all working copies of developer code into one shared mainline several...</span>\n    <span>www.portal.reinvent.awsevents.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Last week, we get another email from AWS re:Invent team, saying that “your chalk talk SRV326 How to Approach Continuous Integration for Serverless Applications is 1,072.73% over-subscribed! Would you like to hold a repeat session?” And … there you go:</p>\n<div class=\"external-article\">\n  <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=18059&source=post_page-----92bd01ef8151----------------------\">\n  <h5>[REPEAT] How to Approach Continuous Integration for Servless Applications</h5>\n  <span>Continuous integration is the practice of merging all working copies of developer code into one shared mainline several...</span>\n    <span>www.portal.reinvent.awsevents.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">What I’m trying to convey is that doing the right thing on behalf of the customers and partners won’t necessary get you on Forbes’ or Fortune’s cover, but will definitely get you noticed by your industry peers and promote you in sharing your experience with others. See you next week in Vegas and looking forward to <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent 2017</a>.</p>"},"you-get-what-you-get-and-you-dont-get-upset":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 25 March 2018 12:20:55 -0400","Thumbnail":"/images/blog/2018-03-25/mitoc.png","Title":"You get what you get and you don’t get upset","Intro":"Or how we as adults forget about basic principles we teach kids, but for some reason tend to think that we’ve grown up and it doesn’t apply to us anymore","minRead":"~ 3 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2018-03-25/mitoc.png\" alt=\"Mitoc Group\" />\n    <div class=\"center img-description\">\n       <a href=\"https://landscape.cncf.io/selected=mitoc-group-deep\" target=\"_blank\">https://landscape.cncf.io/selected=mitoc-group-deep</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">This story is about a group of young innovators who worked hard to build something great, but didn’t get fully deserved awards and recognitions. They continue to work hard and serve customers with passion and integrity. Let’s take a moment to celebrate the team who made it possible.</p>\n<h3>AlexanderC</h3>\n<p class=\"graf graf-up margin-bottom-25\">Main contributor with over 1M lines of written code, <a href=\"https://github.com/AlexanderC\">Alex</a> was and forever will be the “father” of deep-framework. When we first met, he was a hardcore PHP guy who just couldn’t shut up about how great Symfony Framework is. We built couple of projects using Symfony and we were happy that customers love us. By that time, AWS Lambda was released in beta and our desire to manage servers started to go down exponentially. His insane curiosity and crazy desire to have Symfony as part of Lambda put us on a path to build JavaScript driven framework for Cloud Native Web Applications on AWS.</p>\n<h3>MGoria</h3>\n<p class=\"graf graf-up margin-bottom-25\">From the beginning and without formal training, <a href=\"https://github.com/mgoria\">Marcel</a> defined himself as a security engineer, working on making deep-framework feasible and secure environment. For a long time he felt that his work is not exciting nor rewarding, but the fact that none of our customers ever complained about security issues, as well as every security audit was passed with success from the first attempt says the world about Marcel. But the most important fact about him is his sense of humor and extraordinary ability to emphasize the fun out of everything.</p>\n<h3>CCristi</h3>\n<p class=\"graf graf-up margin-bottom-25\">In his first job ever as an engineer, <a href=\"https://github.com/CCristi\">Cristi</a> blown away everybody’s minds and expectations. His ability to take a problem and turn it into working code impressed us all. But that is not a surprise, since his entire time in school he participated at national and international contests in Math and Computer Science. Cristi was always focused on winning, and nowadays as a college student he is winning with deep-framework.</p>\n<h3>DDimitrioglo</h3>\n<p class=\"graf graf-up margin-bottom-25\">One of the most meticulous engineers out there, <a href=\"https://github.com/ddimitrioglo\">Dmitri</a> fixed the most annoying bugs in deep-framework. His ability to break down a problem into microsteps and reverse engineer them around helped entire team to address issues that most of us couldn’t. Dima is the core engineer and main interface between this open source project and customers needs. We are proud and happy to have him on the team, and he definitely deserves our recognition.</p>\n<h3>And More</h3>\n<p class=\"graf graf-up margin-bottom-25\">We’d like to thank all of deep-framework contributors:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li><a href=\"https://github.com/AScripnic\">AScripnic</a></li>\n<li><a href=\"https://github.com/dragosh1011\">dragosh1011</a></li>\n<li><a href=\"https://github.com/dsasov\">dsasov</a></li>\n<li><a href=\"https://github.com/eistrati\">eistrati</a></li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Everybody deserves a piece of recognition no matter how big or how small it is. We value our people and we thank them for their hard work!</p>\n<p class=\"graf graf-up margin-bottom-25\">Everybody deserves a piece of recognition no matter how big or how small it is. We value our people and we thank them for their hard work!</p>\n<h3>P. S. What’s Up With This Title?</h3>\n<p class=\"graf graf-up margin-bottom-25\">If you got to this paragraph, you might be thinking “Well, I get it, but what’s up with this title?” If you do, here is the explanation — Mitoc Group’s deep-framework has been listed by <a href=\"https://cncf.io/\">Cloud Native Computing Foundation</a> as <a href=\"https://landscape.cncf.io/cncf=no\">Non-CNCF Member Products/Projects</a>. Here is the link: <a href=\"https://landscape.cncf.io/selected=mitoc-group-deep\">https://landscape.cncf.io/selected=mitoc-group-deep</a></p>\n<p class=\"graf graf-up margin-bottom-25\">Since the team was not that excited about this achievement, as well as some of us were really upset for not getting more, we thought to combine the “recognition part” with “you get what you get and you don’t get upset”. We want more because we are humans and that’s fine, but remember what you are teaching kids and don’t forget that the same principles apply to yourself.</p>"},"aws-lambda-to-redshift-connection-using-iam-authentication-and-nat-gateway":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 23 April 2018 12:20:55 -0400","Thumbnail":"/images/blog/2018-04-23/example.png","Title":"AWS Lambda to Redshift Connection using IAM authentication and NAT gateway","Intro":"Python Edition. This article walks through the steps taken and lessons learned, in order to connect AWS Lambda to Amazon Redshift running in Amazon VPC. Described solution involves minimal maintenance effort while providing top notch security and reliability.","minRead":"~ 4 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2018-04-23/example.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Although the use case I worked on is not exactly the one from the picture above, I wanted to share my story because I don’t want others waste their time with it. Recently I was required to implement a solution that involves connecting AWS Lambda to Amazon Redshift. If Amazon VPC is not in scope, feel free to stop reading here and ignore the rest of this article.</p>\n<h3>Challenges</h3>\n<p class=\"graf graf-up margin-bottom-25\">During implementation, I had to overcome the following challenges:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>AWS Lambda’s python runtime doesn’t support natively libpq.so which is required by psycopg2 library to connect to Amazon Redshift;</li>\n<li>Securely storing and rotating Amazon Redshift’s credentials was becoming another full time project;</li>\n<li>IAM authentication for Amazon Redshift is amazing, but it took me a while to get it functional in Amazon VPC.</li>\n</ol>\n<h3>Implementation</h3>\n<p class=\"graf graf-up margin-bottom-25\">For the sake of simplicity, I’ve reduced the python code used in AWS Lambda function to the minimum, as shown below:</p>\n<pre><code class=\"py language-py\">import os\nimport psycopg2\nimport sys\n\ndef lambda_handler(event, context):\n  REDSHIFT_DATABASE = os.environ['REDSHIFT_DATABASE']\n  REDSHIFT_USER = os.environ['REDSHIFT_USER']\n  REDSHIFT_PASSWD = os.environ['REDSHIFT_PASSWD']\n  REDSHIFT_PORT = os.environ['REDSHIFT_PORT']\n  REDSHIFT_ENDPOINT = os.environ['REDSHIFT_ENDPOINT']\n  REDSHIFT_QUERY = \"SELECT DISTINCT tablename FROM pg_table_def WHERE schemaname = 'public' ORDER BY tablename\"\n\n  try:\n    conn = psycopg2.connect(\n      dbname=REDSHIFT_DATABASE,\n      user=REDSHIFT_USER,\n      password=REDSHIFT_PASSWD,\n      port=REDSHIFT_PORT,\n      host=REDSHIFT_ENDPOINT)\n  except Exception as ERROR:\n    print(\"Connection Issue: \" + ERROR)\n    sys.exit(1)\n\n  try:\n    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)\n    print(cursor.execute(REDSHIFT_QUERY))\n    cursor.close()\n    conn.commit()\n    conn.close()\n  except Exception as ERROR:\n    print(\"Execution Issue: \" + ERROR)\n    sys.exit(1)\n</code></pre>\n<h4>Issue #1</h4>\n<p class=\"graf graf-up margin-bottom-25\">If you develop on Mac OSX or Windows, the local version of psycopg2 library most probably is not compatible with AWS Lambda python3.6 runtime. I got the following error:</p>\n<pre><code>No module named 'psycopg2._psycopg': ModuleNotFoundError\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">This is an easy and quick fix. Either you’re compiling psycopg2 library on an Amazon Linux compatible operating system. Or, a much better alternative, use the following GitHub repository:</p>\n<div class=\"external-article\">\n  <a href=\"https://github.com/jkehler/awslambda-psycopg2?source=post_page-----b40c6002082b----------------------\">\n  <h5>jkehler/awslambda-psycopg2</h5>\n  <span>Contribute to awslambda-psycopg2 development by creating an account on GitHub.</span>\n    <span>github.com</span>\n  </a>\n</div>\n<h4>Issue #2</h4>\n<p class=\"graf graf-up margin-bottom-25\">AWS Lambda provides environment variables capability, which allows developers to decouple fixed components of the code from variable ones. Since our team manages most of our cloud resources using Terraform, here below is the simplified version Terraform script for Lambda function:</p>\n<pre><code>resource \"aws_lambda_function\" \"lambda_function\" {\n  s3_bucket        = \"${var.lambda_source_bucket}\"\n  s3_key           = \"${var.lambda_source_file}\"\n\n  source_code_hash = \"${base64sha256(file(var.lambda_source_file))}\"\n  function_name    = \"${var.lambda_function_name}\"\n  handler          = \"${var.lambda_function_handler}\"\n  runtime          = \"${var.lambda_function_runtime}\"\n  timeout          = \"${var.lambda_function_timeout}\"\n  role             = \"${var.lambda_iam_role}\"\n\n  vpc_config {\n    security_group_ids = [\"${split(\",\", var.lambda_security_group_ids)}\"]\n    subnet_ids         = [\"${split(\",\", var.lambda_vpc_subnet_ids)}\"]\n  }\n\n  environment {\n    variables = {\n      REDSHIFT_ENDPOINT = \"${var.redshift_connection[\"endpoint\"]}\"\n      REDSHIFT_PORT     = \"${var.redshift_connection[\"port\"]}\"\n      REDSHIFT_USER     = \"${var.redshift_connection[\"username\"]}\"\n      REDSHIFT_PASSWD   = \"${var.redshift_connection[\"password\"]}\"\n      REDSHIFT_DATABASE = \"${var.redshift_connection[\"database\"]}\"\n    }\n  }\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">Now, everything related to Amazon Redshift connection is concentrated in <em>redshift_connection</em> variable, which stores values in plain text. To overcome this security problem, we have to consider one of the following solutions:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><a href=\"https://aws.amazon.com/kms/\">AWS Key Management Service</a></li>\n<li><a href=\"https://aws.amazon.com/systems-manager/features/\">AWS Systems Manager’s Parameter Store</a></li>\n<li><a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-authentication-access-control.html\">IAM Authentication for Amazon Redshift</a></li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Using KMS or Parameter Store is definitely a viable solution, but I opted to the most natural choice and less maintenance effort down the road: the native integration between Redshift and IAM. Shortly, with an API call, Redshift issues temporary credentials based on IAM permissions which can be used for Redshift connections. Now my Lambda function looks like this:</p>\n<pre><code class=\"py language-py\">import os\nimport boto3\nimport psycopg2\nimport sys\n\ndef lambda_handler(event, context):\n  REDSHIFT_DATABASE = os.environ['REDSHIFT_DATABASE']\n  REDSHIFT_USER = os.environ['REDSHIFT_USER']\n  REDSHIFT_PASSWD = os.environ['REDSHIFT_PASSWD']\n  REDSHIFT_PORT = os.environ['REDSHIFT_PORT']\n  REDSHIFT_ENDPOINT = os.environ['REDSHIFT_ENDPOINT']\n  REDSHIFT_CLUSTER = os.environ['REDSHIFT_CLUSTER']\n  REDSHIFT_QUERY = \"SELECT DISTINCT tablename FROM pg_table_def WHERE schemaname = 'public' ORDER BY tablename\"\n\n  try:\n    client = boto3.client('redshift')\n    creds = client.get_cluster_credentials(\n      DbUser=REDSHIFT_USER,\n      DbName=REDSHIFT_DATABASE,\n      ClusterIdentifier=REDSHIFT_CLUSTER,\n      DurationSeconds=3600)\n  except Exception as ERROR:\n    print(\"Credentials Issue: \" + ERROR)\n    sys.exit(1)\n\n  try:\n    conn = psycopg2.connect(\n      dbname=REDSHIFT_DATABASE,\n      user=creds['DbUser'],\n      password=creds['DbPassword'],\n      port=REDSHIFT_PORT,\n      host=REDSHIFT_ENDPOINT)\n  except Exception as ERROR:\n    print(\"Connection Issue: \" + ERROR)\n    sys.exit(1)\n\n  try:\n    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)\n    print(cursor.execute(REDSHIFT_QUERY))\n    cursor.close()\n    conn.commit()\n    conn.close()\n  except Exception as ERROR:\n    print(\"Execution Issue: \" + ERROR)\n    sys.exit(1)\n</code></pre>\n<h4>Issue #3</h4>\n<p class=\"graf graf-up margin-bottom-25\">The most time consuming, as well as the most interesting challenge to address was Lambda function timeout. Turns out that switching to Redshift temporary credentials, you need AWS Lambda to be able to access Redshift APIs that are not available by default in your VPC. The options are to route either through ENI or through NAT. I opted for NAT gateway solution that is summarized here below using the following Terraform script:</p>\n<pre><code>data \"aws_security_group\" \"security_group\" {\n  id = \"${join(\"\",slice(var.lambda_security_group_ids,0,1))}\"\n}\n\ndata \"aws_subnet_ids\" \"lambda_subnets\" {\n  vpc_id = \"${data.aws_security_group.security_group.vpc_id}\"\n}\n\nresource \"aws_eip\" \"nat\" {\n  vpc = true\n}\n\nresource \"aws_nat_gateway\" \"lambda_gateway\" {\n  allocation_id = \"${aws_eip.nat.id}\"\n  subnet_id     = \"${join(\"\",slice(data.aws_subnet_ids.lambda_subnets.ids,0,1))}\"\n}\n\nresource \"aws_route_table\" \"lambda_private\" {\n  vpc_id = \"${data.aws_security_group.security_group.vpc_id}\"\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    nat_gateway_id = \"${aws_nat_gateway.lambda_gateway.id}\"\n  }\n}\n\nresource \"aws_route_table_association\" \"lambda_private\" {\n  subnet_id      = \"${join(\"\",slice(data.aws_subnet_ids.lambda_subnets.ids,1,2))}\"\n  route_table_id = \"${aws_route_table.lambda_private.id}\"\n}\n</code></pre>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">I would argue that, at the time of blog post writing, this is the ideal solution to connect AWS Lambda with Amazon Redshift running in Amazon VPC. If you use python3.6 runtime, consider <a href=\"https://github.com/jkehler/awslambda-psycopg2\">awslambda-psycopg2</a> repository. Next, replace regular postgres driver connection with <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-authentication-access-control.html\">IAM authentication</a>. Finally, enable <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function/\">outside VPC access</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"introducing-programmatic-aws-landing-zone-as-terraform-module":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 17 Jun 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-06-17/aws-arch.png","Title":"Introducing Programmatic AWS Landing Zone as Terraform Module","Intro":"AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices","minRead":"~ 4 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In over 5 years of our corporate existence our team at Mitoc Group was relentlessly working to help large organizations transform themselves and build or migrate their IT footprint to AWS cloud. In other words — quoting our friends from AWS — our customers are reinventing themselves on AWS. It is a never ending effort to invent and simplify on behalf of customers, and AWS is doing a great job at solving complex problems with easy to digest solutions.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-06-17/aws-arch.png\" alt=\"AWS Landing Zone\" />\n    <div class=\"center img-description\">AWS Landing Zone (source:\n       <a href=\"https://aws.amazon.com/solutions/aws-landing-zone\" target=\"_blank\">https://aws.amazon.com/solutions/aws-landing-zone</a>)\n    </div>\n</div>\n<h3>What is AWS Landing Zone?</h3>\n<p class=\"graf graf-up margin-bottom-25\">Quoting from official source:</p>\n<p class=\"graf graf-up margin-bottom-25\"><em>AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices. With the large number of design choices, setting up a multi-account environment can take a significant amount of time, involve the configuration of multiple accounts and services, and <strong>require a deep understanding of AWS services.</strong></em></p>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution reduced by a lot the complexity and the consistency of similar design patterns provided to different customers. On the other hand, our team had to rebuild some CloudFormation components as Terraform components, in order to use them further down the automation pipeline.</p>\n<p class=\"graf graf-up margin-bottom-25\">So we asked ourselves: Why not to build the entire AWS Landing Zone solution in Terraform? Would that be feasible and would that solve our customers problems? Spoiler alert: It is and it does :)</p>\n<h3>When NOT to Use AWS Landing Zone?</h3>\n<p class=\"graf graf-up margin-bottom-25\">If you are managing your cloud services and cloud resources within one or two AWS accounts, this solution might be an overkill for you. Everybody else, please continue reading :)</p>\n<h3>What to Consider Before Getting Started?</h3>\n<p class=\"graf graf-up margin-bottom-25\">Many large organizations we have worked with do have some kind of cloud strategy already in place. Without a clear vision and clear expectations, companies struggle to adopt cloud services successfully. Please consider spending some time in order to define your own cloud strategy and how does AWS fit into that strategy.</p>\n<p class=\"graf graf-up margin-bottom-25\">Once the strategy is in place, successful AWS Landing Zone customers have considered proactively the following prerequisites:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Automation is NOT an option. Cloud native automation is preferred.</li>\n<li>Teams are consistently using the same pipelines with the same toolset for cloud resources provisioning. Terraform is preferred.</li>\n<li>Cloud champions are empowered to build reusable processes and expose them as reusable services instead of reusable code. Serverless architecture is preferred.</li>\n</ul>\n<h3>Introducing Terraform Module for AWS Landing Zone</h3>\n<div class=\"external-article\">\n  <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone/aws?source=post_page-----3e566ee6e73f----------------------\">\n  <h5>Terraform Module Registry: AWS Landing Zone</h5>\n  <span>\n    AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices. This repository contains one terraform module that dynamically deploys components of AWS Landing Zone solution based on input list of .tfvars files.\n  </span>\n    <span>registry.terraform.io</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">After a couple of months of hard work, it is my pleasure to introduce terraform module for AWS Landing Zone (see above link). <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone\">Source code</a> is managed using GitHub and <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\">stable releases</a> are published on Terraform Module Registry.</p>\n<p class=\"graf graf-up margin-bottom-25\">To get started, simply include <code>main.tf</code> into your terraform codebase:</p>\n<pre><code>module \"landing_zone\" {\n  source     = \"TerraHubCorp/landing-zone/aws\"\n  version    = \"0.0.6\"\n  root_path  = \"${path.module}\"\n  account_id = \"${var.account_id}\"\n  region     = \"${var.region}\"\n  landing_zone_components = \"${var.landing_zone_components}\"\n}\n</code></pre>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\">NOTE: Make sure to include <code>variables.tf</code> and whatever makes sense from <code>outputs.tf</code></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">To simplify and make it easier to understand, we included default values in <code>terraform.tfvars</code>:</p>\n<pre><code>account_id = \"123456789012\"\nregion = \"us-east-1\"\nlanding_zone_components = {\n  landing_zone_pipeline_s3_bucket = \"s3://terraform-aws-landing-zone/mycompany/landing_zone_pipeline_s3_bucket/default.tfvars\"\n  [...]\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">This means that when you use this terraform module, you will need to:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Change <code>account_id</code> and <code>region</code> to values that correspond to your AWS Organization</li>\n<li>Change <code>landing_zone_components</code> to values that fit into your AWS Landing Zone use case</li>\n<li>Change <code>s3://terraform-aws-landing-zone/mycompany</code> to your S3 bucket and S3 key prefix where you will be storing <code>.tfvars</code> files (or absolute path to <code>.tfvars</code> files on local disk)</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">This module can have tens, hundreds or thousands of deployable components, but not all of them should be and will be deployed. At runtime, components that are not part of <code>landing_zone_components</code> map variable will be ignored.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">We are very excited and proud of sharing some fruits of our continuous effort to help customers build cloud native automation. Terraform module for AWS Landing Zone is just another solution that helps organizations more quickly set up a secure, multi-account AWS environment based on AWS best practices. We are well aware that AWS evolves with an insanely fast pace, and we are committed to evolve this terraform powered solution that covers all the basics, as well as integrates with other successful solutions on AWS.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"three-success-stories-of-aws-landing-zone-business-overview":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 19 Jun 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-06-19/aws-lz.png","Title":"Three Success Stories of AWS Landing Zone (Business Overview)","Intro":"After Introducing Terraform Module for AWS Landing Zone couple of days ago, let’s dive deep into several use cases and see how this technical solution solves real business problems.","minRead":"~ 5 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In this article, we will be speaking on behalf of 3 different customers without disclosing their names and any private information. These large organizations generate billions of dollars in yearly revenue and, implicitly, come with high level of complexity on AWS. There are lots of challenges and use cases, most of them are pretty common, but also enough of them that are pretty unique. We will provide only a business overview, while the technical overview will be described in a future article.</p>\n<h3>What Does AWS Landing Zone Solution Do?</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices. With the large number of design choices, setting up a multi-account environment can take a significant amount of time, involve the configuration of multiple accounts and services, and require a deep understanding of AWS services.</p>\n<p class=\"graf graf-up margin-bottom-25\">This solution can help save time by automating the set-up of an environment for running secure and scalable workloads while implementing an initial security baseline through the creation of core accounts and resources. It also provides a baseline environment to get started with a multi-account architecture, identity and access management, governance, data security, network design, and logging.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-06-19/aws-lz.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Landing Zone Architecture (source:\n       <a href=\"https://aws.amazon.com/solutions/aws-landing-zone/\" target=\"_blank\">https://aws.amazon.com/solutions/aws-landing-zone/</a>)\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution includes 4 basic AWS accounts: (1) AWS Organization Account, (2) Shared Services Account, (3) Log Archive Account and (4) Security Account. This solution also integrates into add-on products that can be deployed using the AWS Service Catalog such as AWS Managed AD and Directory Connector for AWS Single Sign-On (SSO).</p>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution also deploys an AWS Account Vending Machine (AVM) product for provisioning and automatically configuring new AWS accounts. The AVM leverages AWS SSO for managing user account access. This environment is customizable to allow customers to implement their own account baselines through a Landing Zone configuration.</p>\n<h3>Why Is AWS Landing Zone Solution So Successful?</h3>\n<p class=\"graf graf-up margin-bottom-25\">In order to dive deep and understand how <a href=\"https://blog.mitocgroup.com/introducing-programmatic-aws-landing-zone-as-terraform-module-3e566ee6e73f\">Terraform Module for AWS Landing Zone</a> helps, we decided to put on our customers hats and tell customers stories through their experiences. For simplicity and respect for their privacy, we will not be disclosing their names and we will not be providing any private information.</p>\n<h4>Customer #1</h4>\n<p class=\"graf graf-up margin-bottom-25\">Large media and entertainment company, with business presence and technical operations all over the world, customer #1 adopted cloud first strategy and required help to setup multi-account approach on AWS cloud using github, concourse and terraform. Their strategy directed cloud operations team to build out couple of dozens of AWS accounts as extension to their existing data centers and provide the same level of security and compliance as on-prem.</p>\n<h4>Customer #2</h4>\n<p class=\"graf graf-up margin-bottom-25\">Large content analytics company, with technical teams in US, EU and India, customer #2 decided to migrate and fully transform themselves on AWS. The multi-year migration effort resulted in hundreds of applications running of several thousands of servers to be rehosted / refactored / revised / rebuilt / replaced. Their entire IT footprint ended up running on over fifty AWS accounts with four members of centralized cloud operations team using github, jenkins and terraform.</p>\n<h4>Customer #3</h4>\n<p class=\"graf graf-up margin-bottom-25\">Large insurance company, with global presence in and highly regulated by almost every country in the world, customer #3 continues its multi-year cloud journey. With hundreds of AWS accounts, various business units are moving slowly and incrementally parts of IT footprint to AWS by provisioning cloud resources as extensions to their on-prem data centers. Cloud operations teams use bitbucket, bamboo and terraform to manage and operate on AWS.</p>\n<h4>Common Denominators</h4>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>VCS —Overwhelming majority of enterprise organizations use some kind of Version Control System, either we are talking about github, bitbucket or others. Not in scope for now, so I’ll skip this part.</li>\n<li>CI/CD — Cloud providers empowered many large companies to adopt some kind of Continuous Integration and Continuous Delivery (or Deployment). Not in scope for now, so I’ll skip this as well.</li>\n<li>Terraform — It doesn’t come anymore as a surprise that lots of enterprise customers with large IT footprints are using terraform to provision cloud resources, therefore I’ll skip this part.</li>\n<li>(Lots of) AWS accounts — No matter how many cloud accounts (to be read: several, dozens or even hundreds), customers want to follow best practices recommended by cloud providers that ideally are consistent with their existing policies / procedures and, why not, even improve their operations by making them better and more secure.</li>\n</ol>\n<h3>Multi-Account Strategy</h3>\n<p class=\"graf graf-up margin-bottom-25\">Why are customers opting into multi-account strategy? First, although customers can clearly separate users / data / environments using IAM, VPC, SG and STS, single-account strategy requires a vast amount of management and cost allocation that is usually not feasible. Second, if you plan to acquire other companies, integrating into single-account strategy is very expensive. Therefore, it’s a non starter.</p>\n<p class=\"graf graf-up margin-bottom-25\">In this context, the allocation of AWS accounts are usually decided by:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Business Unit (or some other kind of legal organizational breakdown)</li>\n<li>Geographical Location (or some other kind of territorial breakdown)</li>\n<li>Production vs Non-Production (or some other kind of environment / SDLC breakdown)</li>\n<li>Shared Services (use cases that are shared or can’t / shouldn’t be isolated)</li>\n</ol>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: All of our customers, including Customer #1, Customer #2 and Customer #3 followed this best practice as part of their multi-account strategy.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">Multi-account strategy doesn’t stop just at multiple AWS accounts. The goal of AWS Landing Zone is to have a minimal baseline setup for security, operations and management functions. For example, Customer #1 decided to include in the baseline only Centralized Billing, 3rd party SSO and AWS Direct Connect. Customer #2 and Customer #3 decided to, additionally, add Centralized Logging solution and Centralized Security solution. Some solutions were cloud native services on AWS like Cloudtrail, Managed AD and SSO, others not so native — Splunk, SignalFX, CloudCheckr and PingIdentity.</p>\n<p class=\"graf graf-up margin-bottom-25\">To go one step further, some customers adopt AVM (Account Vending Machine) to provision new AWS accounts and deploy the baseline into those accounts as well. In our experience, neither Customer #1, Customer #2, nor Customer #3 opted into using this solution. Instead, they use Service Catalog to allow existing / predefined AWS accounts to use only AWS products vetted and whitelisted by their organizations.</p>\n<p class=\"graf graf-up margin-bottom-25\">At the end of the day, either AWS accounts are created manually or automatically, customers decide what goes into the baseline and how the provisioning and deployment of AWS Landing Zone components are done (spoiler alert: auto-magically). This is the real value of successful AWS Landing Zone implementation.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this article, we tried to describe important business aspects of successfully adopting AWS Landing Zone. We talked about 3 different customers without disclosing their names and any private information. These large organizations generate billions of dollars in yearly revenue and, implicitly, come with high level of complexity on AWS. We intentionally stopped short on the technical side of this solution because we will be covering that next (link coming soon).</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"aws-landing-zone-module-now-supports-terraform-v0-12":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 20 August 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-20/terraform.png","Title":"AWS Landing Zone module now supports Terraform v0.12+","Intro":"Couple of weeks ago we were excited to Introduce Programmatic AWS Landing Zone as Terraform Module. Today we continue this exciting journey to extend module’s support for Terraform v0.12+","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-08-20/terraform.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\" target=\"_blank\">https://registry.terraform.io/modules/TerraHubCorp/landing-zone</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Back in May 2019, HashiCorp announced the release of Terraform 0.12, a major update that includes dozens of improvements and features spanning the breadth and depth of Terraform’s functionality. Unfortunately, this release breaks compatibility with previous version and requires extra effort to upgrade (see <a href=\"https://www.terraform.io/upgrade-guides/0-12.html\">Upgrade to Terraform v0.12</a>).</p>\n<p class=\"graf graf-up margin-bottom-25\">When we initially started <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone\">Terraform Module for AWS Landing Zone</a>, our components were developed using v0.11. We decided to release with older version and later address support for newer version. Today we are excited to announce that current implementation supports both v0.11 and below, as well as v0.12 and above.</p>\n<h3>What Changed?</h3>\n<p class=\"graf graf-up margin-bottom-25\">Additionally to Terraform syntax change from HCL1 to HCL2, we refactored components related convertor to switch from YAML to HCL instead of JSON. This feature allows easier debugging and fixing of Terraform related issues and remove any potential problems associated with conversion from one format into another.\nThe flexibility of passing a dynamic number of components as input variables is managed by several python scripts. We rewrote these supporting python scripts into nodejs scripts, therefore removing extra dependencies and simplifying this terraform module.</p>\n<p class=\"graf graf-up margin-bottom-25\">But the most important improvement that we were able to achieve, with the help from the open source community, is to publish a <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/ROADMAP.md\">high level roadmap</a>. It gives an overview of how much effort it took so far and how much more effort it will take to add 3rd party support that goes beyond standard AWS offering.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">Terraform Module for AWS Landing Zone is fully functional, supporting both Terraform v0.11 and below, as well as Terraform v0.12 and above. Latest version is published on Terraform Module Registry: <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\">https://registry.terraform.io/modules/TerraHubCorp/landing-zone</a></p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"my-architecture-apache-kafka-by-confluent-on-aws-cloud":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sun, 4 August 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-04/kafka-arch.png","Title":"My Architecture: Apache Kafka by Confluent on AWS Cloud","Intro":"Recent engagement with $4.5B customer produced very positive outcome with very surprising learning lesson: we had to create reference architecture for Apache Kafka by Confluent on AWS cloud from scratch because there wasn’t any available.","minRead":"~ 2 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In this short article we would like to share what we were able to achieve in a very short period of time. Our intention is to help others if they come across something similar. Unfortunately, we can’t give proper credits to everybody who made this reference architecture possible. Nevertheless, when the time comes, we’ll gladly update this article with well deserved recognition.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-08-04/kafka-arch.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">My Architecture: Apache Kafka by Confluent on AWS Cloud</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In a nutshell, Apache Kafka by Confluent was required to run in a multi-region setup (to be precise: North Virginia and Oregon). Each region was using 3 availability zones for HA and Low Latency. Kafka nodes require sub 10ms latency, therefore different clusters were deployed in each region and messages are being transferred from one region into another using Replicator nodes (to be precise: Replicator processes are running on Connector nodes).</p>\n<p class=\"graf graf-up margin-bottom-25\">Each Kafka cluster includes:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>5 Brokers nodes</li>\n<li>5 Zookeeper nodes</li>\n<li>2 Connector nodes (+2 Replicator processes)</li>\n<li>2 Schema Registry nodes</li>\n<li>2 REST API nodes</li>\n<li>2 KSQL nodes</li>\n<li>2 KStream nodes</li>\n<li>1 Control Center node</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Traffic between customer datacenters and AWS regions, as well as from one AWS region into another AWS region, is managed through Transit Gateway. At the time of writing, latency between North Virginia and Oregon was around 70–80 ms (according to <a href=\"https://www.cloudping.co/\">cloudping.co</a>).</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"three-success-stories-of-aws-landing-zone-technology-overview":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Thu, 1 August 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-01/aws-lz-arch.png","Title":"Three Success Stories of AWS Landing Zone (Technology Overview)","Intro":"After introducing Terraform Module for AWS Landing Zone and providing Business Overview of Our Experience with AWS Landing Zone, let’s dive deeper into the technical overview.","minRead":"~ 4 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In this article, we will be covering the technical aspects of implementations and critical details that helped deploy and manage consistent multi-account strategy using AWS best practices. We will start with reference architecture (see picture below) for AWS Landing Zone solution and dive deeper into each customer’s customization that make their solutions both unique and reusable.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-08-01/aws-lz-arch.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n      AWS Landing Zone Architecture (source:\n      <a href=\"https://aws.amazon.com/solutions/aws-landing-zone\">https://aws.amazon.com/solutions/aws-landing-zone</a>)\n    </div>\n</div>\n<h3>Getting Started</h3>\n<p class=\"graf graf-up margin-bottom-25\">First step is to include terraform module <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\">for AWS Landing Zone into your</a> code base. For example:</p>\n<pre><code>module \"landing_zone\" {\n  source                  = \"./modules/landing_zone\"\n  root_path               = path.module\n  landing_zone_providers  = {\n    default = {\n      account_id = \"123456789012\"\n      region     = \"us-east-1\"\n    }\n    [...]\n  }\n  landing_zone_components = {\n    landing_zone_vpc = \"s3://terraform-aws-landing-zone/mycompany/landing_zone_vpc/default.tfvars\"\n    [...]\n  }\n}\n</code></pre>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: Placeholder […] from above is used to suggest that similar syntax can be added. Remove it or update in order to have valid HCL format.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">Definition of <code>landing_zone_providers</code> and <code>landing_zone_components</code> allow flexible and consistent provisioning of AWS resources across multiple AWS accounts and/or AWS regions. Similar to microservices architecture, customers of this terraform module are encouraged to define one terraform resource per one landing zone component.</p>\n<p class=\"graf graf-up margin-bottom-25\">For simplicity, we moved both arguments <code>landing_zone_providers</code> and <code>landing_zone_components</code> into variables. We are manipulating them at runtime by supplying customized <code>terraform.tfvars</code>. In this case, our terraform module reference becomes simple and immutable:</p>\n<pre><code>module \"landing_zone\" {\n  source                  = \"./modules/landing_zone\"\n  root_path               = path.module\n  landing_zone_providers  = var.landing_zone_providers\n  landing_zone_components = var.landing_zone_components\n}\nvariable \"landing_zone_providers\" {\n  type = map(map(string))\n}\nvariable \"landing_zone_components\" {\n  type = map(string)\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">VERY IMPORTANT: You can define lots of providers and include tons of components, but only the ones referenced in associated .tfvars files will be provisioned / deployed by terraform module.</p>\n<h3>Common Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">The following components are pretty common across our customers:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS Organization (referenced <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/terraform.tfvars#L22:L26\">here</a>)</li>\n<li>AWS Service Catalog</li>\n<li>AWS IAM, including Identity Providers; excluding AWS SSO</li>\n<li>Amazon VPC, including Subnets, Routes, Gateways, NACLs, Security Groups, Peering or Direct Connect (referenced <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/terraform.tfvars#L27:L40\">here</a>)</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">As you can see from above mentioned references, the demo <code>.tfvars</code> files are stored in <code>s3://terraform-aws-landing-zone/mycompany/[component_name]/default.tfvars</code> (publicly available). The goal is to provide reusable structure of immutable configurations that can consistently provision / deploy terraform resources (to be read: AWS resources) across multiple terraform providers (to be read: AWS accounts and/or AWS regions) without any need to make changes to landing zone components. Only <code>.tfvars</code> are changed over time.</p>\n<p class=\"graf graf-up margin-bottom-25\">But more importantly, we can use the same S3 bucket (or create one bucket per customer) and assign IAM temporary credentials (or cross account role) for each customer without exposing private information stored in <code>.tfvars</code> files. Every execution of terraform module can clearly delimit IAM credentials (or roles) for where <code>.tfvars</code> files are located, where <code>.tfstate</code> files are stored as backend and/or where AWS resources are provisioned / deployed.</p>\n<h3>Unique Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">Unique components are only unique on architecture diagram, while in reality all components are executed the same, meaning terraform configurations are open source and publicly available, while <code>.tfvars</code> files are private and pretty unique to every customer.</p>\n<p class=\"graf graf-up margin-bottom-25\">And, to be clear, not all landing zone components were creating AWS resources from scratch. For example, some customers already had VPCs or IAMs. In these cases, we used <code>terraform import</code> to bring in existing AWS resources and avoid duplicated or colliding resources.</p>\n<p class=\"graf graf-up margin-bottom-25\">Unfortunately we don’t have written permission to disclose customers names. That is why we will be referencing them below by their revenue from last year.</p>\n<h4>Customer #1: $49B in revenue</h4>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-08-01/customer1.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this case, we worked with a customer who is using the following 3rd party services and tools that are not native to AWS:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS SSO =&gt; Office 365</li>\n<li>AWS CodePipeline =&gt; Jenkins</li>\n<li>AWS GuardDuty =&gt; SignalFX</li>\n<li>Logs =&gt; Splunk</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">As shown in the diagram on the left, terraform based implementation of AWS Landing Zone is perfectly inline with AWS best practices. By replacing AWS native solutions with similar 3 party products, we were able to combine existing solutions and AWS cloud in perfect harmony.</p>\n<h4>Customer #2: $33B in revenue</h4>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-08-01/customer2.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this case, we worked with a customer who is using the following 3rd party services and tools that are not native to AWS:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS SSO =&gt; Ping Identity</li>\n<li>AWS CodePipeline =&gt; Bamboo</li>\n<li>Amazon S3 =&gt; Bitbucket</li>\n<li>AWS Parameter Store =&gt; Vault</li>\n<li>AWS GuardDuty =&gt; Alert Logic</li>\n<li>Logs =&gt; Datadog</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Similar to previous customer, the diagram on the left reflects a sustainable customization of AWS Landing Zone solution where some native components to AWS are being replaced with existing comparable 3rd party solutions.</p>\n<h4>Customer #3: $11B in revenue</h4>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-08-01/customer3.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this case, we worked with a customer who is using the following 3rd party services and tools that are not native to AWS:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS SSO =&gt; SiteMinder</li>\n<li>AWS CodePipeline =&gt; TravisCI</li>\n<li>Amazon S3 =&gt; GitHub</li>\n<li>AWS GuardDuty =&gt; OSSEC + Grafana</li>\n<li>Logs =&gt; Elastic + Grafana</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Similar to previous customers, the architecture diagram on the left is a customized version of AWS Landing Zone diagram with several AWS native solutions replace with similar 3rd party services or tools that customer already uses in their organization.</p>\n<h4>Summary</h4>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>This terraform module accepts arguments landing<em>zone</em>providers and landing<em>zone</em>components among others</li>\n<li>Providers and components can be as many as you want; Only the ones referenced in .tfvars files will be provisioned / deployed</li>\n<li>Ideally the code for landing zone components is immutable, while .tfvars files are adjustable over time</li>\n<li>Microservices architecture is highly recommended, aim for one terraform resource per one landing zone component</li>\n<li>Use terraform import for existing AWS resources to avoid duplication or collisions with landing zone components</li>\n</ol>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this article, we tried to describe relevant level of details associated with technical implementation of AWS Landing Zone solution using terraform module. We talked about 3 different customers without disclosing their names and any private information. Component based immutable terraform configurations with adjustable <code>.tfvars</code> files allowed advanced flexibility and reliable consistency across multiple AWS accounts using AWS best practices.</p>"},"my-architecture-aws-control-tower-vs-aws-landing-zone":{"Featured":"1","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 20 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-20/aws-reinforce.png","Title":"My Architecture: AWS Control Tower vs AWS Landing Zone","Intro":"Both Control Tower and Landing Zone help set up and manage secure multi-account AWS environments. Which one should customers use? Let’s take a closer look and figure out together.","minRead":"~ 3 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-20/aws-reinforce.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Source:\n       <a href=\"https://www.slideshare.net/AmazonWebServices/using-aws-control-tower-to-govern-multiaccount-aws-environments-at-scale-grc313r-aws-reinforce-2019\" target=\"_blank\">https://www.slideshare.net/AmazonWebServices/using-aws-control-tower-to-govern-multiaccount-aws-environments-at-scale-grc313r-aws-reinforce-2019</a>\n    </div>\n</div>\n<h3>What is AWS Control Tower?</h3>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://aws.amazon.com/controltower/faqs/#General\">Quote</a> : AWS Control Tower is a service that offers the easiest way to set up and govern a new, secure, multi-account AWS environment. It establishes a landing zone that is based on best-practices blueprints, and enables governance using guardrails you can choose from a pre-packaged list. The landing zone is a well-architected, multi-account baseline that follows AWS best practices. Guardrails implement governance rules for security, compliance, and operations.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-20/automating-lz.png\" alt=\"aws\" />\n    <div class=\"center img-description\">Source:\n       <a href=\"https://aws.amazon.com/blogs/apn/automating-your-aws-landing-zone-deployment-to-speed-up-large-scale-migrations\" target=\"_blank\">https://aws.amazon.com/blogs/apn/automating-your-aws-landing-zone-deployment-to-speed-up-large-scale-migrations</a>\n    </div>\n</div>\n<h3>What is AWS Landing Zone?</h3>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://aws.amazon.com/solutions/aws-landing-zone/\">Quote</a>: AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices. With the large number of design choices, setting up a multi-account environment can take a significant amount of time, involve the configuration of multiple accounts and services, and require a deep understanding of AWS services.</p>\n<h3>AWS Control Tower vs AWS Landing Zone</h3>\n<p class=\"graf graf-up margin-bottom-25\">Although official documentation explains <a href=\"https://aws.amazon.com/controltower/faqs/#AWS_Solution_and_Service_Comparisons\">the difference between AWS Control Tower and AWS Landing Zone</a>, we believe that customers should learn more details about these two offerings. And keep in mind, these solutions are not apples to apples comparable, more like apples to oranges.\nAWS Landing Zone solution was launched in <a href=\"https://aws.amazon.com/about-aws/whats-new/2018/06/introducing-aws-landing-zone/\">June 2018</a>, while AWS Control Tower was announced in <a href=\"https://aws.amazon.com/blogs/enterprise-strategy/aws-control-tower-and-aws-security-hub-powerful-enterprise-twins/\">November 2018</a> and launched in <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/06/aws-control-tower-is-now-generally-available/\">June 2019</a>. It’s not very clear why in just a couple of months AWS introduced two competing products. Based on our limited experience, we would assume AWS Landing Zone solution was very well received by enterprise customers, but in the same time required fundamental changes which led to AWS Control Tower service.\nAs of time of writing, AWS Control Tower doesn’t support existing setups for AWS Organization or AWS SSO, although official FAQ claims it will be added in the future, as well as ability to migrate from AWS Landing Zone solution to AWS Control Tower service.</p>\n<table class=\"table\">\n<thead>\n<tr class=\"graf graf--li graf-grap\">\n<th>Service or Feature</th>\n<th>AWS Control Tower</th>\n<th>AWS Landing Zone</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New AWS Organization account</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x274C; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Existing AWS Organization account</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New AWS SSO environment</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Existing AWS SSO environment</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New AWS Service Catalog environment</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Existing AWS Service Catalog environment</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New or Existing Security Hub environment</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x274C; no</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Support for CI/CD</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Interactive APIs</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x274C; no</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">CloudFormation template(s)</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Terrafom module(s)</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n</tbody>\n</table>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">Therefore, in summary, which one should we use: AWS Control Tower or AWS Landing Zone? The answer is: depends. If you start from scratch or can afford destroying existing AWS resources, then AWS Control Tower is the way forward. Otherwise, consider AWS Landing Zone and fingers crossed for future migration solution from AWS Landing Zone to AWS Control Tower.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"my-architecture-private-equity-platform-on-aws-cloud":{"Featured":"4","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 10 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-10/private-equity-platform.png","Title":"My Architecture: Private Equity Platform on AWS Cloud","Intro":"Over the last couple of years we have been working closely with several private equity companies to help them adopt public clouds. This article will describe the high level architecture of a leading private equity platform on AWS cloud.","minRead":"~ 5 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-10/private-equity-platform.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Private Equity Platform on AWS Cloud</div>\n</div>\n<h3>Private Equity Sector</h3>\n<p class=\"graf graf-up margin-bottom-25\">Private equity industry is pretty unique in the financial world because it offers important long-term advantages, including strong historical returns and diversification benefits. From a technical perspective, public clouds are becoming very important factors to private equity firms because of speed and agility combined with better results at lower costs.\nHistorically, private equity platforms were built and deployed on-premises, primarily driven by the private nature of the industry and the need to protect the secret sauce of deal making processes. Providers like AWS and GCP have become more relevant and very important to the industry because they proved over time that you can have it both ways: private and secure, as well as faster and cheaper.</p>\n<h3>Leading Private Equity Platform</h3>\n<p class=\"graf graf-up margin-bottom-25\">Since we don’t have a written permission to name the brand and the product, we will refer to this platform as leading private equity platform. We hope that in the future the company behind this platform will reconsider their position and allow us to be more specific.</p>\n<p class=\"graf graf-up margin-bottom-25\">This leading private equity platform allows PE companies to manage:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Investor Tracking</li>\n<li>Portfolio Management</li>\n<li>Customer Relationship Management</li>\n<li>Accounting</li>\n<li>Reporting and Auditing</li>\n<li>Batch Data Processing</li>\n<li>Business Events and Business Rules</li>\n<li>Team Security and Admin Tools</li>\n</ul>\n<h3>Reference Architecture on AWS Cloud</h3>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-10/reference-arch.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Reference Architecture on AWS Cloud</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Our team put together the reference architecture for leading private equity platform based on best practices described in <a href=\"https://d0.awsstatic.com/whitepapers/aws-web-hosting-best-practices.pdf\">Web Application Hosting in the AWS Cloud</a> white-paper and customers requirements to run it in highly available and highly scalable mode (see the picture on the left).\nCustomers / end users of leading private equity platform are connecting from personal computers, or mobile devices, or virtual desktops like Citrix and Amazon Workspaces to a DNS service called Amazon Route 53.</p>\n<h3>Networking</h3>\n<p class=\"graf graf-up margin-bottom-25\">Amazon Route 53’s latency based routing directs the customer to the closest AWS region (in our case, either North Virginia or Oregon) and corresponding ALB (which stands for Application Load Balancer). Reference architecture leverages 2 AWS regions and 3 AWS availability zones. The life of any chain of requests is lived in the region selected by Amazon Route 53 at the beginning and never goes across regions during its short lifetime.</p>\n<p class=\"graf graf-up margin-bottom-25\">When a PE company wants to save on infrastructure costs, we help them by reducing the number of active availability zones or, sometimes, the number of active regions, which results in reduced SLAs.</p>\n<p class=\"graf graf-up margin-bottom-25\">The ALB from above can be either public or private. Public means that underlying subnets are connecting to the Internet directly through Amazon’s Internet Gateway. Private means that underlying subnets are connecting to the Internet through customer’s data center(s) via Direct Connect or some other Private Gateway.</p>\n<h3>Web Servers</h3>\n<p class=\"graf graf-up margin-bottom-25\">This ALB proxies requests to a cluster of Amazon EC2 instances called Web Servers via port 443 (managed through WebSG security group). Each Web Server includes static components like HTML, CSS and JavaScript, as well as dynamic components like .NET 4.5/C# and IIS 7/8 running on top of Windows Server 2008/2012. These instances are wrapped into an ASG (aka Auto Scaling Group) to provide elasticity when needed. Everything is encrypted in transit and at rest.</p>\n<h3>App Servers</h3>\n<p class=\"graf graf-up margin-bottom-25\">Traffic from Web Servers is directed to a second ALB that is internal. This ALB proxies requests to a cluster of Amazon EC2 instances called App Servers via port 443 (managed through AppSG security group). Each App Server works as an internal API to the platform that includes .NET 4.5/C# and IIS 7/8 running on top of Windows Server 2008/2012. These instances are wrapped into an ASG (aka Auto Scaling Group) to provide elasticity when needed. Everything is encrypted in transit and at rest.</p>\n<p class=\"graf graf-up margin-bottom-25\">API functionality includes multiple layers like Web Services, Dynamic Web Forms, Business Rules and Business Events, Reporting Engine and Audit Engine, Domain Models, Data Access Objects and many others.</p>\n<h3>Database</h3>\n<p class=\"graf graf-up margin-bottom-25\">Traffic from App Servers is directed to Amazon RDS for SQL Server cluster which consists of master node and standby node. Only master node is available for querying, while standby node isn’t exposed until master becomes unavailable. This RDS capability is called Multi-AZ and uses SQL Server’s native Always On feature. Everything is encrypted in transit and at rest.</p>\n<p class=\"graf graf-up margin-bottom-25\">Running Amazon RDS for SQL Server cross region replication is still a challenge that doesn’t have a native solution yet. Luckily, AWS introduced last year <a href=\"https://aws.amazon.com/blogs/database/introducing-ongoing-replication-from-amazon-rds-for-sql-server-using-aws-database-migration-service/\">ongoing replication from Amazon RDS for SQL Server using AWS Database Migration Service.</a></p>\n<h3>Security</h3>\n<p class=\"graf graf-up margin-bottom-25\">Security and Compliance on AWS is achieved using shared responsibility model. This means that cloud provider operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates. Everything else is customer’s responsibility.</p>\n<p class=\"graf graf-up margin-bottom-25\">Reference architecture for leading private equity platform on AWS cloud makes it easier and faster to achieve a secure environment using industry’s best practices. Just to name a couple:</p>\n<h3>Security</h3>\n<p class=\"graf graf-up margin-bottom-25\">Security and Compliance on AWS is achieved using shared responsibility model. This means that cloud provider operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates. Everything else is customer’s responsibility.</p>\n<p class=\"graf graf-up margin-bottom-25\">Reference architecture for leading private equity platform on AWS cloud makes it easier and faster to achieve a secure environment using industry’s best practices. Just to name a couple:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Everything is encrypted in transit and at rest</li>\n<li>Keys and other secrets are rotated on regular basis</li>\n<li>Security groups and IAM roles are following least privilege principle</li>\n<li>Infrastructure resources are deployed in private subnets where necessary</li>\n</ul>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">Running leading private equity platform on AWS cloud is a privilege that comes with a lot of challenges. We overcame those challenges by putting together a reference architecture and by continuing to help PE companies through successful customers’ experience.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"stronger-security-with-terraform-module-for-aws-landing-zone":{"Featured":"2","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 18 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-18/terraform-module.png","Title":"Stronger Security with Terraform Module for AWS Landing Zone","Intro":"Terraform module for AWS Landing Zone solution is offering a stronger security promise. Let’s dive deeper into main security components and understand some practical implications.","minRead":"~ 5 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-18/terraform-module.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Landing Zone / Terraform Module Components</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution includes an initial security baseline that can be used as a starting point for establishing and implementing a customized account security baseline for your organization. By default, the initial security baseline includes the following settings:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Amazon Virtual Private Cloud (VPC) &amp; Amazon VPC Flow Logs</li>\n<li>AWS CloudTrail &amp; AWS CloudTrail Logs</li>\n<li>AWS Config &amp; AWS Config Rules</li>\n<li>AWS Identity and Access Management (IAM)</li>\n<li>Cross-Account Access via AWS IAM</li>\n<li>AWS Single Sign-On (SSO)</li>\n<li>Amazon GuardDuty</li>\n<li>Security Notifications via Amazon SNS</li>\n<li>and more (e.g. KMS, CloudWatch, Security Hub, etc.)</li>\n</ul>\n<h3>Landing Zone Security Components</h3>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-18/terraform-module-2.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Landing Zone / Terraform Module Components</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Last week we covered in great length of details <a href=\"https://blog.mitocgroup.com/terraform-module-components-for-aws-landing-zone-solution-c74267a0e70c\">Terraform Module Components for AWS Landing Zone Solution</a>. We <code>used landing_zone_vpc</code> component as a reference to describe what a component is and how does it work. This week we would like to dive deeper into security focused components. Specifically:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>landing<em>zone</em>vpc</li>\n<li>landing<em>zone</em>subnet</li>\n<li>landing<em>zone</em>security_group</li>\n<li>landing<em>zone</em>cloudtrail</li>\n<li>landing<em>zone</em>config</li>\n<li>landing<em>zone</em>iam_role</li>\n<li>landing<em>zone</em>sso</li>\n</ul>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-18/service-mapped.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Services Mapped to Landing Zone Security Components</div>\n</div>\n<h3>Landing Zone VPC</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS provides security capabilities and services to increase privacy and control network access. For example, Amazon VPC is offering by design built-in network firewalls that isolate AWS resources from both outside world and other inside networks.\n<a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_vpc\">Landing Zone VPC component</a> allows customers to customize these network boundaries beyond default settings. Implemented as terraform component, this piece of infrastructure as code empowers users to import existing VPCs (therefore no downtime), as well as create new VPCs that can easily replace current networks or work as an extension to existing networks.</p>\n<h3>Landing Zone Subnet</h3>\n<p class=\"graf graf-up margin-bottom-25\">Amazon VPC allows customers to create virtual networks and divide them into subnets. VPC subnets are mapped to specific Availability Zones (AZs) and, therefore, subnet placement is one mechanism to ensure AWS resources are properly distributed across multiple data centers / different physical locations.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_subnet\">Landing Zone Subnet component</a> allows customers to specify the mapping between CIDR block(s) and AZs. As any other terraform implementation, existing subnets can be reused without downtime or created from scratch. Any future AWS resource will be using one (or multiple) subnets to be created (or updated) in any specific AZ (or AZs). This component is directly dependent on Landing Zone VPC.</p>\n<h3>Landing Zone Security Group</h3>\n<p class=\"graf graf-up margin-bottom-25\">A security group acts as a virtual stateful firewall that controls the traffic into specific AWS resource. This mandatory firewall is configured in a default deny-all mode and customers must explicitly open the ports needed to allow inbound traffic. Traffic can be restricted by protocol, by service port, and also by source IP address (individual IP or CIDR block) or another security group.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_security_group\">Landing Zone Security Group component</a> allows customers to pinpoint ingress and egress firewall rules. Using terraform implementation, existing rules can be imported and reused without downtime, empowering teams to provision and manage their network level firewalls as code. This component is directly dependent on Landing Zone VPC.</p>\n<h3>Landing Zone CloudTrail</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing by logging every action to AWS APIs associated with your AWS account(s). With CloudTrail, you can continuously monitor and retain account activity related to actions across your AWS infrastructure.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_cloudtrail\">Landing Zone CloudTrail component</a> allows customers to centralize all logs into single storage location across all accounts linked to AWS Organization. Terraform implementation empowers users to reuse existing trails and/or existing logs without any gaps in historical data. Remember, AWS CloudTrail is not able to back-fill missing logs if turned off or mismanaged.</p>\n<h3>Landing Zone Config</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Config is a service that maintains a configuration history of your AWS resources and evaluates the configuration against best practices and your internal policies. Config rules can be used to audit your use of AWS for compliance with external compliance frameworks such as the CIS AWS Foundations Benchmark, or with your internal security policies related to the US Health Insurance Portability and Accountability Act (HIPAA), the Federal Risk and Authorization Management Program (FedRAMP), and others.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_config\">Landing Zone Config component</a> allows customers to implement in terraform the recording and the rules needed to manage inventory and configuration of AWS resources, as well as change management to those resources over time. Terraform import can map existing AWS resources to current tfstates and tfvars, while missing recording and/or rules will be created from scratch.</p>\n<h3>Landing Zone IAM Role</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Identity and Access Management (IAM) enables customers to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow or deny access to AWS resources.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_iam_role\">Landing Zone IAM Role component</a> allows customers to customize access to AWS resources by managing security controls as terraform configurations. If users already have existing IAM roles, terraform will import and reuse them, otherwise they will be created from scratch.</p>\n<h3>Landing Zone SSO</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Single Sign-On (SSO) is a cloud service that makes it easy to centrally manage SSO access to multiple AWS accounts and business applications. AWS SSO supports Security Assertion Markup Language (SAML) 2.0 integrations, which extends SSO access to any potential SAML-enabled applications.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_sso\">Landing Zone SSO component</a> allows customers to specify which AWS accounts and/or business applications will be integrated into AWS SSO. Terraform implementation empowers security engineers and teams to reuse existing setup, as well as bring new integrations into this service by using centralized infrastructure as code processes powered by terraform.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone\">Terraform module</a> for <a href=\"https://aws.amazon.com/solutions/aws-landing-zone/\">AWS Landing Zone</a> solution is delivering a promise of a stronger security. This module implements core security services and integrations that are recommended by AWS best practices, as well as industry security and compliance frameworks. As we evolve this module, we will be constantly adding new security focused components (e.g. AWS Security Hub, AWS Control Tower, AWS Transit Gateway, etc).</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"terraform-module-components-for-aws-landing-zone-solution":{"Featured":"3","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 13 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-13/code.png","Title":"Terraform Module Components for AWS Landing Zone Solution","Intro":"The core innovation in terraform module for AWS Landing Zone solution is the immutable nature of components. Let’s dive deeper into what a component is and how does it work.","minRead":"~ 4 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">To make sure that everybody has the same understanding about <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone#how-does-this-module-work\">Terraform Module for AWS Landing Zone</a> solution, here below is how <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/main.tf\">this module</a> looks like at the time of writing:</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-13/code.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">And if we take a look at <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/terraform.tfvars\">terraform.tfvars</a>, we should see something like this:</p>\n<pre><code>landing_zone_providers = {\n  default = {\n    account_id = \"123456789012\"\n    region     = \"us-east-1\"\n  }\n  [...]\n}\nlanding_zone_components = {\n  landing_zone_vpc = \"s3://terraform-aws-landing-zone/mycompany/landing_zone_vpc/default.tfvars\"\n  [...]\n}\nlanding_zone_backend = {\n  backend = \"local\"\n  path    = \"/tmp/.terrahub/landing_zone\"\n}\n</code></pre>\n<h3>Immutable Nature of Landing Zone Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Landing Zone solution addresses the challenge of managing multiple accounts in a faster and more secure manner, following AWS best practices. AWS empowers customers to use immutable patterns for resource allocation, but the complexity of managing terraform or cloudformation scripts that manages those resources is still pretty big.</p>\n<p class=\"graf graf-up margin-bottom-25\">That is why terraform module for AWS Landing Zone is designed to be dynamic, therefore reducing management complexity while still keeping high level of security. Each element of <code>landing_zone_components</code> variable is a pair where the key is component’s name (immutable and static) and the value is path to <code>.tfvars</code> file (mutable and dynamic). This setup allows customers to focus on dynamic aspects of their AWS environments, while terraform codebase almost never changes.</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: In case some terraform config would need to change, instead of updating existing component, create a new one and update <code>landing_zone_components</code> list.</em></p>\n</blockquote>\n<h3>The Structure of Landing Zone Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">When looking at each component defined in <code>landing_zone_components</code> map, the first issue that jumps into our sight is YAML format instead of HCL (Why? More on this later…) But what’s more important at this point is the emerging repeatable pattern. For example, <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml\">landing<em>zone</em>vpc</a> looks something like this:</p>\n<pre><code>component:\n  name: landing_zone_vpc\n  template:\n    locals:\n      elements_landing_zone_vpc_map: var.${tfvar.terrahub[\"landing_zone_providers\"][\"0\"]}_provider[\"landing_zone_vpc_resource\"]\n      [...]\n    resource:\n      aws_vpc:\n        landing_zone_vpc:\n          provider: 'aws.${tfvar.terrahub[\"landing_zone_providers\"][\"0\"]}'\n          count: length(var.${tfvar.terrahub[\"landing_zone_providers\"][\"0\"]}_provider[\"landing_zone_vpc_resource\"])\n          cidr_block: local.elements_landing_zone_vpc_map[\"config_${count.index}\"][\"cidr_block\"]\n          [...]\n    output:\n      [...]\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">And the corresponding <a href=\"https://terraform-aws-landing-zone.s3.amazonaws.com/mycompany/landing_zone_vpc/default.tfvars\">default.tfvars</a> (from <em>s3://terraform-aws-landing-zone/mycompany/landing</em>zone<em>vpc/default.tfvars</em>) looks like this:</p>\n<pre><code>landing_zone_providers = [\n  \"default\"\n]\ndefault_provider = {\n  landing_zone_vpc_tags_element = {\n    config_0 = {\n      Name        = \"VPC for Landing Zone\"\n      Description = \"Managed by TerraHub\"\n      ThubCode    = \"1234abcd\"\n      ThubEnv     = \"prod\"\n    }\n  },\n  landing_zone_vpc_resource = {\n    config_0 = {\n      cidr_block                       = \"172.16.0.0/16\"\n      instance_tenancy                 = \"default\"\n      assign_generated_ipv6_cidr_block = \"false\"\n      enable_classiclink               = \"false\"\n      enable_classiclink_dns_support   = \"false\"\n      enable_dns_support               = \"true\"\n      enable_dns_hostnames             = \"false\"\n    }\n  }\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">Let’s connect these two pieces from above:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L10\">Line 10</a>: this component will create terraform resource <a href=\"https://www.terraform.io/docs/providers/aws/r/vpc.html\">aws_vpc</a></li>\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L12\">Line 12</a>: this component will create separate terraform provider <a href=\"https://www.terraform.io/docs/providers/aws/index.html\">aws</a> for each value from <code>landing_zone_providers</code> variable (which in practice how AWS accounts and AWS regions are separated in terraform)</li>\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L14\">Line 14</a>: this component will iterate through <code>landing_zone_providers</code>, expecting specific variable for each provider (e.g. <code>default_provider</code>); that is why it’s required to define all <code>[provider_name]_provider</code> variables (e.g. if <code>landing_zone_providers</code> has values <code>default</code>, <code>alpha</code> and <code>beta</code>, it’s expected .tfvars file(s) to define variables <code>default_provider</code>, <code>alpha_provider</code> and <code>beta_provider</code>)</li>\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L16\">Line 16</a>: this component uses <code>count</code> to iterate through resources defined by variable <code>landing_zone_vpc_resource</code>; to use native terraform capability, define <code>[component_name]_resource</code> values as iterate-able list of elements <code>config_[iterator]</code> (e.g. <code>config_0</code>, <code>config_1</code>, and so on)</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Ideal proposed structure for <code>.tfvars</code> file(s) should be the following:</p>\n<pre><code>landing_zone_providers = [\n  \"default\"\n  \"{{alpha_provider}}\"\n  \"{{beta_provider}}\"\n  [...]\n]\ndefault_provider = {\n  {{component_name}}_resource = {\n    config_0 = {\n      [...]\n    },\n    config_1 = {\n      [...]\n    },\n    [...]\n  }\n}\n{{alpha_provider}}_provider = {\n  {{component_name}}_resource = {\n    [...]\n  }\n}\n{{beta_provider}}_provider = {\n  [...]\n}\n[...]\n</code></pre>\n<h3>Landing Zone Components Using YAML Instead of HCL</h3>\n<p class=\"graf graf-up margin-bottom-25\">Consider the following: Our goal for this terraform module is to empower users to do less by using native terraform capabilities, but we couldn’t do that primarily because HCL doesn’t allow usage of variables inside <code>.tfvars</code> files and doesn’t support iterations through providers. For these reasons (and a couple of more) we opted into using <a href=\"https://npmjs.com/package/terrahub\">terrahub cli</a> — terraform automation and orchestration tool.</p>\n<p class=\"graf graf-up margin-bottom-25\">When executing <code>terraform init</code> and <code>terraform apply</code> on <code>landing_zone module</code>, the underlying code triggers <code>terrahub run</code> for entire list of <code>landing_zone_components</code>. Internally, landing zone components in YAML format are converted into HCL. This terrahub feature is called JIT (aka Just In Time) and, as the name suggests, YAML configs are converted into HCL in real-time during terraform workflow execution.</p>\n<p class=\"graf graf-up margin-bottom-25\">For example, above mentioned component <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml\">landing<em>zone</em>vpc</a> defined as <code>.yml</code> file will be converted into the following set of <code>.tf</code> files:</p>\n<pre><code>$ ls ~/.terrahub/cache/jit/landing_zone_vpc_eef16dcf/\nREADME.md    default.tfvars    locals.tf    main.tf        output.tf    provider.tf    terraform.tf    variable.tf\n</code></pre>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: In order to debug JIT converted files from YAML format into HCL go to <strong>~/.terrahub/cache/jit/</strong> folder and explore corresponding component(s). If specific component is missing, execute <code>terrahub run -i [component_name]</code> in order to generate corresponding <code>[component_name]_[hash]</code> folder and <code>.tf</code> files.</em></p>\n</blockquote>\n<h3>Putting Everything Together</h3>\n<p class=\"graf graf-up margin-bottom-25\">After putting everything together, we get a very powerful terraform module:</p>\n<pre><code>$ terraform init\nInitializing modules...\n- landing_zone in modules/landing_zone\n\n[...]\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">and</p>\n<pre><code>$ terraform apply\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n[...]\nApply complete! Resources: 3 added, 0 changed, 0 destroyed.\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">And that’s it. We hope it helps.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"}}
