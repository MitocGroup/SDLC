{"scaleup-award-winner-stories":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sun, 12 June 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-06-12/scaleup-award-winner-stories.png","Title":"StackWorld ScaleUp Award Winner Stories","Intro":"","minRead":"~ 1 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-06-12/scaleup-award-winner-stories.png\" alt=\"winner story\" />\n    <div class=\"center img-description\">\n        <a href=\"http://www.stackworld.com/awards/scaleup-winner-stories\" rel=\"noreferrer\">http://www.stackworld.com/awards/scaleup-winner-stories</a>)\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"http://www.stackworld.com/\">StackWorld</a> is San Francisco’s Largest DevOps + Scalability Technology Conference where 1,200+ tech companies scale their technology stack from Clouds to DevOps Tools to Back-End Coding Languages. The goal of StackWorld is to connect the community and educate practitioners on scaling their applications and technology stacks. “DevOps” has emerged as an intersection between Developers and IT — where specialized DevOps professionals and DevOps technologies allow applications to scale and get delivered at faster speeds.</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is humble and proud to be nominated among companies like New Relic or Sumo Logic, and voted for <a href=\"http://www.stackworld.com/awards/scaleup-winner-stories\">Top 25 ScaleUp Award</a>. On behalf of our customers and our partners, as well as the entire team who works on <a href=\"https://github.com/MitocGroup/deep-framework\">DEEP Framework</a>, <a href=\"https://www.npmjs.com/packages/deepify\">DEEP CLI</a> and <a href=\"https://www.deep.mg/\">DEEP Marketplace</a>, we would like to thank everybody who believes in our capabilities and recognize our achievements.</p>\n<p class=\"graf graf-up margin-bottom-25\">Looking forward to StackWorld 2016 and please join our session <strong>“Building Scalable Web Applications using Microservices Architecture and Serverless Computing from AWS”</strong> on Tuesday, June 28th at 10am.</p>"},"blue-green-deployments-for-serverless-powered-applications-on-aws":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Thu, 20 October 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-10-20/lambda-edge.png","Title":"Blue-Green Deployments for Serverless Powered Applications on AWS","Intro":"First described by Martin Fowler back in 2010, blue-green deployment is \na release technique that reduces downtime and risk by running two identical \nproduction environments called Blue and Green.","minRead":"~ 6 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2016-11-29/partner-network.jpeg\" alt=\"lambda edge\" />\n    <div class=\"center img-description\">Source:\n        <a href=\"https://devopscube.com/wp-content/uploads/2016/12/lamda@edge.png\" rel=\"noreferrer\">https://devopscube.com/wp-content/uploads/2016/12/lamda@edge.png</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Fast-forwarding to 2013, <a href=\"https://github.com/dtsato\">Danilo Sato</a> from ThoughtWorks published on their blog a very insightful article that describes <a href=\"https://www.thoughtworks.com/insights/blog/implementing-blue-green-deployments-aws\">how to implement blue-green deployments using AWS.</a> We, at Mitoc Group, are working primarily with serverless computing from AWS, and today we’d like to share our experience using blue-green deployment process for serverless powered applications.</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>Note: This blogpost uses intentionally screenshots from AWS Management Console to outline a Do-It-Yourself point of view, but we’ll also provide (wherever possible) the equivalent devops command or tool, to make sure that more advanced audience is NOT bored to death :)</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">The key points to keep in mind as we move forward:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>We use <strong>full stack</strong> approach to build web applications using serverless computing from AWS (not just AWS Lambda and API Gateway)</li>\n<li>We enforce <strong>security in every layer</strong> and <strong>least privilege access</strong> (e.g. front-end tier, back-end tier, data tier, as well as centralized monitoring)</li>\n<li>We apply the same approach to newly built applications, as well as newly cloud-migrated applications that are compatible with <strong>microservices architecture</strong> (we call them <strong>cloud-native applications</strong>)</li>\n</ol>\n<h3>Serverless Architecture on AWS</h3>\n<p class=\"graf graf-up margin-bottom-25\">Before we dive into the details of the blue-green deployment process for serverless powered applications, it’s vital to point out the architecture of a typical web application that uses serverless computing from AWS (as shown in the picture below, as well as described in <a href=\"https://blog.mitocgroup.com/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\">this blogpost</a>).</p>\n<div class=\"img-post-left\">\n    <img src=\"https://miro.medium.com/max/3968/1*obn8oKjcqkJJUIZ2bB59xg.png\" alt=\"lambda-deep-framework\" />\n    <div class=\"center img-description\">\n        <a href=\"https://blog.mitocgroup.com/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff\" rel=\"noreferrer\">https://blog.mitocgroup.com/building-enterprise-level-web-applications-on-aws-lambda-with-the-deep-framework-dd81719b0dff</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Here below is the summarized list of AWS products we use:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Security tier: 1) <a href=\"https://aws.amazon.com/iam/\">AWS IAM</a> and 2) <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a></li>\n<li>Front-end tier: 3) <a href=\"https://aws.amazon.com/route53/\">Amazon Route53</a>, 4) <a href=\"https://aws.amazon.com/cloudfront/\">Amazon CloudFront</a> and 5) <a href=\"https://aws.amazon.com/s3/\">Amazon S3</a></li>\n<li>Back-end tier: 6) <a href=\"https://aws.amazon.com/api-gateway/\">Amazon API Gateway</a>, 7) <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> and 8) <a href=\"https://aws.amazon.com/sns/\">Amazon SNS</a></li>\n<li>Data tier: 9) <a href=\"https://aws.amazon.com/dynamodb/\">Amazon DynamoDB</a>, 10) <a href=\"https://aws.amazon.com/sqs/\">Amazon SQS</a>, 11) <a href=\"https://aws.amazon.com/elasticache/\">Amazon ElastiCache</a> and 12) <a href=\"https://aws.amazon.com/elasticsearch-service/\">Amazon Elasticsearch Service</a></li>\n<li>Monitoring tier: 13) <a href=\"https://aws.amazon.com/cloudwatch/\">Amazon CloudWatch</a>, 14) <a href=\"https://aws.amazon.com/cloudtrail/\">AWS CloudTrail</a> and 12) <a href=\"https://aws.amazon.com/elasticsearch-service/\">Amazon Elasticsearch Service</a></li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\"><em><code>Note: As you can see above, a typical web application in our case uses 14 different services from AWS. Also, Amazon CloudSearch is a much better fit as a serverless option for full-text search capabilities, but we prefer Elasticsearch technology and Amazon Elasticsearch Service instead</code></em></p>\n<h3>Pre-requisites and Initial Considerations</h3>\n<p class=\"graf graf-up margin-bottom-25\">The blue-green deployment for serverless powered applications is happening entirely on the front-end tier, mainly because all other resources from back-end, data, monitoring and security tiers are duplicated and therefore are NOT altered during this process. So, going forward, we’ll be describing only the changes that will be applied to Amazon Route53, Amazon CloudFront and Amazon S3 during any serverless blue-green deployment.</p>\n<p class=\"graf graf-up margin-bottom-25\">The simplest and most straight-forward approach to blue-green deployments for serverless powered applications is to switch all traffic from blue environment to green environment on DNS level (and in case of failures, rollback from green environment to blue environment).</p>\n<p class=\"graf graf-up margin-bottom-25\">Managing DNS records can be sometimes very tricky, mainly because the propagation might take unpredictable time due to various caching layers on Internet. But our experience with Amazon Route53 is amazing, as long as we are using A alias records instead of CNAME records. Here below are 3 screenshots from AWS Management Console that shows how we’ve setup <em>www1.adtechmedia.io</em> in Amazon Route53, Amazon CloudFront and Amazon S3:</p>\n<div class=\"maxHeight500px center padd25px\">\n    <img src=\"/images/blog/2016-10-20/edit-record-set.png\" alt=\"edit-record-set\" />\n    <div class=\"center img-description\">\n        aws route53 list-resource-record-sets --hosted-zone-id [YOUR_HOSTED_ZONE_ID]\n    </div>\n</div>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-10-20/get-distribution.png\" alt=\"get-distribution\" />\n    <div class=\"center img-description\">\n        aws cloudfront get-distribution --id [YOUR_DISTRIBUTION_ID]\n    </div>\n</div>\n<div class=\"\">\n    <img src=\"/images/blog/2016-10-20/stati-webhosting.png\" alt=\"static-webhosting\" />\n    <div class=\"center img-description\">\n        aws s3 website s3://www1.adtechmedia.io/ --index-document index.html --error-document error.html\n    </div>\n</div>\n<h3>Blue/Green Deployments v1</h3>\n<p class=\"graf graf-up margin-bottom-25\">At this point, we are ready to switch from blue environment to green environment with zero downtime and low risks. The switch is quite simple:</p>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Step 1:</strong> Update CloudFront distribution for blue environment by removing <em>www1.adtechmedia.io</em> from Alternative Domain Names (CNAMEs)</p>\n<div class=\"\">\n    <img src=\"/images/blog/2016-10-20/step1.png\" alt=\"step1\" />\n    <div class=\"center img-description\">\n        aws cloudfront update-distribution --distribution-config file://distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Step 2:</strong> Update CloudFront distribution for green environment by adding <em>www1.adtechmedia.io</em> to Alternative Domain Names (CNAMEs)</p>\n<div class=\"\">\n    <img src=\"/images/blog/2016-10-20/step2.png\" alt=\"step2\" />\n    <div class=\"center img-description\">\n        aws cloudfront update-distribution --distribution-config file://distconfig-disabled.json --id [YOUR_DISTRIBUTION_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\"><strong>Step 3:</strong> Update Route53 A alias record with CloudFront distribution Domain Name from green environment</p>\n<div class=\"maxHeight500px center\">\n    <img src=\"/images/blog/2016-10-20/step3.png\" alt=\"step3\" />\n    <div class=\"center img-description\">\n        aws route53 change-resource-record-sets --change-batch file://resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">If, for some unexpected reason, your green environment starts generating high level of failures, the rollback process is pretty similar to the one described above:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Remove CNAME from green environment</li>\n<li>Add CNAME to blue environment</li>\n<li>Update Amazon Route53 with blue environment Domain Name</li>\n</ol>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>UPDATE on 11/03/2016: A friend pointed out that it’s not necessarily to add/remove CNAMEs (which could take up to 20 minutes to propagate). Instead, just leave blue environment as it is (e.g. www1.adtechmedia.io) and setup wild carded CNAME on green environment (e.g. *.adtechmedia.io). When both distributions are enabled, blue will take precedence over green, making sure you’re not stuck with new deploy in case of high level of failures.</em></p>\n</blockquote>\n<h3>Blue/Green Deployments v2</h3>\n<p class=\"graf graf-up margin-bottom-25\">As you have seen in the previous blue-green deployments process the traffic between environments is switched suddenly, at 100% capacity. This is great for zero downtime, but if your application starts to fail, all of your users are affected. Some modern continuous deployment technics promote a more gradual switch of the traffic between environments. For example, we push only 5% of requests to green environment, while 95% still goes to blue environment. This allows to detect production problems early and on a much smaller audience of users, problems that have never surfaced in testing and staging phases. Is it possible to enable such an approach for serverless powered applications?</p>\n<p class=\"graf graf-up margin-bottom-25\">Short answer, yes! We’re very excited and humble to be able to explain our serverless solution, but there are some additional pre-requisites that must happen before. Let’s describe the challenge first, and then jump into our implementation and pre-requisites.</p>\n<h4>The Challenge</h4>\n<p class=\"graf graf-up margin-bottom-25\">Amazon CloudFront, the way it is designed, doesn’t allow same CNAME on multiple distributions. That is also the reason why we’re removing it from the blue environment and adding it to the green environment in our previous implementation.</p>\n<h4>Our implementation</h4>\n<p class=\"graf graf-up margin-bottom-25\">Amazon Route53 allows weighted routing of the traffic across multiple Amazon CloudFront distributions, Amazon S3 static websites and other endpoints. So, instead of load balancing requests between distributions, we are changing current A alias record that points to blue environment from simple routing to weighted routing, and add another A alias record as green environment that points directly to Amazon S3 static website endpoint. This enables us to manipulate requests across environments as we wish: 95% vs 5% (as shown in the screenshot below), then (if everything is fine) 90% vs 10%, and so on until blue is 0% and green is 100%.</p>\n<div class=\"maxHeight500px center\">\n    <img src=\"/images/blog/2016-10-20/hosted-zone-id.png\" alt=\"hosted-zone-id\" />\n    <div class=\"center img-description\">\n        aws route53 change-resource-record-sets --change-batch file://resource-record.json --hosted-zone-id [YOUR_HOSTED_ZONE_ID]\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">All changes are made on Amazon Route53 level, without altering Amazon CloudFront or Amazon S3 resources. And compared to previous blue-green deployment, rollback process is even faster and easier. We remove A alias record of green environment and we’re done! Well, almost done… For consistency and cost saving purposes, we also revert back A alias record of blue environment from weighted routing to simple routing.</p>\n<h3>Final Thoughts and Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">What are the down sizes (pre-requisites) of the blue-green deployments v2?</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Amazon S3 static website hosting doesn’t support SSL, so we find ourselves temporarily enforcing HTTP-only during blue-green deployment</li>\n<li>Amazon S3 static endpoint can be used with Amazon Route53 A alias only if the bucket name is the same with the domain name (e.g. <a href=\"http://www.adtechmedia.io\">www.adtechmedia.io</a>)</li>\n<li>Depends on the traffic size, specifically how much TPS you’re consuming, Amazon S3 might start throttling you (more details here: <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/request-rate-perf-considerations.html\">Request Rate and Performance Considerations</a>)</li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Unfortunately, there is no silver bullet that would work perfectly for any serverless powered applications on AWS. As with any software, it’s up to us (developers or devops engineers) to decide the right process that fits specific use case. We just wanted to share two different approaches that empowered us to provide high quality at scale without compromising on resources and costs (which, by the way, are ridiculously low, but that’s another blogpost).</p>\n<div class=\"center img-description\">\n        <a href=\"https://blog.mitocgroup.com/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8\">\n        https://blog.mitocgroup.com/mitoc-group-featured-as-frameworks-partner-by-aws-lambda-team-a7d3d5632cf8</a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Last, but not the least, <a href=\"https://www.mitocgroup.com/\">Mitoc Group</a> is a technology company that focuses on innovative enterprise solutions. Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a> or <a href=\"https://facebook.com/mitocgroup\">Facebook</a>.</p>"},"mitoc-group-inc-achieves-aws-service-delivery-partner-status-for-aws-lambda":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 29 Novembre 2016 12:20:55 -0400","Thumbnail":"/images/blog/2016-11-29/partner-network.jpeg","Title":"Mitoc Group Inc. Achieves AWS Service Delivery Partner Status for AWS Lambda","Intro":"","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-11-29/partner-network.jpeg\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       Mitoc Group Inc. achieves AWS Service Delivery Partner status for AWS Lambda\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Woodcliff Lake, NJ — Nov. 29, 2016 – <a href=\"https://www.mitocgroup.com/\">Mitoc Group Inc.</a>, a technology company that focuses on innovative enterprise solutions, announced today that it has achieved AWS Service Delivery Partner status for AWS Lambda. The AWS Service Delivery Program is designed to highlight AWS Partner Network (APN) Partners who have a track record of delivering verified customer success for specific Amazon Web Services (AWS) products.</p>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Service Delivery Program was recently launched to help AWS customers find qualified APN Partners that provide expertise in a specific service or skill area. To qualify, partners must pass service-specific verification of customer references and a technical review, meaning customers can be confident they are working with partners that provide recent and relevant experience.</p>\n<p class=\"graf graf-up margin-bottom-25\">“Mitoc Group is proud to be one of the first APN partners to participate in the AWS Service Delivery Program,” said <a href=\"https://linkedin.com/in/eistrati\">Eugene Istrati</a>, Technology Partner at Mitoc Group. “Our team has built a base of applied experience around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of the AWS Cloud.”</p>\n<p class=\"graf graf-up margin-bottom-25\">APN Partners with AWS Service Delivery Partner Status for AWS Lambda provide services and tools that help customers build or migrate their solutions to a micro-services based serverless architecture, without the need to worry about provisioning or managing servers.</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is helping customers like <a href=\"https://www.manning.com/\">Manning Publications</a> build a new product intended to give users better access to for-pay content. “ We haven’t had the best experiences when developing new products in the past,” said Marjan Bace, Publisher at Manning. “With AWS Lambda, there’s a noticeable difference in the speed of development. We’re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.”</p>\n<p class=\"graf graf-up margin-bottom-25\">About Mitoc Group</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact <a href=\"mailto:hello@mitocgroup.com\">hello@mitocgroup.com</a> or visit <a href=\"https://www.mitocgroup.com/\">www.mitocgroup.com</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com</a>.</p>"},"mitoc-group-inc-granted-aws-advanced-technology-partner-status":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 21 July 2017 12:20:55 -0400","Thumbnail":"/images/blog/2016-11-29/partner-network.jpeg","Title":"Mitoc Group Inc. Granted AWS Advanced Technology Partner Status","Intro":"Congratulations! Your Firm Has Been Accepted into the Advanced AWS Partner Network (APN) Tier.","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2016-11-29/partner-network.jpeg\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       Mitoc Group Inc. achieves AWS Service Delivery Partner status for AWS Lambda\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Woodcliff Lake, NJ — July 21, 2017 — Mitoc Group Inc., a technology company that focuses on innovative enterprise solutions, announced today that it has been granted <a href=\"https://aws.amazon.com/partners/technology\">AWS Advanced Technology Partner</a> status by Amazon Web Services, recognizing its ability to help businesses and developers drive innovation using DevOps and Serverless on the AWS Cloud.</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is also part of the <a href=\"https://aws.amazon.com/partners/saas/\">AWS SaaS Partner Program</a> which provides APN Technology Partners with support as they build, launch, and grow SaaS solutions on AWS. The company and its staff is very proud to join the ranks of Chef and Puppet, US based companies that pioneered DevOps landscape.</p>\n<p class=\"graf graf-up margin-bottom-25\">“We are thrilled to be named an Advanced Technology Partner in the AWS Partner Network,” said <a href=\"https://linkedin.com/in/eistrati\">Eugene Istrati</a>, Technology Partner at Mitoc Group. “Our team has built a base of innovative products and simplified processes around AWS Lambda, and we are dedicated to helping customers achieve their business goals by leveraging the agility of DevOps and Serverless on the AWS Cloud.”</p>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is helping customers like <a href=\"https://www.manning.com/\">Manning Publications</a> build a new product intended to give users better access to for-pay content. “ We haven’t had the best experiences when developing new products in the past,” said Marjan Bace, Publisher at Manning. “With AWS Lambda, there’s a noticeable difference in the speed of development. We’re able to follow an agile process that includes quick feature redesign, which leads to a much better experience.”</p>\n<h4>About Mitoc Group</h4>\n<p class=\"graf graf-up margin-bottom-25\">Mitoc Group is a technology company that focuses on innovative enterprise solutions. Our mission is to enable businesses and developers to provide high-value products and services in a constantly changing digital world. To learn more, contact hello@mitocgroup.com or visit <a href=\"https://www.mitocgroup.com/\">www.mitocgroup.com</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Media Contact: <a href=\"mailto:press@mitocgroup.com\">press@mitocgroup.com</a>.</p>"},"aws-re-invent-2017-serverless-chalk-talk":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 24 November 2017 12:20:55 -0400","Thumbnail":"/images/blog/2017-11-24/awsReInvent.png","Title":"AWS re:Invent 2017. Serverless Track. SRV326 Chalk Talk.","Intro":"Mitoc Group was nominated again to deliver a serverless session at Amazon Web Services’ biggest event of the year, AWS re:Invent 2017.","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2017-11-24/awsReInvent.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       <a href=\"https://www.portal.reinvent.awsevents.com/connect/search.ww#loadSearch-searchPhrase=SRV326&searchType=session\" target=\"_blank\">https://www.portal.reinvent.awsevents.com/connect/search.ww#loadSearch-searchPhrase=SRV326&searchType=session</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">If you are like me, you probably regret the amount of food and drinks from yesterday’s Thanksgiving dinner. At least I had lots of fun and an amazing time with family and friends. And, to feel better, this morning I woke up early and played two hours of soccer.</p>\n<p class=\"graf graf-up margin-bottom-25\">Wait. What am I talking about?</p>\n<p class=\"graf graf-up margin-bottom-25\">Oh, right. AWS re:Invent 2017. After <a href=\"https://blog.mitocgroup.com/best-re-invent-ever-448ac73f6a4e\">AWS re:Invent 2015</a>, it is time for me to get back to writing (apologies for being quiet for most of the year or so) and share great news for our customers, our partners and our team:</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2017-11-24/email.png\" alt=\"aws email\" />\n    <div class=\"center img-description\">\n       Nomination email from AWS re:Invent team\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">We have been busy. Business as usual. Little to no time to write about our experience and achievements. Nevertheless, back in July 2017, we have received above email that nominates Mitoc Group to present at Amazon Web Services’ biggest event of the year. It was very humbling and very exciting to be considered for a talk on serverless topic, our core business and focus, and it comes with huge responsibility. We have been working with AWS Serverless products since 2014, and <a href=\"https://blog.mitocgroup.com/deep-management-s-continuous-integration-with-travis-ci-and-coveralls-1cfcfcb3c284\">Continuous Integration</a> is part of our culture. That’s why our proposal, <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=18059\">How to Approach Continuous Integration for Serverless Applications</a>, was a no-brainer and a natural choice:</p>\n<div class=\"external-article\">\n  <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=18059&source=post_page-----92bd01ef8151----------------------\">\n  <h5>How to Approach Continuous Integration for Servless Applications</h5>\n  <span>Continuous integration is the practice of merging all working copies of developer code into one shared mainline several...</span>\n    <span>www.portal.reinvent.awsevents.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Last week, we get another email from AWS re:Invent team, saying that “your chalk talk SRV326 How to Approach Continuous Integration for Serverless Applications is 1,072.73% over-subscribed! Would you like to hold a repeat session?” And … there you go:</p>\n<div class=\"external-article\">\n  <a href=\"https://www.portal.reinvent.awsevents.com/connect/sessionDetail.ww?SESSION_ID=18059&source=post_page-----92bd01ef8151----------------------\">\n  <h5>[REPEAT] How to Approach Continuous Integration for Servless Applications</h5>\n  <span>Continuous integration is the practice of merging all working copies of developer code into one shared mainline several...</span>\n    <span>www.portal.reinvent.awsevents.com</span>\n  </a>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">What I’m trying to convey is that doing the right thing on behalf of the customers and partners won’t necessary get you on Forbes’ or Fortune’s cover, but will definitely get you noticed by your industry peers and promote you in sharing your experience with others. See you next week in Vegas and looking forward to <a href=\"https://reinvent.awsevents.com/\">AWS re:Invent 2017</a>.</p>"},"you-get-what-you-get-and-you-dont-get-upset":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 25 March 2018 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-21/terraform.png","Title":"You get what you get and you don’t get upset","Intro":"Or how we as adults forget about basic principles we teach kids, but for some reason tend to think that we’ve grown up and it doesn’t apply to us anymore","minRead":"~ 3 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2018-03-25/mitoc.png\" alt=\"Mitoc Group\" />\n    <div class=\"center img-description\">\n       <a href=\"https://landscape.cncf.io/selected=mitoc-group-deep\" target=\"_blank\">https://landscape.cncf.io/selected=mitoc-group-deep</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">This story is about a group of young innovators who worked hard to build something great, but didn’t get fully deserved awards and recognitions. They continue to work hard and serve customers with passion and integrity. Let’s take a moment to celebrate the team who made it possible.</p>\n<h3>AlexanderC</h3>\n<p class=\"graf graf-up margin-bottom-25\">Main contributor with over 1M lines of written code, <a href=\"https://github.com/AlexanderC\">Alex</a> was and forever will be the “father” of deep-framework. When we first met, he was a hardcore PHP guy who just couldn’t shut up about how great Symfony Framework is. We built couple of projects using Symfony and we were happy that customers love us. By that time, AWS Lambda was released in beta and our desire to manage servers started to go down exponentially. His insane curiosity and crazy desire to have Symfony as part of Lambda put us on a path to build JavaScript driven framework for Cloud Native Web Applications on AWS.</p>\n<h3>MGoria</h3>\n<p class=\"graf graf-up margin-bottom-25\">From the beginning and without formal training, <a href=\"https://github.com/mgoria\">Marcel</a> defined himself as a security engineer, working on making deep-framework feasible and secure environment. For a long time he felt that his work is not exciting nor rewarding, but the fact that none of our customers ever complained about security issues, as well as every security audit was passed with success from the first attempt says the world about Marcel. But the most important fact about him is his sense of humor and extraordinary ability to emphasize the fun out of everything.</p>\n<h3>CCristi</h3>\n<p class=\"graf graf-up margin-bottom-25\">In his first job ever as an engineer, <a href=\"https://github.com/CCristi\">Cristi</a> blown away everybody’s minds and expectations. His ability to take a problem and turn it into working code impressed us all. But that is not a surprise, since his entire time in school he participated at national and international contests in Math and Computer Science. Cristi was always focused on winning, and nowadays as a college student he is winning with deep-framework.</p>\n<h3>DDimitrioglo</h3>\n<p class=\"graf graf-up margin-bottom-25\">One of the most meticulous engineers out there, <a href=\"https://github.com/ddimitrioglo\">Dmitri</a> fixed the most annoying bugs in deep-framework. His ability to break down a problem into microsteps and reverse engineer them around helped entire team to address issues that most of us couldn’t. Dima is the core engineer and main interface between this open source project and customers needs. We are proud and happy to have him on the team, and he definitely deserves our recognition.</p>\n<h3>And More</h3>\n<p class=\"graf graf-up margin-bottom-25\">We’d like to thank all of deep-framework contributors:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li><a href=\"https://github.com/AScripnic\">AScripnic</a></li>\n<li><a href=\"https://github.com/dragosh1011\">dragosh1011</a></li>\n<li><a href=\"https://github.com/dsasov\">dsasov</a></li>\n<li><a href=\"https://github.com/eistrati\">eistrati</a></li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Everybody deserves a piece of recognition no matter how big or how small it is. We value our people and we thank them for their hard work!</p>\n<p class=\"graf graf-up margin-bottom-25\">Everybody deserves a piece of recognition no matter how big or how small it is. We value our people and we thank them for their hard work!</p>\n<h3>P. S. What’s Up With This Title?</h3>\n<p class=\"graf graf-up margin-bottom-25\">If you got to this paragraph, you might be thinking “Well, I get it, but what’s up with this title?” If you do, here is the explanation — Mitoc Group’s deep-framework has been listed by <a href=\"https://cncf.io/\">Cloud Native Computing Foundation</a> as <a href=\"https://landscape.cncf.io/cncf=no\">Non-CNCF Member Products/Projects</a>. Here is the link: <a href=\"https://landscape.cncf.io/selected=mitoc-group-deep\">https://landscape.cncf.io/selected=mitoc-group-deep</a></p>\n<p class=\"graf graf-up margin-bottom-25\">Since the team was not that excited about this achievement, as well as some of us were really upset for not getting more, we thought to combine the “recognition part” with “you get what you get and you don’t get upset”. We want more because we are humans and that’s fine, but remember what you are teaching kids and don’t forget that the same principles apply to yourself.</p>"},"aws-lambda-to-redshift-connection-using-iam-authentication-and-nat-gateway":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Mon, 23 April 2018 12:20:55 -0400","Thumbnail":"/images/blog/2018-04-23/example.png","Title":"AWS Lambda to Redshift Connection using IAM authentication and NAT gateway","Intro":"Python Edition. This article walks through the steps taken and lessons learned, in order to connect AWS Lambda to Amazon Redshift running in Amazon VPC. Described solution involves minimal maintenance effort while providing top notch security and reliability.","minRead":"~ 4 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2018-04-23/example.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Although the use case I worked on is not exactly the one from the picture above, I wanted to share my story because I don’t want others waste their time with it. Recently I was required to implement a solution that involves connecting AWS Lambda to Amazon Redshift. If Amazon VPC is not in scope, feel free to stop reading here and ignore the rest of this article.</p>\n<h3>Challenges</h3>\n<p class=\"graf graf-up margin-bottom-25\">During implementation, I had to overcome the following challenges:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>AWS Lambda’s python runtime doesn’t support natively libpq.so which is required by psycopg2 library to connect to Amazon Redshift;</li>\n<li>Securely storing and rotating Amazon Redshift’s credentials was becoming another full time project;</li>\n<li>IAM authentication for Amazon Redshift is amazing, but it took me a while to get it functional in Amazon VPC.</li>\n</ol>\n<h3>Implementation</h3>\n<p class=\"graf graf-up margin-bottom-25\">For the sake of simplicity, I’ve reduced the python code used in AWS Lambda function to the minimum, as shown below:</p>\n<pre><code class=\"py language-py\">import os\nimport psycopg2\nimport sys\n\ndef lambda_handler(event, context):\n  REDSHIFT_DATABASE = os.environ['REDSHIFT_DATABASE']\n  REDSHIFT_USER = os.environ['REDSHIFT_USER']\n  REDSHIFT_PASSWD = os.environ['REDSHIFT_PASSWD']\n  REDSHIFT_PORT = os.environ['REDSHIFT_PORT']\n  REDSHIFT_ENDPOINT = os.environ['REDSHIFT_ENDPOINT']\n  REDSHIFT_QUERY = \"SELECT DISTINCT tablename FROM pg_table_def WHERE schemaname = 'public' ORDER BY tablename\"\n\n  try:\n    conn = psycopg2.connect(\n      dbname=REDSHIFT_DATABASE,\n      user=REDSHIFT_USER,\n      password=REDSHIFT_PASSWD,\n      port=REDSHIFT_PORT,\n      host=REDSHIFT_ENDPOINT)\n  except Exception as ERROR:\n    print(\"Connection Issue: \" + ERROR)\n    sys.exit(1)\n\n  try:\n    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)\n    print(cursor.execute(REDSHIFT_QUERY))\n    cursor.close()\n    conn.commit()\n    conn.close()\n  except Exception as ERROR:\n    print(\"Execution Issue: \" + ERROR)\n    sys.exit(1)\n</code></pre>\n<h4>Issue #1</h4>\n<p class=\"graf graf-up margin-bottom-25\">If you develop on Mac OSX or Windows, the local version of psycopg2 library most probably is not compatible with AWS Lambda python3.6 runtime. I got the following error:</p>\n<pre><code>No module named 'psycopg2._psycopg': ModuleNotFoundError\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">This is an easy and quick fix. Either you’re compiling psycopg2 library on an Amazon Linux compatible operating system. Or, a much better alternative, use the following GitHub repository:</p>\n<div class=\"external-article\">\n  <a href=\"https://github.com/jkehler/awslambda-psycopg2?source=post_page-----b40c6002082b----------------------\">\n  <h5>jkehler/awslambda-psycopg2</h5>\n  <span>Contribute to awslambda-psycopg2 development by creating an account on GitHub.</span>\n    <span>github.com</span>\n  </a>\n</div>\n<h4>Issue #2</h4>\n<p class=\"graf graf-up margin-bottom-25\">AWS Lambda provides environment variables capability, which allows developers to decouple fixed components of the code from variable ones. Since our team manages most of our cloud resources using Terraform, here below is the simplified version Terraform script for Lambda function:</p>\n<pre><code>resource \"aws_lambda_function\" \"lambda_function\" {\n  s3_bucket        = \"${var.lambda_source_bucket}\"\n  s3_key           = \"${var.lambda_source_file}\"\n\n  source_code_hash = \"${base64sha256(file(var.lambda_source_file))}\"\n  function_name    = \"${var.lambda_function_name}\"\n  handler          = \"${var.lambda_function_handler}\"\n  runtime          = \"${var.lambda_function_runtime}\"\n  timeout          = \"${var.lambda_function_timeout}\"\n  role             = \"${var.lambda_iam_role}\"\n\n  vpc_config {\n    security_group_ids = [\"${split(\",\", var.lambda_security_group_ids)}\"]\n    subnet_ids         = [\"${split(\",\", var.lambda_vpc_subnet_ids)}\"]\n  }\n\n  environment {\n    variables = {\n      REDSHIFT_ENDPOINT = \"${var.redshift_connection[\"endpoint\"]}\"\n      REDSHIFT_PORT     = \"${var.redshift_connection[\"port\"]}\"\n      REDSHIFT_USER     = \"${var.redshift_connection[\"username\"]}\"\n      REDSHIFT_PASSWD   = \"${var.redshift_connection[\"password\"]}\"\n      REDSHIFT_DATABASE = \"${var.redshift_connection[\"database\"]}\"\n    }\n  }\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">Now, everything related to Amazon Redshift connection is concentrated in <em>redshift_connection</em> variable, which stores values in plain text. To overcome this security problem, we have to consider one of the following solutions:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li><a href=\"https://aws.amazon.com/kms/\">AWS Key Management Service</a></li>\n<li><a href=\"https://aws.amazon.com/systems-manager/features/\">AWS Systems Manager’s Parameter Store</a></li>\n<li><a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-authentication-access-control.html\">IAM Authentication for Amazon Redshift</a></li>\n</ol>\n<p class=\"graf graf-up margin-bottom-25\">Using KMS or Parameter Store is definitely a viable solution, but I opted to the most natural choice and less maintenance effort down the road: the native integration between Redshift and IAM. Shortly, with an API call, Redshift issues temporary credentials based on IAM permissions which can be used for Redshift connections. Now my Lambda function looks like this:</p>\n<pre><code class=\"py language-py\">import os\nimport boto3\nimport psycopg2\nimport sys\n\ndef lambda_handler(event, context):\n  REDSHIFT_DATABASE = os.environ['REDSHIFT_DATABASE']\n  REDSHIFT_USER = os.environ['REDSHIFT_USER']\n  REDSHIFT_PASSWD = os.environ['REDSHIFT_PASSWD']\n  REDSHIFT_PORT = os.environ['REDSHIFT_PORT']\n  REDSHIFT_ENDPOINT = os.environ['REDSHIFT_ENDPOINT']\n  REDSHIFT_CLUSTER = os.environ['REDSHIFT_CLUSTER']\n  REDSHIFT_QUERY = \"SELECT DISTINCT tablename FROM pg_table_def WHERE schemaname = 'public' ORDER BY tablename\"\n\n  try:\n    client = boto3.client('redshift')\n    creds = client.get_cluster_credentials(\n      DbUser=REDSHIFT_USER,\n      DbName=REDSHIFT_DATABASE,\n      ClusterIdentifier=REDSHIFT_CLUSTER,\n      DurationSeconds=3600)\n  except Exception as ERROR:\n    print(\"Credentials Issue: \" + ERROR)\n    sys.exit(1)\n\n  try:\n    conn = psycopg2.connect(\n      dbname=REDSHIFT_DATABASE,\n      user=creds['DbUser'],\n      password=creds['DbPassword'],\n      port=REDSHIFT_PORT,\n      host=REDSHIFT_ENDPOINT)\n  except Exception as ERROR:\n    print(\"Connection Issue: \" + ERROR)\n    sys.exit(1)\n\n  try:\n    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)\n    print(cursor.execute(REDSHIFT_QUERY))\n    cursor.close()\n    conn.commit()\n    conn.close()\n  except Exception as ERROR:\n    print(\"Execution Issue: \" + ERROR)\n    sys.exit(1)\n</code></pre>\n<h4>Issue #3</h4>\n<p class=\"graf graf-up margin-bottom-25\">The most time consuming, as well as the most interesting challenge to address was Lambda function timeout. Turns out that switching to Redshift temporary credentials, you need AWS Lambda to be able to access Redshift APIs that are not available by default in your VPC. The options are to route either through ENI or through NAT. I opted for NAT gateway solution that is summarized here below using the following Terraform script:</p>\n<pre><code>data \"aws_security_group\" \"security_group\" {\n  id = \"${join(\"\",slice(var.lambda_security_group_ids,0,1))}\"\n}\n\ndata \"aws_subnet_ids\" \"lambda_subnets\" {\n  vpc_id = \"${data.aws_security_group.security_group.vpc_id}\"\n}\n\nresource \"aws_eip\" \"nat\" {\n  vpc = true\n}\n\nresource \"aws_nat_gateway\" \"lambda_gateway\" {\n  allocation_id = \"${aws_eip.nat.id}\"\n  subnet_id     = \"${join(\"\",slice(data.aws_subnet_ids.lambda_subnets.ids,0,1))}\"\n}\n\nresource \"aws_route_table\" \"lambda_private\" {\n  vpc_id = \"${data.aws_security_group.security_group.vpc_id}\"\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    nat_gateway_id = \"${aws_nat_gateway.lambda_gateway.id}\"\n  }\n}\n\nresource \"aws_route_table_association\" \"lambda_private\" {\n  subnet_id      = \"${join(\"\",slice(data.aws_subnet_ids.lambda_subnets.ids,1,2))}\"\n  route_table_id = \"${aws_route_table.lambda_private.id}\"\n}\n</code></pre>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">I would argue that, at the time of blog post writing, this is the ideal solution to connect AWS Lambda with Amazon Redshift running in Amazon VPC. If you use python3.6 runtime, consider <a href=\"https://github.com/jkehler/awslambda-psycopg2\">awslambda-psycopg2</a> repository. Next, replace regular postgres driver connection with <a href=\"https://docs.aws.amazon.com/redshift/latest/mgmt/redshift-iam-authentication-access-control.html\">IAM authentication</a>. Finally, enable <a href=\"https://aws.amazon.com/premiumsupport/knowledge-center/internet-access-lambda-function/\">outside VPC access</a>.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"three-success-stories-of-aws-landing-zone-business-overview":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Tue, 4 Jun 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-06-19/aws-lz.png","Title":"Three Success Stories of AWS Landing Zone (Business Overview)","Intro":"After Introducing Terraform Module for AWS Landing Zone couple of days ago, let’s dive deep into several use cases and see how this technical solution solves real business problems.","minRead":"~ 5 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In this article, we will be speaking on behalf of 3 different customers without disclosing their names and any private information. These large organizations generate billions of dollars in yearly revenue and, implicitly, come with high level of complexity on AWS. There are lots of challenges and use cases, most of them are pretty common, but also enough of them that are pretty unique. We will provide only a business overview, while the technical overview will be described in a future article.</p>\n<h3>What Does AWS Landing Zone Solution Do?</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices. With the large number of design choices, setting up a multi-account environment can take a significant amount of time, involve the configuration of multiple accounts and services, and require a deep understanding of AWS services.</p>\n<p class=\"graf graf-up margin-bottom-25\">This solution can help save time by automating the set-up of an environment for running secure and scalable workloads while implementing an initial security baseline through the creation of core accounts and resources. It also provides a baseline environment to get started with a multi-account architecture, identity and access management, governance, data security, network design, and logging.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-06-19/aws-lz.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Landing Zone Architecture (source:\n       <a href=\"https://aws.amazon.com/solutions/aws-landing-zone/\" target=\"_blank\">https://aws.amazon.com/solutions/aws-landing-zone/</a>)\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution includes 4 basic AWS accounts: (1) AWS Organization Account, (2) Shared Services Account, (3) Log Archive Account and (4) Security Account. This solution also integrates into add-on products that can be deployed using the AWS Service Catalog such as AWS Managed AD and Directory Connector for AWS Single Sign-On (SSO).</p>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution also deploys an AWS Account Vending Machine (AVM) product for provisioning and automatically configuring new AWS accounts. The AVM leverages AWS SSO for managing user account access. This environment is customizable to allow customers to implement their own account baselines through a Landing Zone configuration.</p>\n<h3>Why Is AWS Landing Zone Solution So Successful?</h3>\n<p class=\"graf graf-up margin-bottom-25\">In order to dive deep and understand how <a href=\"https://blog.mitocgroup.com/introducing-programmatic-aws-landing-zone-as-terraform-module-3e566ee6e73f\">Terraform Module for AWS Landing Zone</a> helps, we decided to put on our customers hats and tell customers stories through their experiences. For simplicity and respect for their privacy, we will not be disclosing their names and we will not be providing any private information.</p>\n<h4>Customer #1</h4>\n<p class=\"graf graf-up margin-bottom-25\">Large media and entertainment company, with business presence and technical operations all over the world, customer #1 adopted cloud first strategy and required help to setup multi-account approach on AWS cloud using github, concourse and terraform. Their strategy directed cloud operations team to build out couple of dozens of AWS accounts as extension to their existing data centers and provide the same level of security and compliance as on-prem.</p>\n<h4>Customer #2</h4>\n<p class=\"graf graf-up margin-bottom-25\">Large content analytics company, with technical teams in US, EU and India, customer #2 decided to migrate and fully transform themselves on AWS. The multi-year migration effort resulted in hundreds of applications running of several thousands of servers to be rehosted / refactored / revised / rebuilt / replaced. Their entire IT footprint ended up running on over fifty AWS accounts with four members of centralized cloud operations team using github, jenkins and terraform.</p>\n<h4>Customer #3</h4>\n<p class=\"graf graf-up margin-bottom-25\">Large insurance company, with global presence in and highly regulated by almost every country in the world, customer #3 continues its multi-year cloud journey. With hundreds of AWS accounts, various business units are moving slowly and incrementally parts of IT footprint to AWS by provisioning cloud resources as extensions to their on-prem data centers. Cloud operations teams use bitbucket, bamboo and terraform to manage and operate on AWS.</p>\n<h4>Common Denominators</h4>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>VCS —Overwhelming majority of enterprise organizations use some kind of Version Control System, either we are talking about github, bitbucket or others. Not in scope for now, so I’ll skip this part.</li>\n<li>CI/CD — Cloud providers empowered many large companies to adopt some kind of Continuous Integration and Continuous Delivery (or Deployment). Not in scope for now, so I’ll skip this as well.</li>\n<li>Terraform — It doesn’t come anymore as a surprise that lots of enterprise customers with large IT footprints are using terraform to provision cloud resources, therefore I’ll skip this part.</li>\n<li>(Lots of) AWS accounts — No matter how many cloud accounts (to be read: several, dozens or even hundreds), customers want to follow best practices recommended by cloud providers that ideally are consistent with their existing policies / procedures and, why not, even improve their operations by making them better and more secure.</li>\n</ol>\n<h3>Multi-Account Strategy</h3>\n<p class=\"graf graf-up margin-bottom-25\">Why are customers opting into multi-account strategy? First, although customers can clearly separate users / data / environments using IAM, VPC, SG and STS, single-account strategy requires a vast amount of management and cost allocation that is usually not feasible. Second, if you plan to acquire other companies, integrating into single-account strategy is very expensive. Therefore, it’s a non starter.</p>\n<p class=\"graf graf-up margin-bottom-25\">In this context, the allocation of AWS accounts are usually decided by:</p>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>Business Unit (or some other kind of legal organizational breakdown)</li>\n<li>Geographical Location (or some other kind of territorial breakdown)</li>\n<li>Production vs Non-Production (or some other kind of environment / SDLC breakdown)</li>\n<li>Shared Services (use cases that are shared or can’t / shouldn’t be isolated)</li>\n</ol>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: All of our customers, including Customer #1, Customer #2 and Customer #3 followed this best practice as part of their multi-account strategy.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">Multi-account strategy doesn’t stop just at multiple AWS accounts. The goal of AWS Landing Zone is to have a minimal baseline setup for security, operations and management functions. For example, Customer #1 decided to include in the baseline only Centralized Billing, 3rd party SSO and AWS Direct Connect. Customer #2 and Customer #3 decided to, additionally, add Centralized Logging solution and Centralized Security solution. Some solutions were cloud native services on AWS like Cloudtrail, Managed AD and SSO, others not so native — Splunk, SignalFX, CloudCheckr and PingIdentity.</p>\n<p class=\"graf graf-up margin-bottom-25\">To go one step further, some customers adopt AVM (Account Vending Machine) to provision new AWS accounts and deploy the baseline into those accounts as well. In our experience, neither Customer #1, Customer #2, nor Customer #3 opted into using this solution. Instead, they use Service Catalog to allow existing / predefined AWS accounts to use only AWS products vetted and whitelisted by their organizations.</p>\n<p class=\"graf graf-up margin-bottom-25\">At the end of the day, either AWS accounts are created manually or automatically, customers decide what goes into the baseline and how the provisioning and deployment of AWS Landing Zone components are done (spoiler alert: auto-magically). This is the real value of successful AWS Landing Zone implementation.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this article, we tried to describe important business aspects of successfully adopting AWS Landing Zone. We talked about 3 different customers without disclosing their names and any private information. These large organizations generate billions of dollars in yearly revenue and, implicitly, come with high level of complexity on AWS. We intentionally stopped short on the technical side of this solution because we will be covering that next (link coming soon).</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"aws-landing-zone-module-now-supports-terraform-v0-12":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 21 August 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-21/terraform.png","Title":"AWS Landing Zone module now supports Terraform v0.12+","Intro":"Couple of weeks ago we were excited to Introduce Programmatic AWS Landing Zone as Terraform Module. Today we continue this exciting journey to extend module’s support for Terraform v0.12+","minRead":"~ 2 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-08-21/terraform.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n       <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\" target=\"_blank\">https://registry.terraform.io/modules/TerraHubCorp/landing-zone</a>\n    </div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Back in May 2019, HashiCorp announced the release of Terraform 0.12, a major update that includes dozens of improvements and features spanning the breadth and depth of Terraform’s functionality. Unfortunately, this release breaks compatibility with previous version and requires extra effort to upgrade (see <a href=\"https://www.terraform.io/upgrade-guides/0-12.html\">Upgrade to Terraform v0.12</a>).</p>\n<p class=\"graf graf-up margin-bottom-25\">When we initially started <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone\">Terraform Module for AWS Landing Zone</a>, our components were developed using v0.11. We decided to release with older version and later address support for newer version. Today we are excited to announce that current implementation supports both v0.11 and below, as well as v0.12 and above.</p>\n<h3>What Changed?</h3>\n<p class=\"graf graf-up margin-bottom-25\">Additionally to Terraform syntax change from HCL1 to HCL2, we refactored components related convertor to switch from YAML to HCL instead of JSON. This feature allows easier debugging and fixing of Terraform related issues and remove any potential problems associated with conversion from one format into another.\nThe flexibility of passing a dynamic number of components as input variables is managed by several python scripts. We rewrote these supporting python scripts into nodejs scripts, therefore removing extra dependencies and simplifying this terraform module.</p>\n<p class=\"graf graf-up margin-bottom-25\">But the most important improvement that we were able to achieve, with the help from the open source community, is to publish a <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/ROADMAP.md\">high level roadmap</a>. It gives an overview of how much effort it took so far and how much more effort it will take to add 3rd party support that goes beyond standard AWS offering.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">Terraform Module for AWS Landing Zone is fully functional, supporting both Terraform v0.11 and below, as well as Terraform v0.12 and above. Latest version is published on Terraform Module Registry: <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\">https://registry.terraform.io/modules/TerraHubCorp/landing-zone</a></p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"my-architecture-apache-kafka-by-confluent-on-aws-cloud":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sun, 4 August 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-04/kafka-arch.png","Title":"My Architecture: Apache Kafka by Confluent on AWS Cloud","Intro":"Recent engagement with $4.5B customer produced very positive outcome with very surprising learning lesson: we had to create reference architecture for Apache Kafka by Confluent on AWS cloud from scratch because there wasn’t any available.","minRead":"~ 2 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In this short article we would like to share what we were able to achieve in a very short period of time. Our intention is to help others if they come across something similar. Unfortunately, we can’t give proper credits to everybody who made this reference architecture possible. Nevertheless, when the time comes, we’ll gladly update this article with well deserved recognition.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-08-04/kafka-arch.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">My Architecture: Apache Kafka by Confluent on AWS Cloud</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In a nutshell, Apache Kafka by Confluent was required to run in a multi-region setup (to be precise: North Virginia and Oregon). Each region was using 3 availability zones for HA and Low Latency. Kafka nodes require sub 10ms latency, therefore different clusters were deployed in each region and messages are being transferred from one region into another using Replicator nodes (to be precise: Replicator processes are running on Connector nodes).</p>\n<p class=\"graf graf-up margin-bottom-25\">Each Kafka cluster includes:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>5 Brokers nodes</li>\n<li>5 Zookeeper nodes</li>\n<li>2 Connector nodes (+2 Replicator processes)</li>\n<li>2 Schema Registry nodes</li>\n<li>2 REST API nodes</li>\n<li>2 KSQL nodes</li>\n<li>2 KStream nodes</li>\n<li>1 Control Center node</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Traffic between customer datacenters and AWS regions, as well as from one AWS region into another AWS region, is managed through Transit Gateway. At the time of writing, latency between North Virginia and Oregon was around 70–80 ms (according to <a href=\"https://www.cloudping.co/\">cloudping.co</a>).</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"three-success-stories-of-aws-landing-zone-technology-overview":{"Featured":"0","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Sun, 4 August 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-08-02/aws-lz-arch.png","Title":"Three Success Stories of AWS Landing Zone (Technology Overview)","Intro":"After introducing Terraform Module for AWS Landing Zone and providing Business Overview of Our Experience with AWS Landing Zone, let’s dive deeper into the technical overview.","minRead":"~ 4 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">In this article, we will be covering the technical aspects of implementations and critical details that helped deploy and manage consistent multi-account strategy using AWS best practices. We will start with reference architecture (see picture below) for AWS Landing Zone solution and dive deeper into each customer’s customization that make their solutions both unique and reusable.</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-08-02/aws-lz-arch.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">\n      AWS Landing Zone Architecture (source:\n      <a href=\"https://aws.amazon.com/solutions/aws-landing-zone\">https://aws.amazon.com/solutions/aws-landing-zone</a>)\n    </div>\n</div>\n<h3>Getting Started</h3>\n<p class=\"graf graf-up margin-bottom-25\">First step is to include terraform module <a href=\"https://registry.terraform.io/modules/TerraHubCorp/landing-zone\">for AWS Landing Zone into your</a> code base. For example:</p>\n<pre><code>module \"landing_zone\" {\n  source                  = \"./modules/landing_zone\"\n  root_path               = path.module\n  landing_zone_providers  = {\n    default = {\n      account_id = \"123456789012\"\n      region     = \"us-east-1\"\n    }\n    [...]\n  }\n  landing_zone_components = {\n    landing_zone_vpc = \"s3://terraform-aws-landing-zone/mycompany/landing_zone_vpc/default.tfvars\"\n    [...]\n  }\n}\n</code></pre>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: Placeholder […] from above is used to suggest that similar syntax can be added. Remove it or update in order to have valid HCL format.</em></p>\n</blockquote>\n<p class=\"graf graf-up margin-bottom-25\">Definition of <code>landing_zone_providers</code> and <code>landing_zone_components</code> allow flexible and consistent provisioning of AWS resources across multiple AWS accounts and/or AWS regions. Similar to microservices architecture, customers of this terraform module are encouraged to define one terraform resource per one landing zone component.</p>\n<p class=\"graf graf-up margin-bottom-25\">For simplicity, we moved both arguments <code>landing_zone_providers</code> and <code>landing_zone_components</code> into variables. We are manipulating them at runtime by supplying customized <code>terraform.tfvars</code>. In this case, our terraform module reference becomes simple and immutable:</p>\n<pre><code>module \"landing_zone\" {\n  source                  = \"./modules/landing_zone\"\n  root_path               = path.module\n  landing_zone_providers  = var.landing_zone_providers\n  landing_zone_components = var.landing_zone_components\n}\nvariable \"landing_zone_providers\" {\n  type = map(map(string))\n}\nvariable \"landing_zone_components\" {\n  type = map(string)\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">VERY IMPORTANT: You can define lots of providers and include tons of components, but only the ones referenced in associated .tfvars files will be provisioned / deployed by terraform module.</p>\n<h3>Common Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">The following components are pretty common across our customers:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS Organization (referenced <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/terraform.tfvars#L22:L26\">here</a>)</li>\n<li>AWS Service Catalog</li>\n<li>AWS IAM, including Identity Providers; excluding AWS SSO</li>\n<li>Amazon VPC, including Subnets, Routes, Gateways, NACLs, Security Groups, Peering or Direct Connect (referenced <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/terraform.tfvars#L27:L40\">here</a>)</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">As you can see from above mentioned references, the demo <code>.tfvars</code> files are stored in <code>s3://terraform-aws-landing-zone/mycompany/[component_name]/default.tfvars</code> (publicly available). The goal is to provide reusable structure of immutable configurations that can consistently provision / deploy terraform resources (to be read: AWS resources) across multiple terraform providers (to be read: AWS accounts and/or AWS regions) without any need to make changes to landing zone components. Only <code>.tfvars</code> are changed over time.</p>\n<p class=\"graf graf-up margin-bottom-25\">But more importantly, we can use the same S3 bucket (or create one bucket per customer) and assign IAM temporary credentials (or cross account role) for each customer without exposing private information stored in <code>.tfvars</code> files. Every execution of terraform module can clearly delimit IAM credentials (or roles) for where <code>.tfvars</code> files are located, where <code>.tfstate</code> files are stored as backend and/or where AWS resources are provisioned / deployed.</p>\n<h3>Unique Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">Unique components are only unique on architecture diagram, while in reality all components are executed the same, meaning terraform configurations are open source and publicly available, while <code>.tfvars</code> files are private and pretty unique to every customer.</p>\n<p class=\"graf graf-up margin-bottom-25\">And, to be clear, not all landing zone components were creating AWS resources from scratch. For example, some customers already had VPCs or IAMs. In these cases, we used <code>terraform import</code> to bring in existing AWS resources and avoid duplicated or colliding resources.</p>\n<p class=\"graf graf-up margin-bottom-25\">Unfortunately we don’t have written permission to disclose customers names. That is why we will be referencing them below by their revenue from last year.</p>\n<h4>Customer #1: $49B in revenue</h4>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-08-02/customer1.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this case, we worked with a customer who is using the following 3rd party services and tools that are not native to AWS:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS SSO =&gt; Office 365</li>\n<li>AWS CodePipeline =&gt; Jenkins</li>\n<li>AWS GuardDuty =&gt; SignalFX</li>\n<li>Logs =&gt; Splunk</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">As shown in the diagram on the left, terraform based implementation of AWS Landing Zone is perfectly inline with AWS best practices. By replacing AWS native solutions with similar 3 party products, we were able to combine existing solutions and AWS cloud in perfect harmony.</p>\n<h4>Customer #2: $33B in revenue</h4>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-08-02/customer2.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this case, we worked with a customer who is using the following 3rd party services and tools that are not native to AWS:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS SSO =&gt; Ping Identity</li>\n<li>AWS CodePipeline =&gt; Bamboo</li>\n<li>Amazon S3 =&gt; Bitbucket</li>\n<li>AWS Parameter Store =&gt; Vault</li>\n<li>AWS GuardDuty =&gt; Alert Logic</li>\n<li>Logs =&gt; Datadog</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Similar to previous customer, the diagram on the left reflects a sustainable customization of AWS Landing Zone solution where some native components to AWS are being replaced with existing comparable 3rd party solutions.</p>\n<h4>Customer #3: $11B in revenue</h4>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-08-02/customer3.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">In this case, we worked with a customer who is using the following 3rd party services and tools that are not native to AWS:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>AWS SSO =&gt; SiteMinder</li>\n<li>AWS CodePipeline =&gt; TravisCI</li>\n<li>Amazon S3 =&gt; GitHub</li>\n<li>AWS GuardDuty =&gt; OSSEC + Grafana</li>\n<li>Logs =&gt; Elastic + Grafana</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Similar to previous customers, the architecture diagram on the left is a customized version of AWS Landing Zone diagram with several AWS native solutions replace with similar 3rd party services or tools that customer already uses in their organization.</p>\n<h4>Summary</h4>\n<ol class=\"graf graf-ol-li graf-grap\">\n<li>This terraform module accepts arguments landing<em>zone</em>providers and landing<em>zone</em>components among others</li>\n<li>Providers and components can be as many as you want; Only the ones referenced in .tfvars files will be provisioned / deployed</li>\n<li>Ideally the code for landing zone components is immutable, while .tfvars files are adjustable over time</li>\n<li>Microservices architecture is highly recommended, aim for one terraform resource per one landing zone component</li>\n<li>Use terraform import for existing AWS resources to avoid duplication or collisions with landing zone components</li>\n</ol>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">In this article, we tried to describe relevant level of details associated with technical implementation of AWS Landing Zone solution using terraform module. We talked about 3 different customers without disclosing their names and any private information. Component based immutable terraform configurations with adjustable <code>.tfvars</code> files allowed advanced flexibility and reliable consistency across multiple AWS accounts using AWS best practices.</p>"},"my-architecture-aws-control-tower-vs-aws-landing-zone":{"Featured":"1","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 20 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-20/aws-reinforce.png","Title":"My Architecture: AWS Control Tower vs AWS Landing Zone","Intro":"Both Control Tower and Landing Zone help set up and manage secure multi-account AWS environments. Which one should customers use? Let’s take a closer look and figure out together.","minRead":"~ 3 min read","htmlCode":"<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-20/aws-reinforce.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Source:\n       <a href=\"https://www.slideshare.net/AmazonWebServices/using-aws-control-tower-to-govern-multiaccount-aws-environments-at-scale-grc313r-aws-reinforce-2019\" target=\"_blank\">https://www.slideshare.net/AmazonWebServices/using-aws-control-tower-to-govern-multiaccount-aws-environments-at-scale-grc313r-aws-reinforce-2019</a>\n    </div>\n</div>\n<h3>What is AWS Control Tower?</h3>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://aws.amazon.com/controltower/faqs/#General\">Quote</a> : AWS Control Tower is a service that offers the easiest way to set up and govern a new, secure, multi-account AWS environment. It establishes a landing zone that is based on best-practices blueprints, and enables governance using guardrails you can choose from a pre-packaged list. The landing zone is a well-architected, multi-account baseline that follows AWS best practices. Guardrails implement governance rules for security, compliance, and operations.</p>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-20/automating-lz.png\" alt=\"aws\" />\n    <div class=\"center img-description\">Source:\n       <a href=\"https://aws.amazon.com/blogs/apn/automating-your-aws-landing-zone-deployment-to-speed-up-large-scale-migrations\" target=\"_blank\">https://aws.amazon.com/blogs/apn/automating-your-aws-landing-zone-deployment-to-speed-up-large-scale-migrations</a>\n    </div>\n</div>\n<h3>What is AWS Landing Zone?</h3>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://aws.amazon.com/solutions/aws-landing-zone/\">Quote</a>: AWS Landing Zone is a solution that helps customers more quickly set up a secure, multi-account AWS environment based on AWS best practices. With the large number of design choices, setting up a multi-account environment can take a significant amount of time, involve the configuration of multiple accounts and services, and require a deep understanding of AWS services.</p>\n<h3>AWS Control Tower vs AWS Landing Zone</h3>\n<p class=\"graf graf-up margin-bottom-25\">Although official documentation explains <a href=\"https://aws.amazon.com/controltower/faqs/#AWS_Solution_and_Service_Comparisons\">the difference between AWS Control Tower and AWS Landing Zone</a>, we believe that customers should learn more details about these two offerings. And keep in mind, these solutions are not apples to apples comparable, more like apples to oranges.\nAWS Landing Zone solution was launched in <a href=\"https://aws.amazon.com/about-aws/whats-new/2018/06/introducing-aws-landing-zone/\">June 2018</a>, while AWS Control Tower was announced in <a href=\"https://aws.amazon.com/blogs/enterprise-strategy/aws-control-tower-and-aws-security-hub-powerful-enterprise-twins/\">November 2018</a> and launched in <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/06/aws-control-tower-is-now-generally-available/\">June 2019</a>. It’s not very clear why in just a couple of months AWS introduced two competing products. Based on our limited experience, we would assume AWS Landing Zone solution was very well received by enterprise customers, but in the same time required fundamental changes which led to AWS Control Tower service.\nAs of time of writing, AWS Control Tower doesn’t support existing setups for AWS Organization or AWS SSO, although official FAQ claims it will be added in the future, as well as ability to migrate from AWS Landing Zone solution to AWS Control Tower service.</p>\n<table class=\"table\">\n<thead>\n<tr class=\"graf graf--li graf-grap\">\n<th>Service or Feature</th>\n<th>AWS Control Tower</th>\n<th>AWS Landing Zone</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New AWS Organization account</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x274C; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Existing AWS Organization account</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New AWS SSO environment</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Existing AWS SSO environment</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New AWS Service Catalog environment</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Existing AWS Service Catalog environment</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">New or Existing Security Hub environment</td>\n<td class=\"center\">&#x2705; yes</td>\n<td class=\"center\">&#x274C; no</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Support for CI/CD</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Interactive APIs</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x274C; no</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">CloudFormation template(s)</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n<tr class=\"graf graf--li graf-grap\">\n<td class=\"center\">Terrafom module(s)</td>\n<td class=\"center\">&#x274C; no</td>\n<td class=\"center\">&#x2705; yes</td>\n</tr>\n</tbody>\n</table>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">Therefore, in summary, which one should we use: AWS Control Tower or AWS Landing Zone? The answer is: depends. If you start from scratch or can afford destroying existing AWS resources, then AWS Control Tower is the way forward. Otherwise, consider AWS Landing Zone and fingers crossed for future migration solution from AWS Landing Zone to AWS Control Tower.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"my-architecture-private-equity-platform-on-aws-cloud":{"Featured":"4","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 18 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-10/private-equity-platform.png","Title":"My Architecture: Private Equity Platform on AWS Cloud","Intro":"Over the last couple of years we have been working closely with several private equity companies to help them adopt public clouds. This article will describe the high level architecture of a leading private equity platform on AWS cloud.","minRead":"~ 5 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-10/private-equity-platform.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Private Equity Platform on AWS Cloud</div>\n</div>\n<h3>Private Equity Sector</h3>\n<p class=\"graf graf-up margin-bottom-25\">Private equity industry is pretty unique in the financial world because it offers important long-term advantages, including strong historical returns and diversification benefits. From a technical perspective, public clouds are becoming very important factors to private equity firms because of speed and agility combined with better results at lower costs.\nHistorically, private equity platforms were built and deployed on-premises, primarily driven by the private nature of the industry and the need to protect the secret sauce of deal making processes. Providers like AWS and GCP have become more relevant and very important to the industry because they proved over time that you can have it both ways: private and secure, as well as faster and cheaper.</p>\n<h3>Leading Private Equity Platform</h3>\n<p class=\"graf graf-up margin-bottom-25\">Since we don’t have a written permission to name the brand and the product, we will refer to this platform as leading private equity platform. We hope that in the future the company behind this platform will reconsider their position and allow us to be more specific.</p>\n<p class=\"graf graf-up margin-bottom-25\">This leading private equity platform allows PE companies to manage:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Investor Tracking</li>\n<li>Portfolio Management</li>\n<li>Customer Relationship Management</li>\n<li>Accounting</li>\n<li>Reporting and Auditing</li>\n<li>Batch Data Processing</li>\n<li>Business Events and Business Rules</li>\n<li>Team Security and Admin Tools</li>\n</ul>\n<h3>Reference Architecture on AWS Cloud</h3>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-10/reference-arch.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">Reference Architecture on AWS Cloud</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Our team put together the reference architecture for leading private equity platform based on best practices described in <a href=\"https://d0.awsstatic.com/whitepapers/aws-web-hosting-best-practices.pdf\">Web Application Hosting in the AWS Cloud</a> white-paper and customers requirements to run it in highly available and highly scalable mode (see the picture on the left).\nCustomers / end users of leading private equity platform are connecting from personal computers, or mobile devices, or virtual desktops like Citrix and Amazon Workspaces to a DNS service called Amazon Route 53.</p>\n<h3>Networking</h3>\n<p class=\"graf graf-up margin-bottom-25\">Amazon Route 53’s latency based routing directs the customer to the closest AWS region (in our case, either North Virginia or Oregon) and corresponding ALB (which stands for Application Load Balancer). Reference architecture leverages 2 AWS regions and 3 AWS availability zones. The life of any chain of requests is lived in the region selected by Amazon Route 53 at the beginning and never goes across regions during its short lifetime.</p>\n<p class=\"graf graf-up margin-bottom-25\">When a PE company wants to save on infrastructure costs, we help them by reducing the number of active availability zones or, sometimes, the number of active regions, which results in reduced SLAs.</p>\n<p class=\"graf graf-up margin-bottom-25\">The ALB from above can be either public or private. Public means that underlying subnets are connecting to the Internet directly through Amazon’s Internet Gateway. Private means that underlying subnets are connecting to the Internet through customer’s data center(s) via Direct Connect or some other Private Gateway.</p>\n<h3>Web Servers</h3>\n<p class=\"graf graf-up margin-bottom-25\">This ALB proxies requests to a cluster of Amazon EC2 instances called Web Servers via port 443 (managed through WebSG security group). Each Web Server includes static components like HTML, CSS and JavaScript, as well as dynamic components like .NET 4.5/C# and IIS 7/8 running on top of Windows Server 2008/2012. These instances are wrapped into an ASG (aka Auto Scaling Group) to provide elasticity when needed. Everything is encrypted in transit and at rest.</p>\n<h3>App Servers</h3>\n<p class=\"graf graf-up margin-bottom-25\">Traffic from Web Servers is directed to a second ALB that is internal. This ALB proxies requests to a cluster of Amazon EC2 instances called App Servers via port 443 (managed through AppSG security group). Each App Server works as an internal API to the platform that includes .NET 4.5/C# and IIS 7/8 running on top of Windows Server 2008/2012. These instances are wrapped into an ASG (aka Auto Scaling Group) to provide elasticity when needed. Everything is encrypted in transit and at rest.</p>\n<p class=\"graf graf-up margin-bottom-25\">API functionality includes multiple layers like Web Services, Dynamic Web Forms, Business Rules and Business Events, Reporting Engine and Audit Engine, Domain Models, Data Access Objects and many others.</p>\n<h3>Database</h3>\n<p class=\"graf graf-up margin-bottom-25\">Traffic from App Servers is directed to Amazon RDS for SQL Server cluster which consists of master node and standby node. Only master node is available for querying, while standby node isn’t exposed until master becomes unavailable. This RDS capability is called Multi-AZ and uses SQL Server’s native Always On feature. Everything is encrypted in transit and at rest.</p>\n<p class=\"graf graf-up margin-bottom-25\">Running Amazon RDS for SQL Server cross region replication is still a challenge that doesn’t have a native solution yet. Luckily, AWS introduced last year <a href=\"https://aws.amazon.com/blogs/database/introducing-ongoing-replication-from-amazon-rds-for-sql-server-using-aws-database-migration-service/\">ongoing replication from Amazon RDS for SQL Server using AWS Database Migration Service.</a></p>\n<h3>Security</h3>\n<p class=\"graf graf-up margin-bottom-25\">Security and Compliance on AWS is achieved using shared responsibility model. This means that cloud provider operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates. Everything else is customer’s responsibility.</p>\n<p class=\"graf graf-up margin-bottom-25\">Reference architecture for leading private equity platform on AWS cloud makes it easier and faster to achieve a secure environment using industry’s best practices. Just to name a couple:</p>\n<h3>Security</h3>\n<p class=\"graf graf-up margin-bottom-25\">Security and Compliance on AWS is achieved using shared responsibility model. This means that cloud provider operates, manages and controls the components from the host operating system and virtualization layer down to the physical security of the facilities in which the service operates. Everything else is customer’s responsibility.</p>\n<p class=\"graf graf-up margin-bottom-25\">Reference architecture for leading private equity platform on AWS cloud makes it easier and faster to achieve a secure environment using industry’s best practices. Just to name a couple:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Everything is encrypted in transit and at rest</li>\n<li>Keys and other secrets are rotated on regular basis</li>\n<li>Security groups and IAM roles are following least privilege principle</li>\n<li>Infrastructure resources are deployed in private subnets where necessary</li>\n</ul>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\">Running leading private equity platform on AWS cloud is a privilege that comes with a lot of challenges. We overcame those challenges by putting together a reference architecture and by continuing to help PE companies through successful customers’ experience.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"stronger-security-with-terraform-module-for-aws-landing-zone":{"Featured":"2","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Wed, 18 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-18/terraform-module.png","Title":"Stronger Security with Terraform Module for AWS Landing Zone","Intro":"Terraform module for AWS Landing Zone solution is offering a stronger security promise. Let’s dive deeper into main security components and understand some practical implications.","minRead":"~ 5 min read","htmlCode":"<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-18/terraform-module.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Landing Zone / Terraform Module Components</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">The AWS Landing Zone solution includes an initial security baseline that can be used as a starting point for establishing and implementing a customized account security baseline for your organization. By default, the initial security baseline includes the following settings:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>Amazon Virtual Private Cloud (VPC) &amp; Amazon VPC Flow Logs</li>\n<li>AWS CloudTrail &amp; AWS CloudTrail Logs</li>\n<li>AWS Config &amp; AWS Config Rules</li>\n<li>AWS Identity and Access Management (IAM)</li>\n<li>Cross-Account Access via AWS IAM</li>\n<li>AWS Single Sign-On (SSO)</li>\n<li>Amazon GuardDuty</li>\n<li>Security Notifications via Amazon SNS</li>\n<li>and more (e.g. KMS, CloudWatch, Security Hub, etc.)</li>\n</ul>\n<h3>Landing Zone Security Components</h3>\n<div class=\"img-post-left\">\n    <img src=\"/images/blog/2019-09-18/terraform-module-2.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Landing Zone / Terraform Module Components</div>\n</div>\n<p class=\"graf graf-up margin-bottom-25\">Last week we covered in great length of details <a href=\"https://blog.mitocgroup.com/terraform-module-components-for-aws-landing-zone-solution-c74267a0e70c\">Terraform Module Components for AWS Landing Zone Solution</a>. We <code>used landing_zone_vpc</code> component as a reference to describe what a component is and how does it work. This week we would like to dive deeper into security focused components. Specifically:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li>landing<em>zone</em>vpc</li>\n<li>landing<em>zone</em>subnet</li>\n<li>landing<em>zone</em>security_group</li>\n<li>landing<em>zone</em>cloudtrail</li>\n<li>landing<em>zone</em>config</li>\n<li>landing<em>zone</em>iam_role</li>\n<li>landing<em>zone</em>sso</li>\n</ul>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-18/service-mapped.png\" alt=\"partner aws\" />\n    <div class=\"center img-description\">AWS Services Mapped to Landing Zone Security Components</div>\n</div>\n<h3>Landing Zone VPC</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS provides security capabilities and services to increase privacy and control network access. For example, Amazon VPC is offering by design built-in network firewalls that isolate AWS resources from both outside world and other inside networks.\n<a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_vpc\">Landing Zone VPC component</a> allows customers to customize these network boundaries beyond default settings. Implemented as terraform component, this piece of infrastructure as code empowers users to import existing VPCs (therefore no downtime), as well as create new VPCs that can easily replace current networks or work as an extension to existing networks.</p>\n<h3>Landing Zone Subnet</h3>\n<p class=\"graf graf-up margin-bottom-25\">Amazon VPC allows customers to create virtual networks and divide them into subnets. VPC subnets are mapped to specific Availability Zones (AZs) and, therefore, subnet placement is one mechanism to ensure AWS resources are properly distributed across multiple data centers / different physical locations.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_subnet\">Landing Zone Subnet component</a> allows customers to specify the mapping between CIDR block(s) and AZs. As any other terraform implementation, existing subnets can be reused without downtime or created from scratch. Any future AWS resource will be using one (or multiple) subnets to be created (or updated) in any specific AZ (or AZs). This component is directly dependent on Landing Zone VPC.</p>\n<h3>Landing Zone Security Group</h3>\n<p class=\"graf graf-up margin-bottom-25\">A security group acts as a virtual stateful firewall that controls the traffic into specific AWS resource. This mandatory firewall is configured in a default deny-all mode and customers must explicitly open the ports needed to allow inbound traffic. Traffic can be restricted by protocol, by service port, and also by source IP address (individual IP or CIDR block) or another security group.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_security_group\">Landing Zone Security Group component</a> allows customers to pinpoint ingress and egress firewall rules. Using terraform implementation, existing rules can be imported and reused without downtime, empowering teams to provision and manage their network level firewalls as code. This component is directly dependent on Landing Zone VPC.</p>\n<h3>Landing Zone CloudTrail</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS CloudTrail is a service that enables governance, compliance, operational auditing, and risk auditing by logging every action to AWS APIs associated with your AWS account(s). With CloudTrail, you can continuously monitor and retain account activity related to actions across your AWS infrastructure.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_cloudtrail\">Landing Zone CloudTrail component</a> allows customers to centralize all logs into single storage location across all accounts linked to AWS Organization. Terraform implementation empowers users to reuse existing trails and/or existing logs without any gaps in historical data. Remember, AWS CloudTrail is not able to back-fill missing logs if turned off or mismanaged.</p>\n<h3>Landing Zone Config</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Config is a service that maintains a configuration history of your AWS resources and evaluates the configuration against best practices and your internal policies. Config rules can be used to audit your use of AWS for compliance with external compliance frameworks such as the CIS AWS Foundations Benchmark, or with your internal security policies related to the US Health Insurance Portability and Accountability Act (HIPAA), the Federal Risk and Authorization Management Program (FedRAMP), and others.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_config\">Landing Zone Config component</a> allows customers to implement in terraform the recording and the rules needed to manage inventory and configuration of AWS resources, as well as change management to those resources over time. Terraform import can map existing AWS resources to current tfstates and tfvars, while missing recording and/or rules will be created from scratch.</p>\n<h3>Landing Zone IAM Role</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Identity and Access Management (IAM) enables customers to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow or deny access to AWS resources.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_iam_role\">Landing Zone IAM Role component</a> allows customers to customize access to AWS resources by managing security controls as terraform configurations. If users already have existing IAM roles, terraform will import and reuse them, otherwise they will be created from scratch.</p>\n<h3>Landing Zone SSO</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Single Sign-On (SSO) is a cloud service that makes it easy to centrally manage SSO access to multiple AWS accounts and business applications. AWS SSO supports Security Assertion Markup Language (SAML) 2.0 integrations, which extends SSO access to any potential SAML-enabled applications.</p>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/tree/master/components/landing_zone_sso\">Landing Zone SSO component</a> allows customers to specify which AWS accounts and/or business applications will be integrated into AWS SSO. Terraform implementation empowers security engineers and teams to reuse existing setup, as well as bring new integrations into this service by using centralized infrastructure as code processes powered by terraform.</p>\n<h3>Conclusion</h3>\n<p class=\"graf graf-up margin-bottom-25\"><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone\">Terraform module</a> for <a href=\"https://aws.amazon.com/solutions/aws-landing-zone/\">AWS Landing Zone</a> solution is delivering a promise of a stronger security. This module implements core security services and integrations that are recommended by AWS best practices, as well as industry security and compliance frameworks. As we evolve this module, we will be constantly adding new security focused components (e.g. AWS Security Hub, AWS Control Tower, AWS Transit Gateway, etc).</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"},"terraform-module-components-for-aws-landing-zone-solution":{"Featured":"3","Author":"Eugene Istrati","AboutAuthor":"Proud Father. Lucky Husband. Open Source Contributor. DevOps | Automation | Serverless @MitocGroup. Former @AWScloud and @HearstCorp.","Avatar":"eistrati.png","TwitterUsername":"eistrati","PublicationDate":"Fri, 13 Septembre 2019 12:20:55 -0400","Thumbnail":"/images/blog/2019-09-13/code.png","Title":"Terraform Module Components for AWS Landing Zone Solution","Intro":"The core innovation in terraform module for AWS Landing Zone solution is the immutable nature of components. Let’s dive deeper into what a component is and how does it work.","minRead":"~ 4 min read","htmlCode":"<p class=\"graf graf-up margin-bottom-25\">To make sure that everybody has the same understanding about <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone#how-does-this-module-work\">Terraform Module for AWS Landing Zone</a> solution, here below is how <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/main.tf\">this module</a> looks like at the time of writing:</p>\n<div class=\"padd25px\">\n    <img src=\"/images/blog/2019-09-13/code.png\" alt=\"partner aws\" />\n</div>\n<p class=\"graf graf-up margin-bottom-25\">And if we take a look at <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/terraform.tfvars\">terraform.tfvars</a>, we should see something like this:</p>\n<pre><code>landing_zone_providers = {\n  default = {\n    account_id = \"123456789012\"\n    region     = \"us-east-1\"\n  }\n  [...]\n}\nlanding_zone_components = {\n  landing_zone_vpc = \"s3://terraform-aws-landing-zone/mycompany/landing_zone_vpc/default.tfvars\"\n  [...]\n}\nlanding_zone_backend = {\n  backend = \"local\"\n  path    = \"/tmp/.terrahub/landing_zone\"\n}\n</code></pre>\n<h3>Immutable Nature of Landing Zone Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">AWS Landing Zone solution addresses the challenge of managing multiple accounts in a faster and more secure manner, following AWS best practices. AWS empowers customers to use immutable patterns for resource allocation, but the complexity of managing terraform or cloudformation scripts that manages those resources is still pretty big.</p>\n<p class=\"graf graf-up margin-bottom-25\">That is why terraform module for AWS Landing Zone is designed to be dynamic, therefore reducing management complexity while still keeping high level of security. Each element of <code>landing_zone_components</code> variable is a pair where the key is component’s name (immutable and static) and the value is path to <code>.tfvars</code> file (mutable and dynamic). This setup allows customers to focus on dynamic aspects of their AWS environments, while terraform codebase almost never changes.</p>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: In case some terraform config would need to change, instead of updating existing component, create a new one and update <code>landing_zone_components</code> list.</em></p>\n</blockquote>\n<h3>The Structure of Landing Zone Components</h3>\n<p class=\"graf graf-up margin-bottom-25\">When looking at each component defined in <code>landing_zone_components</code> map, the first issue that jumps into our sight is YAML format instead of HCL (Why? More on this later…) But what’s more important at this point is the emerging repeatable pattern. For example, <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml\">landing<em>zone</em>vpc</a> looks something like this:</p>\n<pre><code>component:\n  name: landing_zone_vpc\n  template:\n    locals:\n      elements_landing_zone_vpc_map: var.${tfvar.terrahub[\"landing_zone_providers\"][\"0\"]}_provider[\"landing_zone_vpc_resource\"]\n      [...]\n    resource:\n      aws_vpc:\n        landing_zone_vpc:\n          provider: 'aws.${tfvar.terrahub[\"landing_zone_providers\"][\"0\"]}'\n          count: length(var.${tfvar.terrahub[\"landing_zone_providers\"][\"0\"]}_provider[\"landing_zone_vpc_resource\"])\n          cidr_block: local.elements_landing_zone_vpc_map[\"config_${count.index}\"][\"cidr_block\"]\n          [...]\n    output:\n      [...]\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">And the corresponding <a href=\"https://terraform-aws-landing-zone.s3.amazonaws.com/mycompany/landing_zone_vpc/default.tfvars\">default.tfvars</a> (from <em>s3://terraform-aws-landing-zone/mycompany/landing</em>zone<em>vpc/default.tfvars</em>) looks like this:</p>\n<pre><code>landing_zone_providers = [\n  \"default\"\n]\ndefault_provider = {\n  landing_zone_vpc_tags_element = {\n    config_0 = {\n      Name        = \"VPC for Landing Zone\"\n      Description = \"Managed by TerraHub\"\n      ThubCode    = \"1234abcd\"\n      ThubEnv     = \"prod\"\n    }\n  },\n  landing_zone_vpc_resource = {\n    config_0 = {\n      cidr_block                       = \"172.16.0.0/16\"\n      instance_tenancy                 = \"default\"\n      assign_generated_ipv6_cidr_block = \"false\"\n      enable_classiclink               = \"false\"\n      enable_classiclink_dns_support   = \"false\"\n      enable_dns_support               = \"true\"\n      enable_dns_hostnames             = \"false\"\n    }\n  }\n}\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">Let’s connect these two pieces from above:</p>\n<ul class=\"graf graf--li graf-grap\">\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L10\">Line 10</a>: this component will create terraform resource <a href=\"https://www.terraform.io/docs/providers/aws/r/vpc.html\">aws_vpc</a></li>\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L12\">Line 12</a>: this component will create separate terraform provider <a href=\"https://www.terraform.io/docs/providers/aws/index.html\">aws</a> for each value from <code>landing_zone_providers</code> variable (which in practice how AWS accounts and AWS regions are separated in terraform)</li>\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L14\">Line 14</a>: this component will iterate through <code>landing_zone_providers</code>, expecting specific variable for each provider (e.g. <code>default_provider</code>); that is why it’s required to define all <code>[provider_name]_provider</code> variables (e.g. if <code>landing_zone_providers</code> has values <code>default</code>, <code>alpha</code> and <code>beta</code>, it’s expected .tfvars file(s) to define variables <code>default_provider</code>, <code>alpha_provider</code> and <code>beta_provider</code>)</li>\n<li><a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml#L16\">Line 16</a>: this component uses <code>count</code> to iterate through resources defined by variable <code>landing_zone_vpc_resource</code>; to use native terraform capability, define <code>[component_name]_resource</code> values as iterate-able list of elements <code>config_[iterator]</code> (e.g. <code>config_0</code>, <code>config_1</code>, and so on)</li>\n</ul>\n<p class=\"graf graf-up margin-bottom-25\">Ideal proposed structure for <code>.tfvars</code> file(s) should be the following:</p>\n<pre><code>landing_zone_providers = [\n  \"default\"\n  \"{{alpha_provider}}\"\n  \"{{beta_provider}}\"\n  [...]\n]\ndefault_provider = {\n  {{component_name}}_resource = {\n    config_0 = {\n      [...]\n    },\n    config_1 = {\n      [...]\n    },\n    [...]\n  }\n}\n{{alpha_provider}}_provider = {\n  {{component_name}}_resource = {\n    [...]\n  }\n}\n{{beta_provider}}_provider = {\n  [...]\n}\n[...]\n</code></pre>\n<h3>Landing Zone Components Using YAML Instead of HCL</h3>\n<p class=\"graf graf-up margin-bottom-25\">Consider the following: Our goal for this terraform module is to empower users to do less by using native terraform capabilities, but we couldn’t do that primarily because HCL doesn’t allow usage of variables inside <code>.tfvars</code> files and doesn’t support iterations through providers. For these reasons (and a couple of more) we opted into using <a href=\"https://npmjs.com/package/terrahub\">terrahub cli</a> — terraform automation and orchestration tool.</p>\n<p class=\"graf graf-up margin-bottom-25\">When executing <code>terraform init</code> and <code>terraform apply</code> on <code>landing_zone module</code>, the underlying code triggers <code>terrahub run</code> for entire list of <code>landing_zone_components</code>. Internally, landing zone components in YAML format are converted into HCL. This terrahub feature is called JIT (aka Just In Time) and, as the name suggests, YAML configs are converted into HCL in real-time during terraform workflow execution.</p>\n<p class=\"graf graf-up margin-bottom-25\">For example, above mentioned component <a href=\"https://github.com/TerraHubCorp/terraform-aws-landing-zone/blob/master/components/landing_zone_vpc/.terrahub.yml\">landing<em>zone</em>vpc</a> defined as <code>.yml</code> file will be converted into the following set of <code>.tf</code> files:</p>\n<pre><code>$ ls ~/.terrahub/cache/jit/landing_zone_vpc_eef16dcf/\nREADME.md    default.tfvars    locals.tf    main.tf        output.tf    provider.tf    terraform.tf    variable.tf\n</code></pre>\n<blockquote class=\"green-blockquote\">\n  <p class=\"graf graf-up margin-bottom-25\"><em>NOTE: In order to debug JIT converted files from YAML format into HCL go to <strong>~/.terrahub/cache/jit/</strong> folder and explore corresponding component(s). If specific component is missing, execute <code>terrahub run -i [component_name]</code> in order to generate corresponding <code>[component_name]_[hash]</code> folder and <code>.tf</code> files.</em></p>\n</blockquote>\n<h3>Putting Everything Together</h3>\n<p class=\"graf graf-up margin-bottom-25\">After putting everything together, we get a very powerful terraform module:</p>\n<pre><code>$ terraform init\nInitializing modules...\n- landing_zone in modules/landing_zone\n\n[...]\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">and</p>\n<pre><code>$ terraform apply\nAn execution plan has been generated and is shown below.\nResource actions are indicated with the following symbols:\n  + create\n[...]\nApply complete! Resources: 3 added, 0 changed, 0 destroyed.\n</code></pre>\n<p class=\"graf graf-up margin-bottom-25\">And that’s it. We hope it helps.</p>\n<p class=\"graf graf-up margin-bottom-25\">Share your thoughts and your experience on <a href=\"https://linkedin.com/company/mitoc-group\">LinkedIn</a>, <a href=\"https://twitter.com/mitocgroup\">Twitter</a>, <a href=\"https://facebook.com/mitocgroup\">Facebook</a> or in the comments section below.</p>"}}
